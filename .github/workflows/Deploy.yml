name: Deploy to ECS Fargate with Blue/Green

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-2
  ECR_REPO: parth-strapi-ecr
  ECR_ACCOUNT: 607700977843
  ECS_CLUSTER: parth-strapi-cluster
  ECS_SERVICE: parth-strapi-service
  TASK_FAMILY: parth-strapi-task
  DEPLOYMENT_GROUP: parth-strapi-dg
  CODEDEPLOY_APP: parth-strapi-app

jobs:
  deploy:
    name: Deploy Strapi via CodeDeploy Blue/Green
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Ensure ECR Repo Exists
      run: |
        aws ecr describe-repositories --repository-names $ECR_REPO || \
        aws ecr create-repository --repository-name $ECR_REPO

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build & Push Docker image
      run: |
        TIMESTAMP=$(date +%s)
        IMAGE_TAG=parth-strapi-$TIMESTAMP
        ECR_URI=${{ env.ECR_ACCOUNT }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO }}
        docker build -t $ECR_URI:$IMAGE_TAG ./strapi-app
        docker push $ECR_URI:$IMAGE_TAG
        echo "IMAGE_URI=$ECR_URI:$IMAGE_TAG" >> $GITHUB_ENV

    - name: Install Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.6

    - name: Terraform Init
      working-directory: terraform
      run: terraform init

    - name: Terraform Apply
      working-directory: terraform
      run: terraform apply -auto-approve -var="ecr_image_url=${{ env.IMAGE_URI }}"

    - name: Get New Task Definition ARN
      id: taskdef
      run: |
        TASK_DEF_ARN=$(aws ecs describe-task-definition --task-definition $TASK_FAMILY \
          --query "taskDefinition.taskDefinitionArn" --output text)
        echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV
        echo "task_def_arn=$TASK_DEF_ARN" >> $GITHUB_OUTPUT

    - name: Prepare AppSpec JSON
      run: |
        sed -i "s|REPLACE_TASK_DEFINITION_ARN|${{ steps.taskdef.outputs.task_def_arn }}|g" appspec.json

    - name: Deploy with CodeDeploy
      run: |
        BASE64_CONTENT=$(base64 appspec.json | tr -d '\n')
        aws deploy create-deployment \
          --application-name $CODEDEPLOY_APP \
          --deployment-group-name $DEPLOYMENT_GROUP \
          --revision "{\"appSpecContent\": {\"content\": \"$BASE64_CONTENT\"}}" \
          --deployment-config-name CodeDeployDefault.ECSCanary10Percent5Minutes \
          --region $AWS_REGION

    - name: Deployment Triggered Successfully
      run: echo "Deployment triggered for TaskDef:${{ steps.taskdef.outputs.task_def_arn }}"
