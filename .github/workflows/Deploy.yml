name: Deploy to ECS Fargate with CodeDeploy (S3 AppSpec Bundle)

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-2
  ECR_REPO: parth-strapi-ecr
  ECR_ACCOUNT: 607700977843
  ECS_CLUSTER: parth-strapi-cluster
  ECS_SERVICE: parth-strapi-service
  TASK_FAMILY: parth-strapi-task
  DEPLOYMENT_GROUP: parth-dg
  CODEDEPLOY_APP: parth-strapi-app
  APPSPEC_BUCKET: parth-codedeploy-appspecs

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Ensure ECR Repo Exists
      run: |
        aws ecr describe-repositories --repository-names $ECR_REPO || \
        aws ecr create-repository --repository-name $ECR_REPO

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build & Push Docker Image
      run: |
        IMAGE_TAG=${{ github.sha }}
        ECR_URI=${{ env.ECR_ACCOUNT }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO }}
        docker build -t $ECR_URI:$IMAGE_TAG ./strapi-app
        docker push $ECR_URI:$IMAGE_TAG
        echo "IMAGE_URI=$ECR_URI:$IMAGE_TAG" >> $GITHUB_ENV

    - name: Install Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.6

    - name: Terraform Init & Apply
      working-directory: terraform
      run: |
        terraform init
        terraform apply -auto-approve -var="ecr_image_url=${{ env.IMAGE_URI }}"

    - name: Get Task Definition JSON
      run: |
        aws ecs describe-task-definition --task-definition $TASK_FAMILY --query "taskDefinition" > taskdef.json

    - name: Prepare AppSpec Bundle ZIP
      run: |
        mkdir -p deploy-bundle
        cp appspec.yaml deploy-bundle/appspec.yaml
        cp taskdef.json deploy-bundle/taskdef.json
        zip -r deploy-bundle.zip deploy-bundle
        echo "Deploy Bundle Created."

    - name: Upload AppSpec Bundle to S3
      run: |
        S3_KEY=deployments/deploy-${{ github.sha }}.zip
        aws s3 cp deploy-bundle.zip s3://$APPSPEC_BUCKET/$S3_KEY
        echo "S3_KEY=$S3_KEY" >> $GITHUB_ENV

    - name: Trigger CodeDeploy Deployment
      run: |
        aws deploy create-deployment \
          --application-name $CODEDEPLOY_APP \
          --deployment-group-name $DEPLOYMENT_GROUP \
          --s3-location bucket=$APPSPEC_BUCKET,key=${{ env.S3_KEY }},bundleType=zip \
          --deployment-config-name CodeDeployDefault.ECSCanary10Percent5Minutes \
          --region $AWS_REGION

    - name: Monitor Deployment Status
      run: |
        DEPLOYMENT_ID=$(aws deploy list-deployments --application-name $CODEDEPLOY_APP --deployment-group-name $DEPLOYMENT_GROUP --query 'deployments[0]' --output text)
        echo "Deployment ID: $DEPLOYMENT_ID"

        STATUS="InProgress"
        while [ "$STATUS" == "InProgress" ]; do
          STATUS=$(aws deploy get-deployment --deployment-id $DEPLOYMENT_ID --query 'deploymentInfo.status' --output text)
          echo "Current Deployment Status: $STATUS"
          sleep 15
        done

        if [ "$STATUS" != "Succeeded" ]; then
          echo "Deployment Failed! Exiting..."
          exit 1
        fi

    - name: Deployment Successful
      run: echo "Deployment completed successfully with Task Definition in S3 Bundle!"
