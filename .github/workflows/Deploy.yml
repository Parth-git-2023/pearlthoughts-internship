name: Deploy Strapi to ECS (Blue/Green)

on:
  push:
    branches: [main]

env:
  AWS_REGION: us-east-2
  ECR_REPO: parth-strapi-ecr
  ECR_ACCOUNT: 607700977843
  ECS_CLUSTER: parth-strapi-cluster
  ECS_SERVICE: parth-strapi-service
  TASK_FAMILY: parth-strapi-task
  CODEDEPLOY_APP: parth-strapi-codedeploy-app
  CODEDEPLOY_GROUP: parth-strapi-dg

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Ensure ECR Repo Exists
      run: |
        aws ecr describe-repositories --repository-names $ECR_REPO || \
        aws ecr create-repository --repository-name $ECR_REPO

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build & Push Docker image
      run: |
        TIMESTAMP=$(date +%s)
        IMAGE_TAG=parth-strapi-$TIMESTAMP
        ECR_URI=${{ env.ECR_ACCOUNT }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO }}
        docker build -t $ECR_URI:$IMAGE_TAG .
        docker push $ECR_URI:$IMAGE_TAG
        echo "IMAGE_URI=$ECR_URI:$IMAGE_TAG" >> $GITHUB_ENV

    - name: Install Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.6

    - name: Terraform Init
      working-directory: terraform
      run: terraform init

    - name: Terraform Apply with New Image
      working-directory: terraform
      run: terraform apply -auto-approve -var="ecr_image_url=${{ env.IMAGE_URI }}"

    - name: Register new Task Definition
      id: taskdef
      run: |
        NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
          --family $TASK_FAMILY \
          --requires-compatibilities FARGATE \
          --cpu 512 --memory 1024 \
          --network-mode awsvpc \
          --execution-role-arn arn:aws:iam::$ECR_ACCOUNT:role/ecs-task-execution-role-p \
          --container-definitions "[
            {
              \"name\": \"strapi\",
              \"image\": \"${IMAGE_URI}\",
              \"essential\": true,
              \"portMappings\": [
                {
                  \"containerPort\": 1337,
                  \"protocol\": \"tcp\"
                }
              ]
            }
          ]" \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text)

        echo "NEW_TASK_DEF_ARN=$NEW_TASK_DEF_ARN" >> $GITHUB_ENV

    - name: Prepare AppSpec YAML
      run: |
        cat > appspec.yaml <<EOF
        version: 1
        Resources:
          - TargetService:
              Type: AWS::ECS::Service
              Properties:
                TaskDefinition: "$NEW_TASK_DEF_ARN"
                LoadBalancerInfo:
                  ContainerName: "strapi"
                  ContainerPort: 1337
        EOF

    - name: Deploy to ECS via CodeDeploy
      run: |
        APPSPEC_CONTENT=$(base64 appspec.yaml | tr -d '\n')
        aws deploy create-deployment \
          --application-name "$CODEDEPLOY_APP" \
          --deployment-group-name "$CODEDEPLOY_GROUP" \
          --deployment-config-name CodeDeployDefault.ECSCanary10Percent5Minutes \
          --description "Blue/Green Deployment for $IMAGE_URI" \
          --revision "appSpecContent={\"content\":\"$APPSPEC_CONTENT\"}"
