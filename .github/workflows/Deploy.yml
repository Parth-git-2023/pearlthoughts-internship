name: Deploy to ECS Fargate with Blue/Green

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy Strapi via CodeDeploy Blue/Green
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-2
      ECR_REPO: parth-strapi-ecr
      IMAGE_TAG: latest
      ECS_TASK_FAMILY: parth-strapi-task
      CONTAINER_NAME: strapi
      CONTAINER_PORT: 1337
      DEPLOY_APP: parth-strapi-codedeploy-app
      DEPLOY_GROUP: parth-strapi-deploy-group

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Ensure ECR Repo Exists
        run: |
          aws ecr describe-repositories --repository-names $ECR_REPO || \
          aws ecr create-repository --repository-name $ECR_REPO

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | \
          docker login --username AWS --password-stdin 607700977843.dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Build and Push Docker Image
        run: |
          docker build -t $ECR_REPO:$IMAGE_TAG ./strapi-app
          docker tag $ECR_REPO:$IMAGE_TAG 607700977843.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO:$IMAGE_TAG
          docker push 607700977843.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO:$IMAGE_TAG

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve
     
      - name: Register New Task Definition
        id: register-task
        run: |
          TASK_DEF_ARN=$(aws ecs register-task-definition \
            --family $ECS_TASK_FAMILY \
            --execution-role-arn arn:aws:iam::607700977843:role/ecs-task-execution-role-p \
            --network-mode awsvpc \
            --requires-compatibilities FARGATE \
            --cpu "256" \
            --memory "512" \
            --container-definitions "[{
              \"name\": \"$CONTAINER_NAME\",
              \"image\": \"607700977843.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO:$IMAGE_TAG\",
              \"portMappings\": [{
                \"containerPort\": $CONTAINER_PORT,
                \"protocol\": \"tcp\"
              }],
              \"essential\": true
            }]" \
            --query "taskDefinition.taskDefinitionArn" \
            --output text)
          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV
     
      - name: Create AppSpec file
        run: |
          cat > appspec.json <<EOF
          {
            "version": 1,
            "Resources": [
              {
                "TargetService": {
                  "Type": "AWS::ECS::Service",
                  "Properties": {
                    "TaskDefinition": "$TASK_DEF_ARN",
                    "LoadBalancerInfo": {
                      "ContainerName": "$CONTAINER_NAME",
                      "ContainerPort": $CONTAINER_PORT
                    }
                  }
                }
              }
            ]
          }EOF

      - name: Encode AppSpec to base64 and generate revision.json
        run: |
          cat appspec.json | base64 | tr -d '\n' > appspec.b64
          cat > revision.json <<EOF
          {
            "appSpecContent": {
              "content": "$(cat appspec.b64)"
            }
          }EOF

      - name: Trigger CodeDeploy Deployment
        run: |
          aws deploy create-deployment \
            --application-name $DEPLOY_APP \
            --deployment-group-name $DEPLOY_GROUP \
            --revision file://revision.json \
            --deployment-config-name CodeDeployDefault.ECSCanary10Percent5Minutes \
            --region $AWS_REGION
