name: Deploy to ECS with CodeDeploy

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-2
  ECR_REPO: parth-strapi-ecr
  ECS_CLUSTER: parth-strapi-cluster
  ECS_SERVICE: parth-strapi-service
  CODEDEPLOY_APP: parth-strapi-codedeploy-app
  CODEDEPLOY_DG: parth-strapi-dg

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::607700977843:role/github-actions-role-p
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Docker image
        run: |
          IMAGE_TAG=latest
          ECR_URL=607700977843.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}
          docker build -t $ECR_URL:$IMAGE_TAG .
          docker push $ECR_URL:$IMAGE_TAG
          echo "IMAGE=$ECR_URL:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Register new ECS Task Definition revision
        id: register-task
        run: |
          FAMILY="parth-strapi-task"
          TASK_DEF=$(aws ecs describe-task-definition --task-definition $FAMILY)

          NEW_DEF=$(echo "$TASK_DEF" | jq --arg IMAGE "$IMAGE" '.taskDefinition |
            {
              family: .family,
              networkMode: .networkMode,
              containerDefinitions: [.containerDefinitions[0] | .image=$IMAGE],
              requiresCompatibilities: .requiresCompatibilities,
              cpu: .cpu,
              memory: .memory,
              executionRoleArn: .executionRoleArn
            }')

          echo "$NEW_DEF" > taskdef.json
          NEW_TASK_ARN=$(aws ecs register-task-definition --cli-input-json file://taskdef.json | jq -r '.taskDefinition.taskDefinitionArn')
          echo "TASK_DEF_ARN=$NEW_TASK_ARN" >> $GITHUB_ENV

      - name: Inject Task Definition ARN into appspec and encode
        run: |
          sed "s|REPLACEME|${TASK_DEF_ARN}|" appspec.yaml > appspec-rendered.yaml
          echo "APPSPEC_CONTENT=$(base64 appspec-rendered.yaml | tr -d '\n')" >> $GITHUB_ENV

      - name: Deploy using CodeDeploy
        run: |
          aws deploy create-deployment \
            --application-name $CODEDEPLOY_APP \
            --deployment-group-name $CODEDEPLOY_DG \
            --deployment-config-name CodeDeployDefault.ECSCanary10Percent5Minutes \
            --revision appSpecContent="{\"content\":\"$APPSPEC_CONTENT\"}" \
            --file-exists-behavior OVERWRITE
