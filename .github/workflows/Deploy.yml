name: Destroy AWS Infra (Terraform Force Destroy)

on:
  workflow_dispatch:

env:
  AWS_REGION: us-east-2

jobs:
  destroy:
    name: Terraform Destroy All Resources
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Install Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.6

    - name: Terraform Init
      working-directory: terraform
      run: terraform init

    - name: Terraform Force Destroy
      working-directory: terraform
      run: |
        terraform destroy -auto-approve -input=false -var="ecr_image_url=dummy"

    - name: Delete ECR Repository Forcefully
      run: |
        REPO_NAME="parth-strapi-ecr"
        aws ecr delete-repository --repository-name $REPO_NAME --force || echo "ECR Repo already deleted or not found"

    - name: Delete CodeDeploy Application (Optional Cleanup)
      run: |
        aws deploy delete-application --application-name parth-strapi-app || echo "CodeDeploy App already deleted or not found"

    - name: Delete ALB Target Groups (Optional Cleanup)
      run: |
        TARGET_GROUP_ARN=$(aws elbv2 describe-target-groups --names parth-strapi-tg-blue --query 'TargetGroups[0].TargetGroupArn' --output text 2>/dev/null || echo "")
        if [ "$TARGET_GROUP_ARN" != "" ]; then
          aws elbv2 delete-target-group --target-group-arn $TARGET_GROUP_ARN
        fi
        TARGET_GROUP_ARN=$(aws elbv2 describe-target-groups --names parth-strapi-tg-green --query 'TargetGroups[0].TargetGroupArn' --output text 2>/dev/null || echo "")
        if [ "$TARGET_GROUP_ARN" != "" ]; then
          aws elbv2 delete-target-group --target-group-arn $TARGET_GROUP_ARN
        fi
