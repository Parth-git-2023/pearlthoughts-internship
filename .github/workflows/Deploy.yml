name: Full Deploy Flow â€” ECR > Docker Build > Terraform > CodeDeploy (YAML AppSpec)

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-2
  ECR_REPO: parth-strapi-ecr
  ECR_ACCOUNT: 607700977843
  ECS_CLUSTER_NAME: parth-strapi-cluster
  ECS_SERVICE_NAME: parth-strapi-service
  ECS_TASK_FAMILY: parth-strapi-task
  CODEDEPLOY_APP_NAME: parth-strapi-app
  CODEDEPLOY_GROUP_NAME: parth-dg
  CONTAINER_NAME: strapi

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Ensure ECR Repo Exists
      run: |
        aws ecr describe-repositories --repository-names $ECR_REPO || \
        aws ecr create-repository --repository-name $ECR_REPO

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and Push Docker Image
      run: |
        IMAGE_TAG=${{ github.sha }}
        ECR_URI=${{ env.ECR_ACCOUNT }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO }}
        docker build -t $ECR_URI:$IMAGE_TAG ./strapi-app
        docker push $ECR_URI:$IMAGE_TAG
        echo "IMAGE_URI=$ECR_URI:$IMAGE_TAG" >> $GITHUB_ENV

    - name: Install Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.6

    - name: Terraform Init
      working-directory: terraform
      run: terraform init

    - name: Terraform Apply with ECR Image URL
      working-directory: terraform
      run: terraform apply -auto-approve -var="ecr_image_url=${{ env.IMAGE_URI }}"

    - name: Render New ECS Task Definition File
      id: render-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ecs-task-definition.json
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ env.IMAGE_URI }}

    - name: Register New Task Definition
      id: register-task
      run: |
        TASK_DEF_PATH="${{ steps.render-task-def.outputs.task-definition }}"
        TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://$TASK_DEF_PATH --query 'taskDefinition.taskDefinitionArn' --output text)
        echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV

    - name: Prepare AppSpec YAML with Task ARN
      run: |
        sed "s|REPLACE_TASK_DEFINITION_ARN|${{ env.TASK_DEF_ARN }}|g" appspec.yaml > final-appspec.yaml

    - name: Read & Escape YAML AppSpec as JSON String
      run: |
        APPSPEC_CONTENT=$(cat final-appspec.yaml | jq -Rs .)
        echo "APPSPEC_CONTENT=$APPSPEC_CONTENT" >> $GITHUB_ENV

    - name: Trigger CodeDeploy Deployment (YAML AppSpecContent)
      run: |
        aws deploy create-deployment \
          --application-name ${{ env.CODEDEPLOY_APP_NAME }} \
          --deployment-group-name ${{ env.CODEDEPLOY_GROUP_NAME }} \
          --deployment-config-name CodeDeployDefault.ECSCanary10Percent5Minutes \
          --cli-input-json "{
            \"applicationName\": \"${{ env.CODEDEPLOY_APP_NAME }}\",
            \"deploymentGroupName\": \"${{ env.CODEDEPLOY_GROUP_NAME }}\",
            \"revision\": {
              \"revisionType\": \"AppSpecContent\",
              \"appSpecContent\": {
                \"content\": ${{ env.APPSPEC_CONTENT }}
              }
            }
          }"
