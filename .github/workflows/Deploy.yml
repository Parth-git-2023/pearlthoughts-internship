name: Deploy Strapi ECS Blue/Green

on: [push]

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-2
      ECR_REPO: parth-strapi-ecr
      TASK_DEF_FAMILY: parth-strapi-task
      CD_APP: parth-strapi-codedeploy-app
      CD_GROUP: parth-strapi-deploy-group
      CONTAINER_NAME: strapi
      CONTAINER_PORT: 1337

    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform setup
        uses: hashicorp/setup-terraform@v3
      - name: Terraform Init & Apply
        working-directory: terraform
        run: terraform init && terraform apply -auto-approve

      - name: Ensure ECR exists
        run: |
          aws ecr describe-repositories --repository-names $ECR_REPO || \
          aws ecr create-repository --repository-name $ECR_REPO

      - name: Login to ECR
        run: aws ecr get-login-password --region $AWS_REGION | \
             docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${AWS_REGION}.amazonaws.com

      - name: Build & push image
        run: |
          IMAGE_TAG=${{ github.sha }}
          docker build -t $ECR_REPO:$IMAGE_TAG .
          docker tag $ECR_REPO:$IMAGE_TAG ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${AWS_REGION}.amazonaws.com/$ECR_REPO:$IMAGE_TAG
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${AWS_REGION}.amazonaws.com/$ECR_REPO:$IMAGE_TAG
          echo "IMAGE_URL=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${AWS_REGION}.amazonaws.com/$ECR_REPO:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Register ECS task def
        id: reg
        run: |
          TASK_ARN=$(aws ecs register-task-definition \
            --family $TASK_DEF_FAMILY \
            --execution-role-arn arn:aws:iam::607700977843:role/ecs-task-execution-role-p \
            --network-mode awsvpc \
            --requires-compatibilities FARGATE \
            --cpu "512" --memory "1024" \
            --container-definitions "[{\"name\":\"$CONTAINER_NAME\",\"image\":\"$IMAGE_URL\",\"portMappings\":[{\"containerPort\":$CONTAINER_PORT,\"protocol\":\"tcp\"}]}]" \
            --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_ENV

      - name: Prepare appspec
        run: |
          sed "s|<TASK_DEF_ARN>|${TASK_ARN}|" appspec.json > final-appspec.json

      - name: Base64 encode revision.json
        run: |
          B64=$(base64 -w 0 final-appspec.json)
          echo "{\"revisionType\":\"AppSpecContent\",\"appSpecContent\":{\"content\":\"$B64\"}}" > revision.json

      - name: Trigger CodeDeploy
        run: |
          aws deploy create-deployment \
            --application-name $CD_APP \
            --deployment-group-name $CD_GROUP \
            --revision file://revision.json \
            --deployment-config-name CodeDeployDefault.ECSCanary10Percent5Minutes
