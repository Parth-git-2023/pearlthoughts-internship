name: Deploy Strapi to ECS (Final)

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-2
  ECR_REPO: parth-strapi-ecr
  ECR_ACCOUNT: 607700977843
  ECS_CLUSTER: parth-strapi-cluster
  ECS_SERVICE: parth-strapi-service
  TASK_FAMILY: parth-strapi-task
  CODEDEPLOY_APP: parth-strapi-app
  DEPLOYMENT_GROUP: parth-dg
  CONTAINER_NAME: strapi

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Ensure ECR Repo Exists
      run: |
        aws ecr describe-repositories --repository-names $ECR_REPO || \
        aws ecr create-repository --repository-name $ECR_REPO

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build & Push Docker image
      run: |
        IMAGE_TAG=${{ github.sha }}
        ECR_URI=${{ env.ECR_ACCOUNT }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO }}
        docker build -t $ECR_URI:$IMAGE_TAG ./strapi-app
        docker push $ECR_URI:$IMAGE_TAG
        echo "IMAGE_URI=$ECR_URI:$IMAGE_TAG" >> $GITHUB_ENV

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.6

    - name: Terraform Init
      working-directory: terraform
      run: terraform init

    - name: Terraform Apply (Deploy Infra)
      working-directory: terraform
      run: terraform apply -auto-approve -var="ecr_image_url=${{ env.IMAGE_URI }}"

    - name: Get Latest Task Definition ARN
      id: taskdef
      run: |
        TASK_DEF_ARN=$(aws ecs describe-task-definition --task-definition $TASK_FAMILY --query "taskDefinition.taskDefinitionArn" --output text)
        echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV
        echo "task_def_arn=$TASK_DEF_ARN" >> $GITHUB_OUTPUT

    - name: Prepare AppSpec.yaml
      run: |
        echo "version: 1" > appspec.yaml
        echo "Resources:" >> appspec.yaml
        echo "  - TargetService:" >> appspec.yaml
        echo "      Type: AWS::ECS::Service" >> appspec.yaml
        echo "      Properties:" >> appspec.yaml
        echo "        TaskDefinition: ${{ steps.taskdef.outputs.task_def_arn }}" >> appspec.yaml
        echo "        LoadBalancerInfo:" >> appspec.yaml
        echo "          ContainerName: ${{ env.CONTAINER_NAME }}" >> appspec.yaml
        echo "          ContainerPort: 1337" >> appspec.yaml

    - name: Convert AppSpec.yaml to JSON-safe string
      id: appspec_json
      run: |
        APPSPEC_CONTENT=$(cat appspec.yaml | jq -Rs .)
        echo "APPSPEC_CONTENT=$APPSPEC_CONTENT" >> $GITHUB_ENV

    - name: Generate deployment.json for CodeDeploy
      run: |
        echo "{" > deployment.json
        echo "  \"applicationName\": \"${{ env.CODEDEPLOY_APP }}\"," >> deployment.json
        echo "  \"deploymentGroupName\": \"${{ env.DEPLOYMENT_GROUP }}\"," >> deployment.json
        echo "  \"revision\": {" >> deployment.json
        echo "    \"revisionType\": \"AppSpecContent\"," >> deployment.json
        echo "    \"appSpecContent\": {" >> deployment.json
        echo "      \"content\": ${{ env.APPSPEC_CONTENT }}" >> deployment.json
        echo "    }" >> deployment.json
        echo "  }" >> deployment.json
        echo "}" >> deployment.json

    - name: Trigger CodeDeploy Deployment
      run: |
        aws deploy create-deployment --cli-input-json file://deployment.json
