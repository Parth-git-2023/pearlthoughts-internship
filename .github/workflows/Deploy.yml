name: Deploy Strapi to ECS

on:
  push:
    branches: [main]

env:
  AWS_REGION: us-east-2
  ECR_REPO: parth-strapi-ecr
  ECR_ACCOUNT: 607700977843
  ECS_CLUSTER: parth-strapi-cluster
  ECS_SERVICE: parth-strapi-service
  TASK_FAMILY: parth-strapi-task
  CODEDEPLOY_APP: parth-strapi-codedeploy-app
  CODEDEPLOY_GROUP: parth-strapi-dg

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Ensure ECR Repo Exists
      run: |
        aws ecr describe-repositories --repository-names $ECR_REPO || \
        aws ecr create-repository --repository-name $ECR_REPO

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build & Push Docker image
      run: |
        TIMESTAMP=$(date +%s)
        IMAGE_TAG=parth-strapi-$TIMESTAMP
        ECR_URI=${{ env.ECR_ACCOUNT }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO }}
        docker build -t $ECR_URI:$IMAGE_TAG .
        docker push $ECR_URI:$IMAGE_TAG
        echo "image=$ECR_URI:$IMAGE_TAG" >> $GITHUB_ENV

    - name: Install Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.6

    - name: Terraform Init
      working-directory: terraform
      run: terraform init

    - name: Terraform Apply
      working-directory: terraform
      run: terraform apply -auto-approve -var="ecr_image_url=${{ env.image }}"

    - name: Generate Base64 AppSpec & Task Definition
      run: |
        APP_SPEC_CONTENT=$(base64 appspec.yaml | tr -d '\n')
        TASK_DEF_FILE=$(aws ecs describe-task-definition --task-definition $TASK_FAMILY)
        TASK_DEF_CONTENT=$(echo "$TASK_DEF_FILE" | jq -c .taskDefinition | base64 | tr -d '\n')
        echo "APP_SPEC_CONTENT=$APP_SPEC_CONTENT" >> $GITHUB_ENV
        echo "TASK_DEF_CONTENT=$TASK_DEF_CONTENT" >> $GITHUB_ENV

    - name: Create CodeDeploy Deployment
      run: |
        aws deploy create-deployment \
          --application-name $CODEDEPLOY_APP \
          --deployment-group-name $CODEDEPLOY_GROUP \
          --deployment-config-name CodeDeployDefault.ECSCanary10Percent5Minutes \
          --revision 'revisionType=AppSpecContent,appSpecContent={"content":"'"$APP_SPEC_CONTENT"'"},taskDefinition={"content":"'"$TASK_DEF_CONTENT"'"}' \
          --description "Blue/Green Deployment of $image"
