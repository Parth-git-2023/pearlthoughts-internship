name: Deploy to ECS with Blue/Green

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy Strapi to ECS with Blue/Green
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-2
      ECR_REPO: parth-strapi-ecr
      ECS_CLUSTER: parth-strapi-cluster
      SERVICE_NAME: parth-strapi-service
      DEPLOYMENT_GROUP: parth-strapi-dg
      APPLICATION_NAME: parth-strapi-codedeploy-app
      CONTAINER_NAME: strapi
      TASK_DEF_TEMPLATE: taskdef.json
      APP_SPEC_FILE: appspec.json

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Create ECR Repo if not exists
        run: |
          aws ecr describe-repositories --repository-names $ECR_REPO || \
          aws ecr create-repository --repository-name $ECR_REPO

      - name: Build, tag, and push Docker image
        run: |
          IMAGE_TAG=${{ github.sha }}
          IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/$ECR_REPO:$IMAGE_TAG
          docker build -t $ECR_REPO:$IMAGE_TAG ./strapi-app
          docker tag $ECR_REPO:$IMAGE_TAG $IMAGE_URI
          docker push $IMAGE_URI
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      - name: Create taskdef.json
        run: |
          cat > $TASK_DEF_TEMPLATE <<EOF
          {
            "family": "parth-strapi-task",
            "networkMode": "awsvpc",
            "executionRoleArn": "arn:aws:iam::607700977843:role/ecs-task-execution-role",
            "containerDefinitions": [
              {
                "name": "${{ env.CONTAINER_NAME }}",
                "image": "${{ env.IMAGE_URI }}",
                "portMappings": [
                  {
                    "containerPort": 1337,
                    "protocol": "tcp"
                  }
                ],
                "essential": true
              }
            ],
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "256",
            "memory": "512"
          }
          EOF

      - name: Register new ECS Task Definition
        id: register-task-def
        run: |
          TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://$TASK_DEF_TEMPLATE --query "taskDefinition.taskDefinitionArn" --output text)
          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Replace TaskDef in appspec.json
        run: |
          jq --arg TASK_DEF "$TASK_DEF_ARN" '.Resources[0].TargetService.Properties.TaskDefinition = $TASK_DEF' appspec.json > final-appspec.json
          base64 final-appspec.json > final-appspec.b64

      - name: Create revision.json for CodeDeploy
        run: |
          echo "{
            \"applicationName\": \"${{ env.APPLICATION_NAME }}\",
            \"deploymentGroupName\": \"${{ env.DEPLOYMENT_GROUP }}\",
            \"revision\": {
              \"revisionType\": \"AppSpecContent\",
              \"appSpecContent\": {
                \"content\": \"$(cat final-appspec.b64 | tr -d '\n')\",
                \"sha256\": \"\"
              }
            }
          }" > revision.json

      - name: Deploy to ECS via CodeDeploy
        run: |
          aws deploy create-deployment --cli-input-json file://revision.json
