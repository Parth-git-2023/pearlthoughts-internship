{
  "version": 3,
  "sources": ["../../../../../packages/core/admin/admin/src/pages/Settings/pages/Webhooks/ListPage.tsx"],
  "sourcesContent": ["import * as React from 'react';\r\n\r\nimport {\r\n  useNotifyAT,\r\n  Checkbox,\r\n  Button,\r\n  EmptyStateLayout,\r\n  Flex,\r\n  IconButton,\r\n  Switch,\r\n  Table,\r\n  Tbody,\r\n  Td,\r\n  TFooter,\r\n  Th,\r\n  Thead,\r\n  Tr,\r\n  Typography,\r\n  VisuallyHidden,\r\n  LinkButton,\r\n  Dialog,\r\n} from '@strapi/design-system';\r\nimport { Pencil, Plus, Trash } from '@strapi/icons';\r\nimport { EmptyDocuments } from '@strapi/icons/symbols';\r\nimport { useIntl } from 'react-intl';\r\nimport { NavLink, useNavigate } from 'react-router-dom';\r\n\r\nimport { UpdateWebhook } from '../../../../../../shared/contracts/webhooks';\r\nimport { ConfirmDialog } from '../../../../components/ConfirmDialog';\r\nimport { Layouts } from '../../../../components/Layouts/Layout';\r\nimport { Page } from '../../../../components/PageHelpers';\r\nimport { useTypedSelector } from '../../../../core/store/hooks';\r\nimport { useNotification } from '../../../../features/Notifications';\r\nimport { useAPIErrorHandler } from '../../../../hooks/useAPIErrorHandler';\r\nimport { useRBAC } from '../../../../hooks/useRBAC';\r\n\r\nimport { useWebhooks } from './hooks/useWebhooks';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ListPage\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst ListPage = () => {\r\n  const [showModal, setShowModal] = React.useState(false);\r\n  const [webhooksToDelete, setWebhooksToDelete] = React.useState<string[]>([]);\r\n  const permissions = useTypedSelector((state) => state.admin_app.permissions.settings?.webhooks);\r\n  const { formatMessage } = useIntl();\r\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\r\n  const { toggleNotification } = useNotification();\r\n  const navigate = useNavigate();\r\n\r\n  const {\r\n    isLoading: isRBACLoading,\r\n    allowedActions: { canCreate, canUpdate, canDelete },\r\n  } = useRBAC(permissions);\r\n  const { notifyStatus } = useNotifyAT();\r\n\r\n  const {\r\n    isLoading: isWebhooksLoading,\r\n    webhooks,\r\n    error: webhooksError,\r\n    updateWebhook,\r\n    deleteManyWebhooks,\r\n  } = useWebhooks();\r\n\r\n  React.useEffect(() => {\r\n    if (webhooksError) {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatAPIError(webhooksError),\r\n      });\r\n\r\n      return;\r\n    }\r\n    if (webhooks) {\r\n      notifyStatus(\r\n        formatMessage({\r\n          id: 'Settings.webhooks.list.loading.success',\r\n          defaultMessage: 'Webhooks have been loaded',\r\n        })\r\n      );\r\n    }\r\n  }, [webhooks, webhooksError, toggleNotification, formatMessage, notifyStatus, formatAPIError]);\r\n\r\n  const enableWebhook = async (body: UpdateWebhook.Request['body'] & UpdateWebhook.Params) => {\r\n    try {\r\n      const res = await updateWebhook(body);\r\n\r\n      if ('error' in res) {\r\n        toggleNotification({\r\n          type: 'danger',\r\n          message: formatAPIError(res.error),\r\n        });\r\n      }\r\n    } catch {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatMessage({\r\n          id: 'notification.error',\r\n          defaultMessage: 'An error occurred',\r\n        }),\r\n      });\r\n    }\r\n  };\r\n\r\n  const deleteWebhook = async (id: string) => {\r\n    try {\r\n      const res = await deleteManyWebhooks({\r\n        ids: [id],\r\n      });\r\n\r\n      if ('error' in res) {\r\n        toggleNotification({\r\n          type: 'danger',\r\n          message: formatAPIError(res.error),\r\n        });\r\n\r\n        return;\r\n      }\r\n\r\n      setWebhooksToDelete((prev) => prev.filter((webhookId) => webhookId !== id));\r\n    } catch {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatMessage({\r\n          id: 'notification.error',\r\n          defaultMessage: 'An error occurred',\r\n        }),\r\n      });\r\n    }\r\n  };\r\n\r\n  const confirmBulkDelete = async () => {\r\n    try {\r\n      const res = await deleteManyWebhooks({\r\n        ids: webhooksToDelete,\r\n      });\r\n\r\n      if ('error' in res) {\r\n        toggleNotification({\r\n          type: 'danger',\r\n          message: formatAPIError(res.error),\r\n        });\r\n\r\n        return;\r\n      }\r\n\r\n      setWebhooksToDelete([]);\r\n    } catch {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatMessage({\r\n          id: 'notification.error',\r\n          defaultMessage: 'An error occurred',\r\n        }),\r\n      });\r\n    } finally {\r\n      setShowModal(false);\r\n    }\r\n  };\r\n\r\n  const selectAllCheckbox = (selected: boolean) =>\r\n    selected\r\n      ? setWebhooksToDelete(webhooks?.map((webhook) => webhook.id) ?? [])\r\n      : setWebhooksToDelete([]);\r\n\r\n  const selectOneCheckbox = (selected: boolean, id: string) =>\r\n    selected\r\n      ? setWebhooksToDelete((prev) => [...prev, id])\r\n      : setWebhooksToDelete((prev) => prev.filter((webhookId) => webhookId !== id));\r\n\r\n  const isLoading = isRBACLoading || isWebhooksLoading;\r\n  const numberOfWebhooks = webhooks?.length ?? 0;\r\n  const webhooksToDeleteLength = webhooksToDelete.length;\r\n\r\n  if (isLoading) {\r\n    return <Page.Loading />;\r\n  }\r\n\r\n  return (\r\n    <Layouts.Root>\r\n      <Page.Title>\r\n        {formatMessage(\r\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\r\n          {\r\n            name: 'Webhooks',\r\n          }\r\n        )}\r\n      </Page.Title>\r\n      <Page.Main aria-busy={isLoading}>\r\n        <Layouts.Header\r\n          title={formatMessage({ id: 'Settings.webhooks.title', defaultMessage: 'Webhooks' })}\r\n          subtitle={formatMessage({\r\n            id: 'Settings.webhooks.list.description',\r\n            defaultMessage: 'Get POST changes notifications',\r\n          })}\r\n          primaryAction={\r\n            canCreate &&\r\n            !isLoading && (\r\n              <LinkButton tag={NavLink} startIcon={<Plus />} variant=\"default\" to=\"create\" size=\"S\">\r\n                {formatMessage({\r\n                  id: 'Settings.webhooks.list.button.add',\r\n                  defaultMessage: 'Create new webhook',\r\n                })}\r\n              </LinkButton>\r\n            )\r\n          }\r\n        />\r\n        {webhooksToDeleteLength > 0 && canDelete && (\r\n          <Layouts.Action\r\n            startActions={\r\n              <>\r\n                <Typography variant=\"epsilon\" textColor=\"neutral600\">\r\n                  {formatMessage(\r\n                    {\r\n                      id: 'Settings.webhooks.to.delete',\r\n                      defaultMessage:\r\n                        '{webhooksToDeleteLength, plural, one {# webhook} other {# webhooks}} selected',\r\n                    },\r\n                    { webhooksToDeleteLength }\r\n                  )}\r\n                </Typography>\r\n                <Button\r\n                  onClick={() => setShowModal(true)}\r\n                  startIcon={<Trash />}\r\n                  size=\"L\"\r\n                  variant=\"danger-light\"\r\n                >\r\n                  {formatMessage({\r\n                    id: 'global.delete',\r\n                    defaultMessage: 'Delete',\r\n                  })}\r\n                </Button>\r\n              </>\r\n            }\r\n          />\r\n        )}\r\n        <Layouts.Content>\r\n          {numberOfWebhooks > 0 ? (\r\n            <Table\r\n              colCount={5}\r\n              rowCount={numberOfWebhooks + 1}\r\n              footer={\r\n                <TFooter\r\n                  onClick={() => {\r\n                    if (canCreate) {\r\n                      navigate('create');\r\n                    }\r\n                  }}\r\n                  icon={<Plus />}\r\n                >\r\n                  {formatMessage({\r\n                    id: 'Settings.webhooks.list.button.add',\r\n                    defaultMessage: 'Create new webhook',\r\n                  })}\r\n                </TFooter>\r\n              }\r\n            >\r\n              <Thead>\r\n                <Tr>\r\n                  <Th>\r\n                    <Checkbox\r\n                      aria-label={formatMessage({\r\n                        id: 'global.select-all-entries',\r\n                        defaultMessage: 'Select all entries',\r\n                      })}\r\n                      checked={\r\n                        webhooksToDeleteLength > 0 && webhooksToDeleteLength < numberOfWebhooks\r\n                          ? 'indeterminate'\r\n                          : webhooksToDeleteLength === numberOfWebhooks\r\n                      }\r\n                      onCheckedChange={selectAllCheckbox}\r\n                    />\r\n                  </Th>\r\n                  <Th width=\"20%\">\r\n                    <Typography variant=\"sigma\" textColor=\"neutral600\">\r\n                      {formatMessage({\r\n                        id: 'global.name',\r\n                        defaultMessage: 'Name',\r\n                      })}\r\n                    </Typography>\r\n                  </Th>\r\n                  <Th width=\"60%\">\r\n                    <Typography variant=\"sigma\" textColor=\"neutral600\">\r\n                      {formatMessage({\r\n                        id: 'Settings.webhooks.form.url',\r\n                        defaultMessage: 'URL',\r\n                      })}\r\n                    </Typography>\r\n                  </Th>\r\n                  <Th width=\"20%\">\r\n                    <Typography variant=\"sigma\" textColor=\"neutral600\">\r\n                      {formatMessage({\r\n                        id: 'Settings.webhooks.list.th.status',\r\n                        defaultMessage: 'Status',\r\n                      })}\r\n                    </Typography>\r\n                  </Th>\r\n                  <Th>\r\n                    <VisuallyHidden>\r\n                      {formatMessage({\r\n                        id: 'Settings.webhooks.list.th.actions',\r\n                        defaultMessage: 'Actions',\r\n                      })}\r\n                    </VisuallyHidden>\r\n                  </Th>\r\n                </Tr>\r\n              </Thead>\r\n              <Tbody>\r\n                {webhooks?.map((webhook) => (\r\n                  <Tr\r\n                    key={webhook.id}\r\n                    onClick={() => {\r\n                      if (canUpdate) {\r\n                        navigate(webhook.id);\r\n                      }\r\n                    }}\r\n                    style={{ cursor: canUpdate ? 'pointer' : 'default' }}\r\n                  >\r\n                    <Td onClick={(e) => e.stopPropagation()}>\r\n                      <Checkbox\r\n                        aria-label={`${formatMessage({\r\n                          id: 'global.select',\r\n                          defaultMessage: 'Select',\r\n                        })} ${webhook.name}`}\r\n                        checked={webhooksToDelete?.includes(webhook.id)}\r\n                        onCheckedChange={(selected) => selectOneCheckbox(!!selected, webhook.id)}\r\n                        name=\"select\"\r\n                      />\r\n                    </Td>\r\n                    <Td>\r\n                      <Typography fontWeight=\"semiBold\" textColor=\"neutral800\">\r\n                        {webhook.name}\r\n                      </Typography>\r\n                    </Td>\r\n                    <Td>\r\n                      <Typography textColor=\"neutral800\">{webhook.url}</Typography>\r\n                    </Td>\r\n                    <Td onClick={(e) => e.stopPropagation()}>\r\n                      <Flex>\r\n                        <Switch\r\n                          onLabel={formatMessage({\r\n                            id: 'global.enabled',\r\n                            defaultMessage: 'Enabled',\r\n                          })}\r\n                          offLabel={formatMessage({\r\n                            id: 'global.disabled',\r\n                            defaultMessage: 'Disabled',\r\n                          })}\r\n                          aria-label={`${webhook.name} ${formatMessage({\r\n                            id: 'Settings.webhooks.list.th.status',\r\n                            defaultMessage: 'Status',\r\n                          })}`}\r\n                          checked={webhook.isEnabled}\r\n                          onCheckedChange={(enabled) => {\r\n                            enableWebhook({\r\n                              ...webhook,\r\n                              isEnabled: enabled,\r\n                            });\r\n                          }}\r\n                          visibleLabels\r\n                        />\r\n                      </Flex>\r\n                    </Td>\r\n                    <Td>\r\n                      <Flex gap={1}>\r\n                        {canUpdate && (\r\n                          <IconButton\r\n                            label={formatMessage({\r\n                              id: 'Settings.webhooks.events.update',\r\n                              defaultMessage: 'Update',\r\n                            })}\r\n                            variant=\"ghost\"\r\n                          >\r\n                            <Pencil />\r\n                          </IconButton>\r\n                        )}\r\n                        {canDelete && (\r\n                          <DeleteActionButton\r\n                            onDelete={() => {\r\n                              deleteWebhook(webhook.id);\r\n                            }}\r\n                          />\r\n                        )}\r\n                      </Flex>\r\n                    </Td>\r\n                  </Tr>\r\n                ))}\r\n              </Tbody>\r\n            </Table>\r\n          ) : (\r\n            <EmptyStateLayout\r\n              icon={<EmptyDocuments width=\"160px\" />}\r\n              content={formatMessage({\r\n                id: 'Settings.webhooks.list.empty.description',\r\n                defaultMessage: 'No webhooks found',\r\n              })}\r\n              action={\r\n                canCreate ? (\r\n                  <LinkButton variant=\"secondary\" startIcon={<Plus />} tag={NavLink} to=\"create\">\r\n                    {formatMessage({\r\n                      id: 'Settings.webhooks.list.button.add',\r\n                      defaultMessage: 'Create new webhook',\r\n                    })}\r\n                  </LinkButton>\r\n                ) : null\r\n              }\r\n            />\r\n          )}\r\n        </Layouts.Content>\r\n      </Page.Main>\r\n      <Dialog.Root open={showModal} onOpenChange={setShowModal}>\r\n        <ConfirmDialog onConfirm={confirmBulkDelete} />\r\n      </Dialog.Root>\r\n    </Layouts.Root>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * DeleteActionButton\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ntype DeleteActionButtonProps = {\r\n  onDelete: () => void;\r\n};\r\n\r\nconst DeleteActionButton = ({ onDelete }: DeleteActionButtonProps) => {\r\n  const [showModal, setShowModal] = React.useState(false);\r\n  const { formatMessage } = useIntl();\r\n\r\n  return (\r\n    <>\r\n      <IconButton\r\n        onClick={(e) => {\r\n          e.stopPropagation();\r\n          setShowModal(true);\r\n        }}\r\n        label={formatMessage({\r\n          id: 'Settings.webhooks.events.delete',\r\n          defaultMessage: 'Delete webhook',\r\n        })}\r\n        variant=\"ghost\"\r\n      >\r\n        <Trash />\r\n      </IconButton>\r\n\r\n      <Dialog.Root open={showModal} onOpenChange={setShowModal}>\r\n        <ConfirmDialog\r\n          onConfirm={(e) => {\r\n            e?.stopPropagation();\r\n            onDelete();\r\n          }}\r\n        />\r\n      </Dialog.Root>\r\n    </>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ProtectedListView\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst ProtectedListPage = () => {\r\n  const permissions = useTypedSelector(\r\n    (state) => state.admin_app.permissions.settings?.webhooks.main\r\n  );\r\n\r\n  return (\r\n    <Page.Protect permissions={permissions}>\r\n      <ListPage />\r\n    </Page.Protect>\r\n  );\r\n};\r\n\r\nexport { ListPage, ProtectedListPage };\r\n"],
  "mappings": "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",
  "names": []
}
