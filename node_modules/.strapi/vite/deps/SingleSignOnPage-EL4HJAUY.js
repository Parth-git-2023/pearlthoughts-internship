import {
  useAdminRoles
} from "./chunk-J72EEJVE.js";
import {
  GradientBadgeWithIcon
} from "./chunk-XXRLJZ2Z.js";
import {
  MemoizedInputRenderer
} from "./chunk-5TWNRMNB.js";
import {
  Form,
  useField
} from "./chunk-ZRXSF5PI.js";
import {
  useRBAC
} from "./chunk-PJGZMO5F.js";
import {
  errorsTrads
} from "./chunk-X5YFDRMS.js";
import "./chunk-LVVND4TK.js";
import {
  Layouts
} from "./chunk-O6JJIRK6.js";
import "./chunk-54PZNGL6.js";
import {
  Page,
  useAPIErrorHandler
} from "./chunk-OUTHPJ5W.js";
import {
  useGetProviderOptionsQuery,
  useUpdateProviderOptionsMutation
} from "./chunk-YQN4TQZU.js";
import {
  useTypedSelector
} from "./chunk-ITUTZMO4.js";
import {
  useNotification
} from "./chunk-S4GSJQUH.js";
import {
  isBaseQueryError
} from "./chunk-3CYOA7RQ.js";
import "./chunk-3Y3HZKRY.js";
import "./chunk-PR5W4YOM.js";
import "./chunk-QOSJGLB6.js";
import {
  create2 as create,
  create3 as create2,
  create7 as create3,
  create8 as create4
} from "./chunk-WA6BWN3W.js";
import "./chunk-UCDGERJK.js";
import "./chunk-I7675365.js";
import "./chunk-6XMPWYL4.js";
import "./chunk-XNLL4XTY.js";
import "./chunk-VJHHRLHY.js";
import "./chunk-HWWDZF4D.js";
import "./chunk-Z7WXACEM.js";
import "./chunk-PZKJYQOP.js";
import "./chunk-KTCYCI5X.js";
import "./chunk-4S6CO3NF.js";
import "./chunk-WZMMABOO.js";
import "./chunk-KU6R7J3L.js";
import "./chunk-ALOZZQWE.js";
import "./chunk-3XH2Q2B6.js";
import "./chunk-SM5ZDAVK.js";
import "./chunk-AAOWBC4P.js";
import "./chunk-AVUVASSG.js";
import "./chunk-DEZRKVMG.js";
import "./chunk-LDTLLP4K.js";
import "./chunk-CFOYKXNH.js";
import "./chunk-DWNGFC4T.js";
import "./chunk-SKI2TI5D.js";
import "./chunk-ZGAXZ2TY.js";
import "./chunk-6EUDYBNR.js";
import "./chunk-3KMG3VFU.js";
import "./chunk-UTVXCYRG.js";
import {
  Button,
  Field,
  Flex,
  Grid,
  MultiSelect,
  MultiSelectOption,
  Typography
} from "./chunk-3AUSDG4O.js";
import {
  ForwardRef$4N
} from "./chunk-F5I3ZVMF.js";
import "./chunk-FJZ2NJT6.js";
import "./chunk-VH7UJDNP.js";
import "./chunk-HG4QJCZT.js";
import "./chunk-I7DIJEXN.js";
import {
  useIntl
} from "./chunk-2BDXRWHF.js";
import "./chunk-SBRVGDJ6.js";
import "./chunk-YUZK7WZ2.js";
import "./chunk-NSR7OH4Q.js";
import "./chunk-ZCDXR5JO.js";
import "./chunk-47RN6QNY.js";
import "./chunk-IMHIZKPC.js";
import "./chunk-URNLJJFR.js";
import "./chunk-JHXWLAQ5.js";
import "./chunk-PWXBRFBA.js";
import "./chunk-MZAWSZWW.js";
import "./chunk-QIQU42WJ.js";
import "./chunk-XVBZSUZI.js";
import "./chunk-2NWCSGSS.js";
import {
  require_jsx_runtime
} from "./chunk-GAPF2DTI.js";
import "./chunk-2ZN62OJX.js";
import "./chunk-IV5CMKTD.js";
import "./chunk-ENGB2K3X.js";
import "./chunk-ISIKDMAB.js";
import "./chunk-X5DDYWPV.js";
import "./chunk-TUHVKLNT.js";
import "./chunk-3POB64WN.js";
import "./chunk-63YMLYWU.js";
import "./chunk-YIY4KI6G.js";
import "./chunk-7CLWPW6Q.js";
import "./chunk-IVGYXB4P.js";
import "./chunk-H3WCXLKE.js";
import "./chunk-NDGNZ36Q.js";
import "./chunk-MNGCFISN.js";
import {
  __toESM
} from "./chunk-X6GFWOGJ.js";

// ../packages/core/admin/ee/admin/src/pages/SettingsPage/pages/SingleSignOnPage.tsx
var import_jsx_runtime = __toESM(require_jsx_runtime());
var SCHEMA = create3().shape({
  autoRegister: create2().required(errorsTrads.required),
  defaultRole: create().when("autoRegister", (value, initSchema) => {
    return value ? initSchema.required(errorsTrads.required) : initSchema.nullable();
  }),
  ssoLockedRoles: create4().nullable().of(
    create().when("ssoLockedRoles", (value, initSchema) => {
      return value ? initSchema.required(errorsTrads.required) : initSchema.nullable();
    })
  )
});
var SingleSignOnPage = () => {
  var _a, _b;
  const { formatMessage } = useIntl();
  const permissions = useTypedSelector((state) => state.admin_app.permissions);
  const { toggleNotification } = useNotification();
  const {
    _unstableFormatAPIError: formatAPIError,
    _unstableFormatValidationErrors: formatValidationErrors
  } = useAPIErrorHandler();
  const { isLoading: isLoadingProviderOptions, data } = useGetProviderOptionsQuery();
  const [updateProviderOptions, { isLoading: isSubmittingForm }] = useUpdateProviderOptionsMutation();
  const {
    isLoading: isLoadingPermissions,
    allowedActions: { canUpdate, canRead: canReadRoles }
  } = useRBAC({
    ...(_a = permissions.settings) == null ? void 0 : _a.sso,
    readRoles: ((_b = permissions.settings) == null ? void 0 : _b.roles.read) ?? []
  });
  const { roles, isLoading: isLoadingRoles } = useAdminRoles(void 0, {
    skip: !canReadRoles
  });
  const handleSubmit = async (body, helpers) => {
    try {
      const res = await updateProviderOptions(body);
      if ("error" in res) {
        if (isBaseQueryError(res.error) && res.error.name === "ValidationError") {
          helpers.setErrors(formatValidationErrors(res.error));
        } else {
          toggleNotification({
            type: "danger",
            message: formatAPIError(res.error)
          });
        }
        return;
      }
      toggleNotification({
        type: "success",
        message: formatMessage({ id: "notification.success.saved" })
      });
    } catch (err) {
      toggleNotification({
        type: "danger",
        message: formatMessage({
          id: "notification.error",
          defaultMessage: "An error occurred, please try again."
        })
      });
    }
  };
  const isLoadingData = isLoadingRoles || isLoadingPermissions || isLoadingProviderOptions;
  return (0, import_jsx_runtime.jsxs)(Layouts.Root, { children: [
    (0, import_jsx_runtime.jsx)(Page.Title, { children: formatMessage(
      { id: "Settings.PageTitle", defaultMessage: "Settings - {name}" },
      {
        name: "SSO"
      }
    ) }),
    (0, import_jsx_runtime.jsx)(Page.Main, { "aria-busy": isSubmittingForm || isLoadingData, tabIndex: -1, children: (0, import_jsx_runtime.jsx)(
      Form,
      {
        method: "PUT",
        onSubmit: handleSubmit,
        validationSchema: SCHEMA,
        disabled: !canUpdate,
        initialValues: data || {
          autoRegister: false,
          defaultRole: null,
          ssoLockedRoles: null
        },
        children: ({ modified, isSubmitting }) => (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
          (0, import_jsx_runtime.jsx)(
            Layouts.Header,
            {
              primaryAction: (0, import_jsx_runtime.jsx)(
                Button,
                {
                  disabled: !modified,
                  loading: isSubmitting,
                  startIcon: (0, import_jsx_runtime.jsx)(ForwardRef$4N, {}),
                  type: "submit",
                  children: formatMessage({
                    id: "global.save",
                    defaultMessage: "Save"
                  })
                }
              ),
              title: formatMessage({
                id: "Settings.sso.title",
                defaultMessage: "Single Sign-On"
              }),
              subtitle: formatMessage({
                id: "Settings.sso.description",
                defaultMessage: "Configure the settings for the Single Sign-On feature."
              }),
              secondaryAction: (0, import_jsx_runtime.jsx)(
                GradientBadgeWithIcon,
                {
                  label: formatMessage({
                    id: "components.premiumFeature.title",
                    defaultMessage: "Premium feature"
                  })
                }
              )
            }
          ),
          (0, import_jsx_runtime.jsx)(Layouts.Content, { children: isSubmitting || isLoadingData ? (0, import_jsx_runtime.jsx)(Page.Loading, {}) : (0, import_jsx_runtime.jsxs)(
            Flex,
            {
              direction: "column",
              alignItems: "stretch",
              gap: 4,
              background: "neutral0",
              padding: 6,
              shadow: "filterShadow",
              hasRadius: true,
              children: [
                (0, import_jsx_runtime.jsx)(Typography, { variant: "delta", tag: "h2", children: formatMessage({
                  id: "global.settings",
                  defaultMessage: "Settings"
                }) }),
                (0, import_jsx_runtime.jsx)(Grid.Root, { gap: 4, children: [
                  {
                    hint: formatMessage({
                      id: "Settings.sso.form.registration.description",
                      defaultMessage: "Create new user on SSO login if no account exists"
                    }),
                    label: formatMessage({
                      id: "Settings.sso.form.registration.label",
                      defaultMessage: "Auto-registration"
                    }),
                    name: "autoRegister",
                    size: 6,
                    type: "boolean"
                  },
                  {
                    hint: formatMessage({
                      id: "Settings.sso.form.defaultRole.description",
                      defaultMessage: "It will attach the new authenticated user to the selected role"
                    }),
                    label: formatMessage({
                      id: "Settings.sso.form.defaultRole.label",
                      defaultMessage: "Default role"
                    }),
                    name: "defaultRole",
                    options: roles.map(({ id, name }) => ({
                      label: name,
                      value: id.toString()
                    })),
                    placeholder: formatMessage({
                      id: "components.InputSelect.option.placeholder",
                      defaultMessage: "Choose here"
                    }),
                    size: 6,
                    type: "enumeration"
                  },
                  {
                    hint: formatMessage({
                      id: "Settings.sso.form.localAuthenticationLock.description",
                      defaultMessage: "Select the roles for which you want to disable the local authentication"
                    }),
                    label: formatMessage({
                      id: "Settings.sso.form.localAuthenticationLock.label",
                      defaultMessage: "Local authentication lock-out"
                    }),
                    name: "ssoLockedRoles",
                    options: roles.map(({ id, name }) => ({
                      label: name,
                      value: id.toString()
                    })),
                    placeholder: formatMessage({
                      id: "components.InputSelect.option.placeholder",
                      defaultMessage: "Choose here"
                    }),
                    size: 6,
                    type: "multi"
                  }
                ].map(({ size, ...field }) => (0, import_jsx_runtime.jsx)(
                  Grid.Item,
                  {
                    col: size,
                    direction: "column",
                    alignItems: "stretch",
                    children: (0, import_jsx_runtime.jsx)(FormInputRenderer, { ...field })
                  },
                  field.name
                )) })
              ]
            }
          ) })
        ] })
      }
    ) })
  ] });
};
var FormInputRenderer = (props) => {
  switch (props.type) {
    case "multi":
      return (0, import_jsx_runtime.jsx)(MultiSelectInput, { ...props });
    default:
      return (0, import_jsx_runtime.jsx)(MemoizedInputRenderer, { ...props });
  }
};
var MultiSelectInput = ({ hint, label, name, options, ...props }) => {
  const field = useField(name);
  return (0, import_jsx_runtime.jsxs)(Field.Root, { name, hint, error: field.error, children: [
    (0, import_jsx_runtime.jsx)(Field.Label, { children: label }),
    (0, import_jsx_runtime.jsx)(
      MultiSelect,
      {
        onChange: (value) => field.onChange("ssoLockedRoles", value),
        onClear: () => field.onChange("ssoLockedRoles", []),
        value: field.value ?? [],
        withTags: true,
        ...props,
        children: options.map(({ label: label2, value }) => (0, import_jsx_runtime.jsx)(MultiSelectOption, { value, children: label2 }, value))
      }
    ),
    (0, import_jsx_runtime.jsx)(Field.Hint, {}),
    (0, import_jsx_runtime.jsx)(Field.Error, {})
  ] });
};
var ProtectedSSO = () => {
  const permissions = useTypedSelector((state) => {
    var _a, _b;
    return (_b = (_a = state.admin_app.permissions.settings) == null ? void 0 : _a.sso) == null ? void 0 : _b.main;
  });
  return (0, import_jsx_runtime.jsx)(Page.Protect, { permissions, children: (0, import_jsx_runtime.jsx)(SingleSignOnPage, {}) });
};
export {
  ProtectedSSO,
  SingleSignOnPage
};
//# sourceMappingURL=SingleSignOnPage-EL4HJAUY.js.map
