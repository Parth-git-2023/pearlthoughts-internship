{
  "version": 3,
  "sources": ["../../../../../packages/core/content-manager/admin/src/components/RelativeTime.tsx", "../../../../../packages/core/content-manager/admin/src/pages/EditView/components/DocumentStatus.tsx"],
  "sourcesContent": ["import * as React from 'react';\r\n\r\nimport { Duration, intervalToDuration, isPast } from 'date-fns';\r\nimport { useIntl } from 'react-intl';\r\n\r\nconst intervals: Array<keyof Duration> = ['years', 'months', 'days', 'hours', 'minutes', 'seconds'];\r\n\r\ninterface CustomInterval {\r\n  unit: keyof Duration;\r\n  text: string;\r\n  threshold: number;\r\n}\r\n\r\ninterface RelativeTimeProps extends React.ComponentPropsWithoutRef<'time'> {\r\n  timestamp: Date;\r\n  customIntervals?: CustomInterval[];\r\n}\r\n\r\n/**\r\n * Displays the relative time between a given timestamp and the current time.\r\n * You can display a custom message for given time intervals by passing an array of custom intervals.\r\n *\r\n * @example\r\n * ```jsx\r\n * <caption>Display \"last hour\" if the timestamp is less than an hour ago</caption>\r\n * <RelativeTime\r\n *  timestamp={new Date('2021-01-01')}\r\n *  customIntervals={[\r\n *   { unit: 'hours', threshold: 1, text: 'last hour' },\r\n *  ]}\r\n * ```\r\n */\r\nconst RelativeTime = React.forwardRef<HTMLTimeElement, RelativeTimeProps>(\r\n  ({ timestamp, customIntervals = [], ...restProps }, forwardedRef) => {\r\n    const { formatRelativeTime, formatDate, formatTime } = useIntl();\r\n\r\n    /**\r\n     * TODO: make this auto-update, like a clock.\r\n     */\r\n    const interval = intervalToDuration({\r\n      start: timestamp,\r\n      end: Date.now(),\r\n      // see https://github.com/date-fns/date-fns/issues/2891 â€“ No idea why it's all partial it returns it every time.\r\n    }) as Required<Duration>;\r\n\r\n    const unit =\r\n      intervals.find((intervalUnit) => {\r\n        return interval[intervalUnit] > 0 && Object.keys(interval).includes(intervalUnit);\r\n      }) ?? 'seconds';\r\n\r\n    const relativeTime = isPast(timestamp) ? -interval[unit] : interval[unit];\r\n\r\n    // Display custom text if interval is less than the threshold\r\n    const customInterval = customIntervals.find(\r\n      (custom) => interval[custom.unit] < custom.threshold\r\n    );\r\n\r\n    const displayText = customInterval\r\n      ? customInterval.text\r\n      : formatRelativeTime(relativeTime, unit, { numeric: 'auto' });\r\n\r\n    return (\r\n      <time\r\n        ref={forwardedRef}\r\n        dateTime={timestamp.toISOString()}\r\n        role=\"time\"\r\n        title={`${formatDate(timestamp)} ${formatTime(timestamp)}`}\r\n        {...restProps}\r\n      >\r\n        {displayText}\r\n      </time>\r\n    );\r\n  }\r\n);\r\n\r\nexport { RelativeTime };\r\nexport type { CustomInterval, RelativeTimeProps };\r\n", "import { Status, StatusProps, Typography } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { capitalise } from '../../../utils/strings';\r\n\r\ninterface DocumentStatusProps extends Omit<StatusProps, 'children' | 'variant'> {\r\n  /**\r\n   * The status of the document (draft, published, etc.)\r\n   * @default 'draft'\r\n   */\r\n  status?: string;\r\n}\r\n\r\n/**\r\n * @public\r\n * @description Displays the status of a document (draft, published, etc.)\r\n * and automatically calculates the appropriate variant for the status.\r\n */\r\nconst DocumentStatus = ({ status = 'draft', size = 'S', ...restProps }: DocumentStatusProps) => {\r\n  const statusVariant =\r\n    status === 'draft' ? 'secondary' : status === 'published' ? 'success' : 'alternative';\r\n\r\n  const { formatMessage } = useIntl();\r\n\r\n  return (\r\n    <Status {...restProps} size={size} variant={statusVariant} role=\"status\" aria-label={status}>\r\n      <Typography tag=\"span\" variant=\"omega\" fontWeight=\"bold\">\r\n        {formatMessage({\r\n          id: `content-manager.containers.List.${status}`,\r\n          defaultMessage: capitalise(status),\r\n        })}\r\n      </Typography>\r\n    </Status>\r\n  );\r\n};\r\n\r\nexport { DocumentStatus };\r\nexport type { DocumentStatusProps };\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,YAAuB;AA8DjB;AAzDN,IAAM,YAAmC,CAAC,SAAS,UAAU,QAAQ,SAAS,WAAW,SAAS;AA2BlG,IAAM,eAAqB;AAAA,EACzB,CAAC,EAAE,WAAW,kBAAkB,CAAC,GAAG,GAAG,UAAU,GAAG,iBAAiB;AACnE,UAAM,EAAE,oBAAoB,YAAY,WAAW,IAAI,QAAQ;AAK/D,UAAM,WAAW,mBAAmB;AAAA,MAClC,OAAO;AAAA,MACP,KAAK,KAAK,IAAI;AAAA;AAAA,IAEhB,CAAC;AAED,UAAM,OACJ,UAAU,KAAK,CAAC,iBAAiB;AAC/B,aAAO,SAAS,YAAY,IAAI,KAAK,OAAO,KAAK,QAAQ,EAAE,SAAS,YAAY;AAAA,IAClF,CAAC,KAAK;AAER,UAAM,eAAe,OAAO,SAAS,IAAI,CAAC,SAAS,IAAI,IAAI,SAAS,IAAI;AAGxE,UAAM,iBAAiB,gBAAgB;AAAA,MACrC,CAAC,WAAW,SAAS,OAAO,IAAI,IAAI,OAAO;AAAA,IAC7C;AAEA,UAAM,cAAc,iBAChB,eAAe,OACf,mBAAmB,cAAc,MAAM,EAAE,SAAS,OAAO,CAAC;AAE9D,eACE;AAAA,MAAC;AAAA;AAAA,QACC,KAAK;AAAA,QACL,UAAU,UAAU,YAAY;AAAA,QAChC,MAAK;AAAA,QACL,OAAO,GAAG,WAAW,SAAS,CAAC,IAAI,WAAW,SAAS,CAAC;AAAA,QACvD,GAAG;AAAA,QAEH;AAAA;AAAA,IACH;AAAA,EAEJ;AACF;;;AC/CM,IAAAA,sBAAA;AARN,IAAM,iBAAiB,CAAC,EAAE,SAAS,SAAS,OAAO,KAAK,GAAG,UAAU,MAA2B;AAC9F,QAAM,gBACJ,WAAW,UAAU,cAAc,WAAW,cAAc,YAAY;AAE1E,QAAM,EAAE,cAAc,IAAI,QAAQ;AAElC,aACE,yBAAC,UAAQ,GAAG,WAAW,MAAY,SAAS,eAAe,MAAK,UAAS,cAAY,QACnF,uCAAC,cAAW,KAAI,QAAO,SAAQ,SAAQ,YAAW,QAC/C,wBAAc;AAAA,IACb,IAAI,mCAAmC,MAAM;AAAA,IAC7C,gBAAgB,WAAW,MAAM;AAAA,EACnC,CAAC,GACH,GACF;AAEJ;",
  "names": ["import_jsx_runtime"]
}
