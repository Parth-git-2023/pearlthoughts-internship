{
  "version": 3,
  "sources": ["../../../../../packages/core/admin/admin/src/pages/Auth/components/Login.tsx"],
  "sourcesContent": ["import * as React from 'react';\r\n\r\nimport { Box, Button, Flex, Main, Typography, Link } from '@strapi/design-system';\r\nimport camelCase from 'lodash/camelCase';\r\nimport { useIntl } from 'react-intl';\r\nimport { NavLink, useLocation, useNavigate } from 'react-router-dom';\r\nimport * as yup from 'yup';\r\n\r\nimport { Form } from '../../../components/Form';\r\nimport { InputRenderer } from '../../../components/FormInputs/Renderer';\r\nimport { Logo } from '../../../components/UnauthenticatedLogo';\r\nimport { useAuth } from '../../../features/Auth';\r\nimport {\r\n  UnauthenticatedLayout,\r\n  Column,\r\n  LayoutContent,\r\n} from '../../../layouts/UnauthenticatedLayout';\r\nimport { translatedErrors } from '../../../utils/translatedErrors';\r\n\r\nimport type { Login } from '../../../../../shared/contracts/authentication';\r\n\r\ninterface LoginProps {\r\n  children?: React.ReactNode;\r\n}\r\n\r\nconst LOGIN_SCHEMA = yup.object().shape({\r\n  email: yup\r\n    .string()\r\n    .nullable()\r\n    .email({\r\n      id: translatedErrors.email.id,\r\n      defaultMessage: 'Not a valid email',\r\n    })\r\n    .required(translatedErrors.required),\r\n  password: yup.string().required(translatedErrors.required).nullable(),\r\n  rememberMe: yup.bool().nullable(),\r\n});\r\n\r\nconst Login = ({ children }: LoginProps) => {\r\n  const [apiError, setApiError] = React.useState<string>();\r\n  const { formatMessage } = useIntl();\r\n  const { search: searchString } = useLocation();\r\n  const query = React.useMemo(() => new URLSearchParams(searchString), [searchString]);\r\n  const navigate = useNavigate();\r\n\r\n  const { login } = useAuth('Login', (auth) => auth);\r\n\r\n  const handleLogin = async (body: Parameters<typeof login>[0]) => {\r\n    setApiError(undefined);\r\n\r\n    const res = await login(body);\r\n\r\n    if ('error' in res) {\r\n      const message = res.error.message ?? 'Something went wrong';\r\n\r\n      if (camelCase(message).toLowerCase() === 'usernotactive') {\r\n        navigate('/auth/oops');\r\n        return;\r\n      }\r\n\r\n      setApiError(message);\r\n    } else {\r\n      const redirectTo = query.get('redirectTo');\r\n      const redirectUrl = redirectTo ? decodeURIComponent(redirectTo) : '/';\r\n\r\n      navigate(redirectUrl);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <UnauthenticatedLayout>\r\n      <Main>\r\n        <LayoutContent>\r\n          <Column>\r\n            <Logo />\r\n            <Box paddingTop={6} paddingBottom={1}>\r\n              <Typography variant=\"alpha\" tag=\"h1\">\r\n                {formatMessage({\r\n                  id: 'Auth.form.welcome.title',\r\n                  defaultMessage: 'Welcome!',\r\n                })}\r\n              </Typography>\r\n            </Box>\r\n            <Box paddingBottom={7}>\r\n              <Typography variant=\"epsilon\" textColor=\"neutral600\">\r\n                {formatMessage({\r\n                  id: 'Auth.form.welcome.subtitle',\r\n                  defaultMessage: 'Log in to your Strapi account',\r\n                })}\r\n              </Typography>\r\n            </Box>\r\n            {apiError ? (\r\n              <Typography id=\"global-form-error\" role=\"alert\" tabIndex={-1} textColor=\"danger600\">\r\n                {apiError}\r\n              </Typography>\r\n            ) : null}\r\n          </Column>\r\n          <Form\r\n            method=\"PUT\"\r\n            initialValues={{\r\n              email: '',\r\n              password: '',\r\n              rememberMe: false,\r\n            }}\r\n            onSubmit={(values) => {\r\n              handleLogin(values);\r\n            }}\r\n            validationSchema={LOGIN_SCHEMA}\r\n          >\r\n            <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\r\n              {[\r\n                {\r\n                  label: formatMessage({ id: 'Auth.form.email.label', defaultMessage: 'Email' }),\r\n                  name: 'email',\r\n                  placeholder: formatMessage({\r\n                    id: 'Auth.form.email.placeholder',\r\n                    defaultMessage: 'kai@doe.com',\r\n                  }),\r\n                  required: true,\r\n                  type: 'string' as const,\r\n                },\r\n                {\r\n                  label: formatMessage({\r\n                    id: 'global.password',\r\n                    defaultMessage: 'Password',\r\n                  }),\r\n                  name: 'password',\r\n                  required: true,\r\n                  type: 'password' as const,\r\n                },\r\n                {\r\n                  label: formatMessage({\r\n                    id: 'Auth.form.rememberMe.label',\r\n                    defaultMessage: 'Remember me',\r\n                  }),\r\n                  name: 'rememberMe',\r\n                  type: 'checkbox' as const,\r\n                },\r\n              ].map((field) => (\r\n                <InputRenderer key={field.name} {...field} />\r\n              ))}\r\n              <Button fullWidth type=\"submit\">\r\n                {formatMessage({ id: 'Auth.form.button.login', defaultMessage: 'Login' })}\r\n              </Button>\r\n            </Flex>\r\n          </Form>\r\n          {children}\r\n        </LayoutContent>\r\n        <Flex justifyContent=\"center\">\r\n          <Box paddingTop={4}>\r\n            <Link isExternal={false} tag={NavLink} to=\"/auth/forgot-password\">\r\n              {formatMessage({\r\n                id: 'Auth.link.forgot-password',\r\n                defaultMessage: 'Forgot your password?',\r\n              })}\r\n            </Link>\r\n          </Box>\r\n        </Flex>\r\n      </Main>\r\n    </UnauthenticatedLayout>\r\n  );\r\n};\r\n\r\nexport { Login };\r\nexport type { LoginProps };\r\n"],
  "mappings": "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",
  "names": ["create", "camelCase"]
}
