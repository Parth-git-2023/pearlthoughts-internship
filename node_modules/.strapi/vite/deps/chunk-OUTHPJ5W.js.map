{
  "version": 3,
  "sources": ["../../../../../packages/core/admin/admin/src/hooks/useAPIErrorHandler.ts", "../../../../../packages/core/admin/admin/src/utils/getPrefixedId.ts", "../../../../../packages/core/admin/admin/src/utils/normalizeAPIError.ts", "../../../../../packages/core/admin/admin/src/components/PageHelpers.tsx"],
  "sourcesContent": ["import * as React from 'react';\r\n\r\nimport { IntlFormatters, useIntl } from 'react-intl';\r\n\r\nimport { FetchError, ApiError } from '../utils/getFetchClient';\r\nimport { getPrefixedId } from '../utils/getPrefixedId';\r\nimport { NormalizeErrorOptions, normalizeAPIError } from '../utils/normalizeAPIError';\r\nimport { setIn } from '../utils/objects';\r\n\r\ninterface UnknownApiError {\r\n  /**\r\n   * The name of the ApiError, is always a static value.\r\n   */\r\n  name: 'UnknownError';\r\n  /**\r\n   * The error message.\r\n   */\r\n  message: string;\r\n  /**\r\n   * The error details.\r\n   */\r\n  details?: unknown;\r\n  /**\r\n   * The HTTP status code of the error.\r\n   */\r\n  status?: number;\r\n}\r\n\r\n/**\r\n * The last item is the fallback error SerializedError which\r\n * typically comes from redux-toolkit itself.\r\n */\r\ninterface SerializedError {\r\n  /**\r\n   * The name of the error.\r\n   */\r\n  name?: string;\r\n  /**\r\n   * The error message that explains what went wrong.\r\n   */\r\n  message?: string;\r\n  /**\r\n   * The stack trace of the error.\r\n   */\r\n  stack?: string;\r\n  /**\r\n   * A specific error code associated with the error.\r\n   */\r\n  code?: string;\r\n}\r\n\r\n/**\r\n * These are the types or errors we return\r\n * from the redux-toolkit data-fetching setup.\r\n */\r\ntype BaseQueryError = ApiError | UnknownApiError | SerializedError;\r\n\r\ninterface YupFormattedError {\r\n  /**\r\n   * An array representing the path to the field where the validation error occurred.\r\n   */\r\n  path: string[];\r\n  /**\r\n   * The error message describing the validation failure.\r\n   */\r\n  message: string;\r\n  /**\r\n   * The name of the error, typically identifies the type of validation error that occurred.\r\n   */\r\n  name: string;\r\n\r\n  value: string;\r\n}\r\n\r\n/**\r\n * @public\r\n * @description The purpose of this hook is to offer a unified way to handle errors thrown by API endpoints, regardless of the type of error (`ValidationError`, `ApplicationErrror` ...)\r\nthat has been thrown.\r\n * @example\r\n * ```tsx\r\n * import * as React from 'react';\r\n * import { useFetchClient, useAPIErrorHandler, useNotification } from '@strapi/admin/admin';\r\n *\r\n * const MyComponent = () => {\r\n *   const { get } = useFetchClient();\r\n *   const { formatAPIError } = useAPIErrorHandler(getTrad);\r\n *   const { toggleNotification } = useNotification();\r\n *\r\n *   const handleDeleteItem = async () => {\r\n *     try {\r\n *       return await get('/admin');\r\n *     } catch (error) {\r\n *       toggleNotification({\r\n *         type: 'danger',\r\n *         message: formatAPIError(error),\r\n *       });\r\n *     }\r\n *   };\r\n *   return <button onClick={handleDeleteItem}>Delete item</button>;\r\n * };\r\n * ```\r\n */\r\nexport function useAPIErrorHandler(\r\n  intlMessagePrefixCallback?: FormatAPIErrorOptions['intlMessagePrefixCallback']\r\n) {\r\n  const { formatMessage } = useIntl();\r\n\r\n  /**\r\n   * @description This method try to normalize the passed error\r\n   * and then call formatAPIError to stringify the ResponseObject\r\n   * into a string. If it fails it will call formatFetchError and\r\n   * return the error message.\r\n   */\r\n  const formatError = React.useCallback(\r\n    (error: FetchError) => {\r\n      // Try to normalize the passed error first. This will fail for e.g. network\r\n      // errors which are thrown by fetchClient directly.\r\n      try {\r\n        const formattedErr = formatAPIError(error, { intlMessagePrefixCallback, formatMessage });\r\n\r\n        if (!formattedErr) {\r\n          return formatFetchError(error, { intlMessagePrefixCallback, formatMessage });\r\n        }\r\n\r\n        return formattedErr;\r\n      } catch (_) {\r\n        throw new Error('formatAPIError: Unknown error:', error);\r\n      }\r\n    },\r\n    [formatMessage, intlMessagePrefixCallback]\r\n  );\r\n\r\n  return {\r\n    /**\r\n     * @alpha\r\n     * Convert ValidationErrors from the API into an object that can be used by forms.\r\n     */\r\n    _unstableFormatValidationErrors: React.useCallback(\r\n      (error: Extract<BaseQueryError, { name: 'ValidationError' }>): Record<string, string> => {\r\n        if (typeof error.details === 'object' && error.details !== null) {\r\n          if ('errors' in error.details && Array.isArray(error.details.errors)) {\r\n            const validationErrors = error.details.errors as YupFormattedError[];\r\n\r\n            return validationErrors.reduce((acc, err) => {\r\n              const { path, message } = err;\r\n\r\n              return setIn(acc, path.join('.'), message);\r\n            }, {});\r\n          } else {\r\n            const details = error.details as Record<string, string[]>;\r\n\r\n            return Object.keys(details).reduce((acc, key) => {\r\n              const messages = details[key];\r\n\r\n              return {\r\n                ...acc,\r\n                [key]: messages.join(', '),\r\n              };\r\n            }, {});\r\n          }\r\n        } else {\r\n          return {};\r\n        }\r\n      },\r\n      []\r\n    ),\r\n    /**\r\n     * @alpha\r\n     * This handles the errors given from `redux-toolkit`'s axios based baseQuery function.\r\n     */\r\n    _unstableFormatAPIError: React.useCallback(\r\n      (error: BaseQueryError) => {\r\n        const err = {\r\n          response: {\r\n            data: {\r\n              error,\r\n            },\r\n          },\r\n        } as FetchError;\r\n\r\n        /**\r\n         * There's a chance with SerializedErrors that the message is not set.\r\n         * In that case we return a generic error message.\r\n         */\r\n        if (!error.message) {\r\n          return 'Unknown error occured.';\r\n        }\r\n\r\n        return formatError(err);\r\n      },\r\n      [formatError]\r\n    ),\r\n    formatAPIError: formatError,\r\n  };\r\n}\r\n\r\nfunction formatFetchError(\r\n  error: FetchError,\r\n  { intlMessagePrefixCallback, formatMessage }: FormatAPIErrorOptions\r\n) {\r\n  const { code, message } = error;\r\n\r\n  return formatMessage(\r\n    {\r\n      id: getPrefixedId(message, intlMessagePrefixCallback),\r\n      defaultMessage: message,\r\n    },\r\n    {\r\n      code,\r\n    }\r\n  );\r\n}\r\n\r\ntype FormatAPIErrorOptions = Partial<Pick<NormalizeErrorOptions, 'intlMessagePrefixCallback'>> &\r\n  Pick<IntlFormatters, 'formatMessage'>;\r\n\r\n/**\r\n * @description This method stringifies the `ResponseObject` into\r\n * a string. If multiple errors are thrown by the API, which\r\n * happens e.g.in the case of a `ValidationError`, all errors\r\n * will bo concatenated into a single string.\r\n */\r\nfunction formatAPIError(\r\n  error: FetchError,\r\n  { formatMessage, intlMessagePrefixCallback }: FormatAPIErrorOptions\r\n) {\r\n  if (!formatMessage) {\r\n    throw new Error('The formatMessage callback is a mandatory argument.');\r\n  }\r\n\r\n  const normalizedError = normalizeAPIError(error, intlMessagePrefixCallback);\r\n\r\n  if (!normalizedError) {\r\n    return null;\r\n  }\r\n\r\n  if ('message' in normalizedError && normalizedError.message !== null) {\r\n    return normalizedError.message;\r\n  }\r\n\r\n  // stringify multiple errors\r\n  if ('errors' in normalizedError) {\r\n    return normalizedError.errors\r\n      .map(({ id, defaultMessage, values }) => formatMessage({ id, defaultMessage }, values))\r\n      .join('\\n');\r\n  }\r\n\r\n  return formatMessage(normalizedError);\r\n}\r\n\r\nexport type { ApiError };\r\n", "/**\r\n * Prefix message with 'apiError.'\r\n */\r\nexport function getPrefixedId(message: string, callback?: (prefixedMessage: string) => string) {\r\n  const prefixedMessage = `apiError.${message}`;\r\n\r\n  // if a prefix function has been passed in it is used to\r\n  // prefix the id, e.g. to allow an error message to be\r\n  // set only for a localization namespace\r\n  if (typeof callback === 'function') {\r\n    return callback(prefixedMessage);\r\n  }\r\n\r\n  return prefixedMessage;\r\n}\r\n", "import { getPrefixedId } from './getPrefixedId';\r\n\r\nimport type { ApiError } from '../hooks/useAPIErrorHandler';\r\nimport type { FetchError } from '../utils/getFetchClient';\r\nimport type { errors } from '@strapi/utils';\r\n\r\nexport interface NormalizeErrorOptions {\r\n  name?: string;\r\n  intlMessagePrefixCallback?: (id: string) => string;\r\n}\r\n\r\ninterface NormalizeErrorReturn {\r\n  id: string;\r\n  defaultMessage: string;\r\n  name?: string;\r\n  values: Record<'path', string> | Record<string, never>;\r\n}\r\n\r\ninterface YupFormattedError {\r\n  path: string[];\r\n  message: string;\r\n  name: string;\r\n  value: string;\r\n}\r\n\r\nfunction normalizeError(\r\n  error: ApiError | YupFormattedError,\r\n  { name, intlMessagePrefixCallback }: NormalizeErrorOptions\r\n): NormalizeErrorReturn {\r\n  const { message } = error;\r\n\r\n  const normalizedError = {\r\n    id: getPrefixedId(message, intlMessagePrefixCallback),\r\n    defaultMessage: message,\r\n    name: error.name ?? name,\r\n    values: {},\r\n  };\r\n\r\n  if ('path' in error) {\r\n    normalizedError.values = { path: error.path.join('.') };\r\n  }\r\n\r\n  return normalizedError;\r\n}\r\n\r\nconst validateErrorIsYupValidationError = (\r\n  err: ApiError\r\n): err is errors.YupValidationError & { details: { errors: YupFormattedError[] } } =>\r\n  typeof err.details === 'object' && err.details !== null && 'errors' in err.details;\r\n\r\n/**\r\n * Normalize the format of `ResponseError`\r\n * in places where the hook `useAPIErrorHandler` can not called\r\n * (e.g. outside of a React component).\r\n */\r\nexport function normalizeAPIError(\r\n  apiError: FetchError,\r\n  intlMessagePrefixCallback?: NormalizeErrorOptions['intlMessagePrefixCallback']\r\n):\r\n  | NormalizeErrorReturn\r\n  | { name: string; message: string | null; errors: NormalizeErrorReturn[] }\r\n  | null {\r\n  const error = apiError.response?.data?.error;\r\n\r\n  if (error) {\r\n    // some errors carry multiple errors (such as ValidationError)\r\n    if (validateErrorIsYupValidationError(error)) {\r\n      return {\r\n        name: error.name,\r\n        message: error?.message || null,\r\n        errors: error.details.errors.map((err) =>\r\n          normalizeError(err, { name: error.name, intlMessagePrefixCallback })\r\n        ),\r\n      };\r\n    }\r\n    return normalizeError(error, { intlMessagePrefixCallback });\r\n  }\r\n\r\n  return null;\r\n}\r\n", "import * as React from 'react';\r\n\r\nimport {\r\n  Box,\r\n  EmptyStateLayout,\r\n  type EmptyStateLayoutProps,\r\n  Flex,\r\n  Loader,\r\n  Main,\r\n  MainProps,\r\n} from '@strapi/design-system';\r\nimport { WarningCircle } from '@strapi/icons';\r\nimport { EmptyPermissions, EmptyDocuments } from '@strapi/icons/symbols';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { useAuth, Permission } from '../features/Auth';\r\nimport { useNotification } from '../features/Notifications';\r\nimport { useAPIErrorHandler } from '../hooks/useAPIErrorHandler';\r\nimport { useCheckPermissionsQuery } from '../services/auth';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Main\r\n * -----------------------------------------------------------------------------------------------*/\r\ninterface PageMainProps extends MainProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst PageMain = ({ children, ...restProps }: PageMainProps) => {\r\n  return <Main {...restProps}>{children}</Main>;\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Loading\r\n * -----------------------------------------------------------------------------------------------*/\r\ninterface LoadingProps {\r\n  /**\r\n   * @default 'Loading content.'\r\n   */\r\n  children?: React.ReactNode;\r\n}\r\n\r\n/**\r\n * @public\r\n * @description A loading component that should be rendered as the page\r\n * whilst you load the content for the aforementioned page.\r\n */\r\nconst Loading = ({ children = 'Loading content.' }: LoadingProps) => {\r\n  return (\r\n    <PageMain height=\"100vh\" aria-busy={true}>\r\n      <Flex alignItems=\"center\" height=\"100%\" justifyContent=\"center\">\r\n        <Loader>{children}</Loader>\r\n      </Flex>\r\n    </PageMain>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Error\r\n * -----------------------------------------------------------------------------------------------*/\r\ninterface ErrorProps extends Partial<EmptyStateLayoutProps> {}\r\n\r\n/**\r\n * TODO: should we start passing our errors here so they're persisted on the screen?\r\n * This could follow something similar to how the global app error works...?\r\n */\r\n\r\n/**\r\n * @public\r\n * @description An error component that should be rendered as the page\r\n * when an error occurs.\r\n */\r\nconst Error = (props: ErrorProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  return (\r\n    <PageMain height=\"100%\">\r\n      <Flex alignItems=\"center\" height=\"100%\" justifyContent=\"center\">\r\n        <EmptyStateLayout\r\n          icon={<WarningCircle width=\"16rem\" />}\r\n          content={formatMessage({\r\n            id: 'anErrorOccurred',\r\n            defaultMessage: 'Whoops! Something went wrong. Please, try again.',\r\n          })}\r\n          {...props}\r\n        />\r\n      </Flex>\r\n    </PageMain>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * NoPermissions\r\n * -----------------------------------------------------------------------------------------------*/\r\ninterface NoPermissionsProps extends Partial<EmptyStateLayoutProps> {}\r\n\r\n/**\r\n * @public\r\n * @description A component that should be rendered as the page\r\n * when the user does not have the permissions to access the content.\r\n * This component does not check any permissions, it's up to you to decide\r\n * when it should be rendered.\r\n */\r\nconst NoPermissions = (props: NoPermissionsProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  return (\r\n    <PageMain height=\"100%\">\r\n      <Flex alignItems=\"center\" height=\"100%\" justifyContent=\"center\">\r\n        <Box minWidth=\"50%\">\r\n          <EmptyStateLayout\r\n            icon={<EmptyPermissions width=\"16rem\" />}\r\n            content={formatMessage({\r\n              id: 'app.components.EmptyStateLayout.content-permissions',\r\n              defaultMessage: \"You don't have the permissions to access that content\",\r\n            })}\r\n            {...props}\r\n          />\r\n        </Box>\r\n      </Flex>\r\n    </PageMain>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * NoData\r\n * -----------------------------------------------------------------------------------------------*/\r\ninterface NoDataProps extends Partial<EmptyStateLayoutProps> {}\r\n\r\n/**\r\n * @public\r\n * @description A component that should be rendered as the page\r\n * when there is no data available to display.\r\n * This component does not check any permissions, it's up to you to decide\r\n * when it should be rendered.\r\n */\r\nconst NoData = (props: NoDataProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  return (\r\n    <PageMain height=\"100%\" background=\"neutral100\">\r\n      <Flex alignItems=\"center\" height=\"100%\" width=\"100%\" justifyContent=\"center\">\r\n        <Box minWidth=\"50%\">\r\n          <EmptyStateLayout\r\n            icon={<EmptyDocuments width=\"16rem\" />}\r\n            action={props.action}\r\n            content={formatMessage({\r\n              id: 'app.components.EmptyStateLayout.content-document',\r\n              defaultMessage: 'No content found',\r\n            })}\r\n            {...props}\r\n          />\r\n        </Box>\r\n      </Flex>\r\n    </PageMain>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Protect\r\n * -----------------------------------------------------------------------------------------------*/\r\nexport interface ProtectProps {\r\n  /**\r\n   * The children to render if the user has the required permissions.\r\n   * If providing a function, it will be called with an object containing\r\n   * the permissions the user has based on the array you passed to the component.\r\n   */\r\n  children: React.ReactNode | ((args: { permissions: Permission[] }) => React.ReactNode);\r\n  /**\r\n   * The permissions the user needs to have to access the content.\r\n   */\r\n  permissions?: Array<Omit<Partial<Permission>, 'action'> & Pick<Permission, 'action'>>;\r\n}\r\n\r\n/**\r\n * @public\r\n * @description A wrapper component that should be used to protect a page. It will check the permissions\r\n * you pass to it and render the children if the user has the required permissions. If a user does not have ALL\r\n * the required permissions, it will redirect the user to the home page. Whilst these checks happen it will render\r\n * the loading component and should the check fail it will render the error component with a notification.\r\n */\r\nconst Protect = ({ permissions = [], children }: ProtectProps) => {\r\n  const userPermissions = useAuth('Protect', (state) => state.permissions);\r\n  const { toggleNotification } = useNotification();\r\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\r\n\r\n  const matchingPermissions = userPermissions.filter(\r\n    (permission) =>\r\n      permissions.findIndex(\r\n        (perm) => perm.action === permission.action && perm.subject === permission.subject\r\n      ) >= 0\r\n  );\r\n\r\n  const shouldCheckConditions = matchingPermissions.some(\r\n    (perm) => Array.isArray(perm.conditions) && perm.conditions.length > 0\r\n  );\r\n\r\n  const { isLoading, error, data } = useCheckPermissionsQuery(\r\n    {\r\n      permissions: matchingPermissions.map((perm) => ({\r\n        action: perm.action,\r\n        subject: perm.subject,\r\n      })),\r\n    },\r\n    {\r\n      skip: !shouldCheckConditions,\r\n    }\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    if (error) {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatAPIError(error),\r\n      });\r\n    }\r\n  }, [error, formatAPIError, toggleNotification]);\r\n\r\n  if (isLoading) {\r\n    return <Loading />;\r\n  }\r\n\r\n  if (error) {\r\n    return <Error />;\r\n  }\r\n\r\n  const { data: permissionsData } = data || {};\r\n\r\n  const canAccess =\r\n    shouldCheckConditions && permissionsData\r\n      ? !permissionsData.includes(false)\r\n      : matchingPermissions.length > 0;\r\n\r\n  if (!canAccess) {\r\n    return <NoPermissions />;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {typeof children === 'function' ? children({ permissions: matchingPermissions }) : children}\r\n    </>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Title\r\n * -----------------------------------------------------------------------------------------------*/\r\nexport interface TitleProps {\r\n  children: string;\r\n}\r\n\r\n/**\r\n * @public\r\n * @description This component takes the children (must be a string) and sets\r\n * it as the title of the html.\r\n */\r\nconst Title = ({ children: title }: TitleProps) => {\r\n  React.useEffect(() => {\r\n    document.title = `${title} | Strapi`;\r\n  }, [title]);\r\n\r\n  return null;\r\n};\r\n\r\nconst Page = {\r\n  Error,\r\n  Loading,\r\n  NoPermissions,\r\n  Protect,\r\n  NoData,\r\n  Main: PageMain,\r\n  Title,\r\n};\r\n\r\nexport { Page };\r\nexport type { ErrorProps, LoadingProps, NoPermissionsProps, PageMainProps as MainProps };\r\n"],
  "mappings": "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",
  "names": ["React", "Error", "formatAPIError"]
}
