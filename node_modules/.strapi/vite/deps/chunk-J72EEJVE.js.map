{
  "version": 3,
  "sources": ["../../../../../packages/core/admin/admin/src/hooks/useAdminRoles.ts"],
  "sourcesContent": ["import * as React from 'react';\r\n\r\nimport { useCollator } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { GetRolesParams, useGetRolesQuery } from '../services/users';\r\n\r\nimport type { FindRoles } from '../../../shared/contracts/roles';\r\n\r\nexport type AdminRole = FindRoles.Response['data'][number];\r\n\r\nexport const useAdminRoles = (\r\n  params: GetRolesParams = {},\r\n  queryOptions?: Parameters<typeof useGetRolesQuery>[1]\r\n) => {\r\n  const { locale } = useIntl();\r\n  const formatter = useCollator(locale, {\r\n    sensitivity: 'base',\r\n  });\r\n\r\n  const { data, error, isError, isLoading, refetch } = useGetRolesQuery(params, queryOptions);\r\n\r\n  // the return value needs to be memoized, because intantiating\r\n  // an empty array as default value would lead to an unstable return\r\n  // value, which later on triggers infinite loops if used in the\r\n  // dependency arrays of other hooks\r\n  const roles = React.useMemo(\r\n    () =>\r\n      [...(data ?? [])].sort((a, b) =>\r\n        formatter.compare(a.name, b.name)\r\n      ) as FindRoles.Response['data'],\r\n    [data, formatter]\r\n  );\r\n\r\n  return {\r\n    roles,\r\n    error,\r\n    isError,\r\n    isLoading,\r\n    refetch,\r\n  };\r\n};\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAAA,YAAuB;AAWhB,IAAM,gBAAgB,CAC3B,SAAyB,CAAC,GAC1B,iBACG;AACH,QAAM,EAAE,OAAO,IAAI,QAAQ;AAC3B,QAAM,YAAY,YAAY,QAAQ;AAAA,IACpC,aAAa;AAAA,EACf,CAAC;AAED,QAAM,EAAE,MAAM,OAAO,SAAS,WAAW,QAAQ,IAAI,iBAAiB,QAAQ,YAAY;AAM1F,QAAM,QAAc;AAAA,IAClB,MACE,CAAC,GAAI,QAAQ,CAAC,CAAE,EAAE;AAAA,MAAK,CAAC,GAAG,MACzB,UAAU,QAAQ,EAAE,MAAM,EAAE,IAAI;AAAA,IAClC;AAAA,IACF,CAAC,MAAM,SAAS;AAAA,EAClB;AAEA,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;",
  "names": []
}
