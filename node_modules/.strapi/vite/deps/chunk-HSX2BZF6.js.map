{
  "version": 3,
  "sources": ["../../../../../packages/core/admin/admin/src/components/Pagination.tsx"],
  "sourcesContent": ["/* eslint-disable import/export */\r\nimport * as React from 'react';\r\n\r\nimport {\r\n  Flex,\r\n  SingleSelectOption,\r\n  SingleSelect,\r\n  Typography,\r\n  Dots,\r\n  NextLink,\r\n  PageLink,\r\n  Pagination as PaginationImpl,\r\n  PreviousLink,\r\n} from '@strapi/design-system';\r\nimport { stringify } from 'qs';\r\nimport { useIntl } from 'react-intl';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { useQueryParams } from '../hooks/useQueryParams';\r\n\r\nimport { createContext } from './Context';\r\n\r\nimport type { Pagination as PaginationApi } from '../../../shared/contracts/shared';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Root\r\n * -----------------------------------------------------------------------------------------------*/\r\ninterface PaginationContextValue {\r\n  /**\r\n   * @description the complete query object, this could include query params\r\n   * injected by other plugins, if you're navigating to a different page you\r\n   * should ensure these are still passed.\r\n   */\r\n  currentQuery?: object;\r\n  pageCount: string;\r\n  pageSize: string;\r\n  page: string;\r\n  setPageSize: (pageSize: string) => void;\r\n  total: NonNullable<RootProps['total']>;\r\n}\r\n\r\nconst [PaginationProvider, usePagination] = createContext<PaginationContextValue>('Pagination');\r\n\r\ninterface RootProps {\r\n  children: React.ReactNode;\r\n  /**\r\n   * @default 0\r\n   * @description the total number of pages\r\n   * that exist in the dataset.\r\n   */\r\n  pageCount?: PaginationApi['pageCount'];\r\n  /**\r\n   * @default 1\r\n   * @description the initial page number.\r\n   */\r\n  defaultPage?: PaginationApi['page'];\r\n  /**\r\n   * @default 10\r\n   * @description the initial number of items to display\r\n   */\r\n  defaultPageSize?: PaginationApi['pageSize'];\r\n  /**\r\n   * @description a callback that is called when the page size changes.\r\n   */\r\n  onPageSizeChange?: (pageSize: string) => void;\r\n  /**\r\n   * @default 0\r\n   * @description the total number of items in the dataset.\r\n   */\r\n  total?: PaginationApi['total'];\r\n}\r\n\r\n/**\r\n * @description The root component for the composable pagination component.\r\n * It's advised to spread the entire pagination option object into this component.\r\n *\r\n * @example\r\n * ```tsx\r\n * const MyComponent = () => {\r\n *  return (\r\n *    <Pagination.Root {...response.pagination}>\r\n *      <Pagination.PageSize />\r\n *      <Pagination.Links />\r\n *    </Pagination.Root>\r\n *  );\r\n * };\r\n * ```\r\n */\r\nconst Root = React.forwardRef<HTMLDivElement, RootProps>(\r\n  (\r\n    { children, defaultPageSize = 10, pageCount = 0, defaultPage = 1, onPageSizeChange, total = 0 },\r\n    forwardedRef\r\n  ) => {\r\n    const [{ query }, setQuery] = useQueryParams<Pick<PaginationContextValue, 'page' | 'pageSize'>>(\r\n      {\r\n        pageSize: defaultPageSize.toString(),\r\n        page: defaultPage.toString(),\r\n      }\r\n    );\r\n\r\n    const setPageSize = (pageSize: string) => {\r\n      setQuery({ pageSize, page: '1' });\r\n\r\n      if (onPageSizeChange) {\r\n        onPageSizeChange(pageSize);\r\n      }\r\n    };\r\n\r\n    return (\r\n      <Flex\r\n        ref={forwardedRef}\r\n        paddingTop={4}\r\n        paddingBottom={4}\r\n        alignItems=\"flex-end\"\r\n        justifyContent=\"space-between\"\r\n      >\r\n        <PaginationProvider\r\n          currentQuery={query}\r\n          page={query.page}\r\n          pageSize={query.pageSize}\r\n          pageCount={pageCount.toString()}\r\n          setPageSize={setPageSize}\r\n          total={total}\r\n        >\r\n          {children}\r\n        </PaginationProvider>\r\n      </Flex>\r\n    );\r\n  }\r\n);\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * PageSize\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\n/**\r\n * @description The page size component is responsible for rendering the select input that allows\r\n * the user to change the number of items displayed per page.\r\n * If the total number of items is less than the minimum option, this component will not render.\r\n */\r\nconst PageSize = ({ options = ['10', '20', '50', '100'] }: Pagination.PageSizeProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  const pageSize = usePagination('PageSize', (state) => state.pageSize);\r\n  const totalCount = usePagination('PageSize', (state) => state.total);\r\n  const setPageSize = usePagination('PageSize', (state) => state.setPageSize);\r\n\r\n  const handleChange = (value: string) => {\r\n    setPageSize(value);\r\n  };\r\n\r\n  const minimumOption = parseInt(options[0], 10);\r\n\r\n  if (minimumOption >= totalCount) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Flex gap={2}>\r\n      <SingleSelect\r\n        size=\"S\"\r\n        aria-label={formatMessage({\r\n          id: 'components.PageFooter.select',\r\n          defaultMessage: 'Entries per page',\r\n        })}\r\n        // @ts-expect-error from the DS V2 this won't be needed because we're only returning strings.\r\n        onChange={handleChange}\r\n        value={pageSize}\r\n      >\r\n        {options.map((option) => (\r\n          <SingleSelectOption key={option} value={option}>\r\n            {option}\r\n          </SingleSelectOption>\r\n        ))}\r\n      </SingleSelect>\r\n      <Typography textColor=\"neutral600\" tag=\"span\">\r\n        {formatMessage({\r\n          id: 'components.PageFooter.select',\r\n          defaultMessage: 'Entries per page',\r\n        })}\r\n      </Typography>\r\n    </Flex>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Links\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\n/**\r\n * The component works as follows\r\n * `1` , 2, 3, ... 10\r\n * 1, `2`, 3, ... 10\r\n * 1, 2, `3`, 4, ... 10\r\n * 1, 2, 3, `4`, 5, ... 10\r\n * 1, ..,4, `5`, 6, ... 10\r\n *\r\n * 1, ...., 8, 9, `10`\r\n * 1, ...., 8, `9`, 10\r\n * 1, ...., 7, `8`, 9, 10\r\n * 1, ... 6, `7`, 8, 9, 10\r\n */\r\n\r\n/**\r\n * @description The links component is responsible for rendering the pagination links.\r\n * If the total number of pages is less than or equal to 1, this component will not render.\r\n */\r\nconst Links = ({ boundaryCount = 1, siblingCount = 1 }: Pagination.LinksProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  const query = usePagination('Links', (state) => state.currentQuery);\r\n  const currentPage = usePagination('Links', (state) => state.page);\r\n  const totalPages = usePagination('Links', (state) => state.pageCount);\r\n\r\n  const pageCount = parseInt(totalPages, 10);\r\n  const activePage = parseInt(currentPage, 10);\r\n\r\n  const range = (start: number, end: number) => {\r\n    const length = end - start + 1;\r\n\r\n    return Array.from({ length }, (_, i) => start + i);\r\n  };\r\n\r\n  const startPages = range(1, Math.min(boundaryCount, pageCount));\r\n  const endPages = range(Math.max(pageCount - boundaryCount + 1, boundaryCount + 1), pageCount);\r\n\r\n  const siblingsStart = Math.max(\r\n    Math.min(\r\n      // Natural start\r\n      activePage - siblingCount,\r\n      // Lower boundary when page is high\r\n      pageCount - boundaryCount - siblingCount * 2 - 1\r\n    ),\r\n    // Greater than startPages\r\n    boundaryCount + 2\r\n  );\r\n\r\n  const siblingsEnd = Math.min(\r\n    Math.max(\r\n      // Natural end\r\n      activePage + siblingCount,\r\n      // Upper boundary when page is low\r\n      boundaryCount + siblingCount * 2 + 2\r\n    ),\r\n    // Less than endPages\r\n    endPages.length > 0 ? endPages[0] - 2 : pageCount - 1\r\n  );\r\n\r\n  const items = [\r\n    ...startPages,\r\n\r\n    // Start ellipsis\r\n    // eslint-disable-next-line no-nested-ternary\r\n    ...(siblingsStart > boundaryCount + 2\r\n      ? ['start-ellipsis']\r\n      : boundaryCount + 1 < pageCount - boundaryCount\r\n        ? [boundaryCount + 1]\r\n        : []),\r\n\r\n    // Sibling pages\r\n    ...range(siblingsStart, siblingsEnd),\r\n\r\n    // End ellipsis\r\n    // eslint-disable-next-line no-nested-ternary\r\n    ...(siblingsEnd < pageCount - boundaryCount - 1\r\n      ? ['end-ellipsis']\r\n      : pageCount - boundaryCount > boundaryCount\r\n        ? [pageCount - boundaryCount]\r\n        : []),\r\n\r\n    ...endPages,\r\n  ];\r\n\r\n  if (pageCount <= 1) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <PaginationImpl activePage={activePage} pageCount={pageCount}>\r\n      <PreviousLink tag={Link} to={{ search: stringify({ ...query, page: activePage - 1 }) }}>\r\n        {formatMessage({\r\n          id: 'components.pagination.go-to-previous',\r\n          defaultMessage: 'Go to previous page',\r\n        })}\r\n      </PreviousLink>\r\n      {items.map((item) => {\r\n        if (typeof item === 'number') {\r\n          return (\r\n            <PageLink\r\n              tag={Link}\r\n              key={item}\r\n              number={item}\r\n              to={{ search: stringify({ ...query, page: item }) }}\r\n            >\r\n              {formatMessage(\r\n                { id: 'components.pagination.go-to', defaultMessage: 'Go to page {page}' },\r\n                { page: item }\r\n              )}\r\n            </PageLink>\r\n          );\r\n        }\r\n\r\n        return <Dots key={item} />;\r\n      })}\r\n\r\n      <NextLink tag={Link} to={{ search: stringify({ ...query, page: activePage + 1 }) }}>\r\n        {formatMessage({\r\n          id: 'components.pagination.go-to-next',\r\n          defaultMessage: 'Go to next page',\r\n        })}\r\n      </NextLink>\r\n    </PaginationImpl>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * EXPORTS\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst Pagination = {\r\n  Root,\r\n  Links,\r\n  PageSize,\r\n};\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nnamespace Pagination {\r\n  export interface Props extends RootProps {}\r\n\r\n  export interface PageSizeProps {\r\n    options?: string[];\r\n  }\r\n\r\n  export interface LinksProps {\r\n    /**\r\n     * @default 1\r\n     * @description Number of always visible pages at the beginning and end.\r\n     */\r\n    boundaryCount?: number;\r\n    /**\r\n     * @default 1\r\n     * @description Number of always visible pages before and after the current page.\r\n     */\r\n    siblingCount?: number;\r\n  }\r\n}\r\n\r\nexport { Pagination };\r\n"],
  "mappings": "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",
  "names": ["Pagination"]
}
