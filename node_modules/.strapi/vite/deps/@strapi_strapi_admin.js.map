{
  "version": 3,
  "sources": ["../../../../../packages/core/content-type-builder/admin/src/reducers.ts", "../../../../../packages/core/content-type-builder/admin/src/utils/formAPI.ts", "../../../../../packages/core/content-type-builder/admin/src/utils/prefixPluginTranslations.ts", "../../../../../packages/core/content-type-builder/admin/src/index.ts", "../../../../../packages/core/email/admin/src/utils/prefixPluginTranslations.ts", "../../../../../packages/core/email/admin/src/index.ts", "../../../../../packages/core/upload/admin/src/components/MediaLibraryDialog/MediaLibraryDialog.tsx", "../../../../../packages/core/upload/admin/src/components/AssetDialog/AssetDialog.tsx", "../../../../../packages/core/upload/admin/src/hooks/useModalQueryParams.ts", "../../../../../packages/core/upload/admin/src/components/AssetDialog/BrowseStep/Filters.tsx", "../../../../../packages/core/upload/admin/src/components/AssetDialog/BrowseStep/PageSize.tsx", "../../../../../packages/core/upload/admin/src/components/AssetDialog/BrowseStep/PaginationFooter/Pagination.tsx", "../../../../../packages/core/upload/admin/src/components/AssetDialog/BrowseStep/PaginationFooter/PaginationFooter.tsx", "../../../../../packages/core/upload/admin/src/components/AssetDialog/BrowseStep/SearchAsset/SearchAsset.tsx", "../../../../../packages/core/upload/admin/src/components/AssetDialog/BrowseStep/utils/isSelectable.ts", "../../../../../packages/core/upload/admin/src/components/AssetDialog/BrowseStep/BrowseStep.tsx", "../../../../../packages/core/upload/admin/src/components/AssetDialog/DialogFooter.tsx", "../../../../../packages/core/upload/admin/src/components/AssetDialog/SelectedStep/SelectedStep.tsx", "../../../../../packages/core/upload/admin/src/components/MediaLibraryInput/MediaLibraryInput.tsx", "../../../../../packages/core/upload/admin/src/components/MediaLibraryInput/Carousel/CarouselAssets.tsx", "../../../../../packages/core/upload/admin/src/components/MediaLibraryInput/Carousel/CarouselAsset.tsx", "../../../../../packages/core/upload/admin/src/components/MediaLibraryInput/Carousel/CarouselAssetActions.tsx", "../../../../../packages/core/upload/admin/src/components/MediaLibraryInput/Carousel/EmptyStateAsset.tsx", "../../../../../packages/core/upload/admin/src/index.ts", "../../../../../packages/plugins/i18n/admin/src/index.ts", "../../../../../packages/plugins/i18n/admin/src/components/CheckboxConfirmation.tsx", "../../../../../packages/plugins/i18n/admin/src/components/CMHeaderActions.tsx", "../../../../../packages/plugins/i18n/admin/src/hooks/useI18n.ts", "../../../../../packages/plugins/i18n/admin/src/utils/fields.ts", "../../../../../packages/plugins/i18n/admin/src/utils/strings.ts", "../../../../../packages/plugins/i18n/admin/src/services/relations.ts", "../../../../../packages/plugins/i18n/admin/src/utils/clean.ts", "../../../../../packages/plugins/i18n/admin/src/components/BulkLocaleActionModal.tsx", "../../../../../packages/plugins/i18n/admin/src/components/CMListViewModalsAdditionalInformation.tsx", "../../../../../packages/plugins/i18n/admin/src/components/LocalePicker.tsx", "../../../../../packages/plugins/i18n/admin/src/contentManagerHooks/editView.tsx", "../../../../../packages/plugins/i18n/admin/src/components/LocaleListCell.tsx", "../../../../../packages/plugins/i18n/admin/src/contentManagerHooks/listView.tsx", "../../../../../packages/plugins/i18n/admin/src/contentReleasesHooks/releaseDetailsView.ts", "../../../../../packages/plugins/i18n/admin/src/middlewares/extendCTBAttributeInitialData.ts", "../../../../../packages/plugins/i18n/admin/src/middlewares/extendCTBInitialData.ts", "../../../../../packages/plugins/i18n/admin/src/middlewares/rbac-middleware.ts", "../../../../../packages/plugins/i18n/admin/src/utils/prefixPluginTranslations.ts", "../../../../../packages/plugins/i18n/admin/src/utils/schemas.ts", "../../../../../packages/core/content-releases/admin/src/components/ReleaseActionModal.tsx", "../../../../../packages/core/content-releases/admin/src/components/ReleaseAction.tsx", "../../../../../packages/core/content-releases/admin/src/components/ReleaseListCell.tsx", "../../../../../packages/core/content-releases/admin/src/components/ReleasesPanel.tsx", "../../../../../packages/core/content-releases/admin/src/utils/prefixPluginTranslations.ts", "../../../../../packages/core/content-releases/admin/src/index.ts", "../../../../../packages/core/review-workflows/admin/src/routes/content-manager/model/id/components/AssigneeSelect.tsx", "../../../../../packages/core/review-workflows/admin/src/routes/content-manager/model/id/components/constants.ts", "../../../../../packages/core/review-workflows/admin/src/routes/content-manager/model/id/components/StageSelect.tsx", "../../../../../packages/core/review-workflows/admin/src/routes/content-manager/model/id/components/Header.tsx", "../../../../../packages/core/review-workflows/admin/src/routes/content-manager/model/id/components/Panel.tsx", "../../../../../packages/core/review-workflows/admin/src/routes/content-manager/model/components/AssigneeFilter.tsx", "../../../../../packages/core/review-workflows/admin/src/routes/content-manager/model/components/StageFilter.tsx", "../../../../../packages/core/review-workflows/admin/src/routes/content-manager/model/constants.tsx", "../../../../../packages/core/review-workflows/admin/src/utils/cm-hooks.ts", "../../../../../packages/core/review-workflows/admin/src/utils/translations.ts", "../../../../../packages/core/review-workflows/admin/src/index.ts", "../../../@strapi/strapi/src/admin.ts"],
  "sourcesContent": ["import { reducer as dataManagerProviderReducer } from './components/DataManager/reducer';\r\nimport { reducer as formModalReducer } from './components/FormModal/reducer';\r\n\r\nexport const reducers = {\r\n  [`content-type-builder_formModal`]: formModalReducer,\r\n  [`content-type-builder_dataManagerProvider`]: dataManagerProviderReducer,\r\n};\r\n", "import cloneDeep from 'lodash/cloneDeep';\r\nimport get from 'lodash/get';\r\nimport * as yup from 'yup';\r\n\r\nexport interface FormAPI {\r\n  components: {\r\n    inputs: Record<string, any>;\r\n    add: ({ id, component }: { id: string; component: any }) => void;\r\n  };\r\n  types: {\r\n    attribute: {\r\n      [key: string]: {\r\n        validators: any[];\r\n        form: {\r\n          advanced: any[];\r\n          base: any[];\r\n        };\r\n      };\r\n    };\r\n    contentType: {\r\n      validators: any[];\r\n      form: {\r\n        advanced: any[];\r\n        base: any[];\r\n      };\r\n    };\r\n    component: {\r\n      validators: any[];\r\n      form: {\r\n        advanced: any[];\r\n        base: any[];\r\n      };\r\n    };\r\n  };\r\n  contentTypeSchemaMutations: any[];\r\n  addContentTypeSchemaMutation: (cb: any) => void;\r\n  extendContentType: (data: any) => void;\r\n  extendFields: (fields: any[], data: any) => void;\r\n  getAdvancedForm: (target: any, props?: any) => any[];\r\n  makeCustomFieldValidator: (attributeShape: any, validator: any, ...validatorArgs: any) => any;\r\n  makeValidator: (target: any, initShape: any, ...args: any) => any;\r\n  mutateContentTypeSchema: (\r\n    data: Record<string, unknown>,\r\n    initialData: Record<string, unknown>\r\n  ) => any;\r\n}\r\n\r\nexport const formsAPI: FormAPI = {\r\n  components: {\r\n    inputs: {},\r\n    add({ id, component }) {\r\n      if (!this.inputs[id]) {\r\n        this.inputs[id] = component;\r\n      }\r\n    },\r\n  },\r\n  types: {\r\n    attribute: {\r\n      // test: {\r\n      //   validators: [],\r\n      //   form: {\r\n      //     advanced: [\r\n      //       /* cb */\r\n      //     ],\r\n      //     base: [\r\n      //       /* cb */\r\n      //     ],\r\n      //   },\r\n      // },\r\n    },\r\n    contentType: {\r\n      validators: [],\r\n      form: {\r\n        advanced: [],\r\n        base: [],\r\n      },\r\n    },\r\n    component: {\r\n      validators: [],\r\n      form: {\r\n        advanced: [],\r\n        base: [],\r\n      },\r\n    },\r\n  },\r\n  contentTypeSchemaMutations: [],\r\n  addContentTypeSchemaMutation(cb) {\r\n    this.contentTypeSchemaMutations.push(cb);\r\n  },\r\n  extendContentType({ validator, form: { advanced, base } }) {\r\n    const { contentType } = this.types;\r\n\r\n    if (validator) {\r\n      contentType.validators.push(validator);\r\n    }\r\n    contentType.form.advanced.push(advanced);\r\n    contentType.form.base.push(base);\r\n  },\r\n  extendFields(fields, { validator, form: { advanced, base } }) {\r\n    const formType = this.types.attribute;\r\n\r\n    fields.forEach((field) => {\r\n      if (!formType[field]) {\r\n        formType[field] = {\r\n          validators: [],\r\n          form: {\r\n            advanced: [\r\n              /* cb */\r\n            ],\r\n            base: [\r\n              /* cb */\r\n            ],\r\n          },\r\n        };\r\n      }\r\n\r\n      if (validator) {\r\n        formType[field].validators.push(validator);\r\n      }\r\n      formType[field].form.advanced.push(advanced);\r\n      formType[field].form.base.push(base);\r\n    });\r\n  },\r\n\r\n  getAdvancedForm(target, props = null) {\r\n    const sectionsToAdd = get(this.types, [...target, 'form', 'advanced'], []).reduce(\r\n      (acc: any, current: any) => {\r\n        const sections = current(props);\r\n\r\n        return [...acc, ...sections];\r\n      },\r\n      []\r\n    );\r\n\r\n    return sectionsToAdd;\r\n  },\r\n\r\n  makeCustomFieldValidator(attributeShape, validator, ...validatorArgs) {\r\n    // When no validator, return the attribute shape\r\n    if (!validator) return attributeShape;\r\n\r\n    // Otherwise extend the shape with the provided validator\r\n    return attributeShape.shape({ options: yup.object().shape(validator(validatorArgs)) });\r\n  },\r\n\r\n  makeValidator(target, initShape, ...args) {\r\n    const validators = get(this.types, [...target, 'validators'], []);\r\n\r\n    const pluginOptionsShape = validators.reduce((acc: any, current: any) => {\r\n      const pluginOptionShape = current(args);\r\n\r\n      return { ...acc, ...pluginOptionShape };\r\n    }, {});\r\n\r\n    return initShape.shape({ pluginOptions: yup.object().shape(pluginOptionsShape) });\r\n  },\r\n  mutateContentTypeSchema(data: Record<string, unknown>, initialData: Record<string, unknown>) {\r\n    let enhancedData = cloneDeep(data);\r\n\r\n    const refData = cloneDeep(initialData);\r\n\r\n    this.contentTypeSchemaMutations.forEach((cb: any) => {\r\n      enhancedData = cb(enhancedData, refData);\r\n    });\r\n\r\n    return enhancedData;\r\n  },\r\n};\r\n", "type TradOptions = Record<string, string>;\r\n\r\nconst prefixPluginTranslations = (trad: TradOptions, pluginId: string): TradOptions => {\r\n  if (!pluginId) {\r\n    throw new TypeError(\"pluginId can't be empty\");\r\n  }\r\n  return Object.keys(trad).reduce((acc, current) => {\r\n    acc[`${pluginId}.${current}`] = trad[current];\r\n    return acc;\r\n  }, {} as TradOptions);\r\n};\r\n\r\nexport { prefixPluginTranslations };\r\n", "import { Layout } from '@strapi/icons';\r\n\r\nimport { PERMISSIONS } from './constants';\r\nimport { pluginId } from './pluginId';\r\nimport { reducers } from './reducers';\r\nimport { formsAPI } from './utils/formAPI';\r\nimport { prefixPluginTranslations } from './utils/prefixPluginTranslations';\r\n\r\nimport type { StrapiApp } from '@strapi/admin/strapi-admin';\r\n\r\n// eslint-disable-next-line import/no-default-export\r\nexport default {\r\n  register(app: StrapiApp) {\r\n    app.addReducers(reducers);\r\n    app.addMenuLink({\r\n      to: `plugins/${pluginId}`,\r\n      icon: Layout,\r\n      intlLabel: {\r\n        id: `${pluginId}.plugin.name`,\r\n        defaultMessage: 'Content-Type Builder',\r\n      },\r\n      permissions: PERMISSIONS.main,\r\n      Component: () => import('./pages/App'),\r\n      position: 5,\r\n    });\r\n\r\n    app.registerPlugin({\r\n      id: pluginId,\r\n      name: pluginId,\r\n      // Internal APIs exposed by the CTB for the other plugins to use\r\n      apis: {\r\n        forms: formsAPI,\r\n      },\r\n    });\r\n  },\r\n  bootstrap() {},\r\n  async registerTrads({ locales }: { locales: string[] }) {\r\n    const importedTrads = await Promise.all(\r\n      locales.map((locale) => {\r\n        return import(`./translations/${locale}.json`)\r\n          .then(({ default: data }) => {\r\n            return {\r\n              data: prefixPluginTranslations(data, pluginId),\r\n              locale,\r\n            };\r\n          })\r\n          .catch(() => {\r\n            return {\r\n              data: {},\r\n              locale,\r\n            };\r\n          });\r\n      })\r\n    );\r\n\r\n    return Promise.resolve(importedTrads);\r\n  },\r\n};\r\n\r\nexport * from './exports';\r\n", "type TradOptions = Record<string, string>;\r\n\r\nconst prefixPluginTranslations = (trad: TradOptions, pluginId: string): TradOptions => {\r\n  if (!pluginId) {\r\n    throw new TypeError(\"pluginId can't be empty\");\r\n  }\r\n  return Object.keys(trad).reduce((acc, current) => {\r\n    acc[`${pluginId}.${current}`] = trad[current];\r\n    return acc;\r\n  }, {} as TradOptions);\r\n};\r\n\r\nexport { prefixPluginTranslations };\r\n", "import { PERMISSIONS } from './constants';\r\nimport { prefixPluginTranslations } from './utils/prefixPluginTranslations';\r\n\r\nimport type { Plugin } from '@strapi/types';\r\n\r\nconst admin: Plugin.Config.AdminInput = {\r\n  // TODO typing app in strapi/types as every plugin needs it\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  register(app: any) {\r\n    // Create the email settings section\r\n    app.createSettingSection(\r\n      {\r\n        id: 'email',\r\n        intlLabel: { id: 'email.SettingsNav.section-label', defaultMessage: 'Email Plugin' },\r\n      },\r\n      [\r\n        {\r\n          intlLabel: {\r\n            id: 'email.Settings.email.plugin.title',\r\n            defaultMessage: 'Settings',\r\n          },\r\n          id: 'settings',\r\n          to: 'email',\r\n          Component: () =>\r\n            import('./pages/Settings').then((mod) => ({\r\n              default: mod.ProtectedSettingsPage,\r\n            })),\r\n          permissions: PERMISSIONS.settings,\r\n        },\r\n      ]\r\n    );\r\n    app.registerPlugin({\r\n      id: 'email',\r\n      name: 'email',\r\n    });\r\n  },\r\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n  bootstrap() {},\r\n  async registerTrads({ locales }: { locales: string[] }) {\r\n    const importedTrads = await Promise.all(\r\n      locales.map((locale) => {\r\n        return import(`./translations/${locale}.json`)\r\n          .then(({ default: data }) => {\r\n            return {\r\n              data: prefixPluginTranslations(data, 'email'),\r\n              locale,\r\n            };\r\n          })\r\n          .catch(() => {\r\n            return {\r\n              data: {},\r\n              locale,\r\n            };\r\n          });\r\n      })\r\n    );\r\n\r\n    return Promise.resolve(importedTrads);\r\n  },\r\n};\r\n\r\n// eslint-disable-next-line import/no-default-export\r\nexport default admin;\r\n", "// TODO: find a better naming convention for the file that was an index file before\r\nimport * as React from 'react';\r\n\r\nimport { AssetDialog } from '../AssetDialog/AssetDialog';\r\nimport { EditFolderDialog } from '../EditFolderDialog/EditFolderDialog';\r\nimport { UploadAssetDialog } from '../UploadAssetDialog/UploadAssetDialog';\r\n\r\nconst STEPS = {\r\n  AssetSelect: 'SelectAsset',\r\n  AssetUpload: 'UploadAsset',\r\n  FolderCreate: 'FolderCreate',\r\n};\r\n\r\nimport type { File } from '../../../../shared/contracts/files';\r\nimport type { AllowedTypes } from '../AssetCard/AssetCard';\r\nexport interface MediaLibraryDialogProps {\r\n  allowedTypes?: AllowedTypes[];\r\n  onClose: () => void;\r\n  onSelectAssets: (selectedAssets: File[]) => void;\r\n}\r\n\r\nexport const MediaLibraryDialog = ({\r\n  onClose,\r\n  onSelectAssets,\r\n  allowedTypes = ['files', 'images', 'videos', 'audios'],\r\n}: MediaLibraryDialogProps) => {\r\n  const [step, setStep] = React.useState(STEPS.AssetSelect);\r\n  const [folderId, setFolderId] = React.useState<number | null>(null);\r\n\r\n  switch (step) {\r\n    case STEPS.AssetSelect:\r\n      return (\r\n        <AssetDialog\r\n          allowedTypes={allowedTypes}\r\n          folderId={folderId}\r\n          open\r\n          onClose={onClose}\r\n          onValidate={onSelectAssets}\r\n          onAddAsset={() => setStep(STEPS.AssetUpload)}\r\n          onAddFolder={() => setStep(STEPS.FolderCreate)}\r\n          onChangeFolder={(folderId) => setFolderId(folderId)}\r\n          multiple\r\n        />\r\n      );\r\n\r\n    case STEPS.FolderCreate:\r\n      return (\r\n        <EditFolderDialog\r\n          open\r\n          onClose={() => setStep(STEPS.AssetSelect)}\r\n          parentFolderId={folderId}\r\n        />\r\n      );\r\n\r\n    default:\r\n      return (\r\n        <UploadAssetDialog open onClose={() => setStep(STEPS.AssetSelect)} folderId={folderId} />\r\n      );\r\n  }\r\n};\r\n", "// TODO: find a better naming convention for the file that was an index file before\r\nimport * as React from 'react';\r\n\r\nimport { Page } from '@strapi/admin/strapi-admin';\r\nimport { Badge, Button, Divider, Flex, Loader, Modal, Tabs } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { useAssets } from '../../hooks/useAssets';\r\nimport { useFolders } from '../../hooks/useFolders';\r\nimport { useMediaLibraryPermissions } from '../../hooks/useMediaLibraryPermissions';\r\nimport { useModalQueryParams } from '../../hooks/useModalQueryParams';\r\nimport { useSelectionState } from '../../hooks/useSelectionState';\r\nimport {\r\n  containsAssetFilter,\r\n  getTrad,\r\n  getAllowedFiles,\r\n  moveElement,\r\n  AllowedFiles,\r\n} from '../../utils';\r\nimport { EditAssetContent, Asset as EditAsset } from '../EditAssetDialog/EditAssetContent';\r\nimport { EditFolderContent } from '../EditFolderDialog/EditFolderDialog';\r\n\r\nimport {\r\n  BrowseStep,\r\n  FolderWithType,\r\n  FileWithType,\r\n  Filter as BrowseFilter,\r\n} from './BrowseStep/BrowseStep';\r\nimport { DialogFooter } from './DialogFooter';\r\nimport { SelectedStep } from './SelectedStep/SelectedStep';\r\n\r\nimport type { File as Asset, FilterCondition, Query } from '../../../../shared/contracts/files';\r\nimport type { Folder, FolderDefinition } from '../../../../shared/contracts/folders';\r\nimport type { AllowedTypes } from '../AssetCard/AssetCard';\r\n\r\nconst LoadingBody = styled(Flex)`\r\n  /* 80px are coming from the Tabs component that is not included in the ModalBody */\r\n  min-height: ${() => `calc(60vh + 8rem)`};\r\n`;\r\n\r\nexport interface FileRow extends Asset {\r\n  folderURL?: string;\r\n  isSelectable?: boolean;\r\n  type?: string;\r\n}\r\n\r\nexport interface FolderRow extends Folder {\r\n  folderURL?: string;\r\n  isSelectable?: boolean;\r\n  type?: string;\r\n}\r\n\r\ninterface AssetContentProps {\r\n  allowedTypes?: AllowedTypes[];\r\n  folderId?: number | null;\r\n  onClose: () => void;\r\n  onAddAsset: (arg?: { folderId: number | { id: number } | null | undefined }) => void;\r\n  onAddFolder: ({ folderId }: { folderId: number | { id: number } | null | undefined }) => void;\r\n  onChangeFolder: (folderId: number | null) => void;\r\n  onValidate: (selectedAssets: Asset[]) => void;\r\n  multiple?: boolean;\r\n  trackedLocation?: string;\r\n  initiallySelectedAssets?: Asset[];\r\n}\r\n\r\nexport const AssetContent = ({\r\n  allowedTypes = [],\r\n  folderId = null,\r\n  onClose,\r\n  onAddAsset,\r\n  onAddFolder,\r\n  onChangeFolder,\r\n  onValidate,\r\n  multiple = false,\r\n  initiallySelectedAssets = [],\r\n  trackedLocation,\r\n}: AssetContentProps) => {\r\n  const [assetToEdit, setAssetToEdit] = React.useState<FileWithType | undefined>(undefined);\r\n  const [folderToEdit, setFolderToEdit] = React.useState<FolderRow | undefined>(undefined);\r\n  const { formatMessage } = useIntl();\r\n  const {\r\n    canRead,\r\n    canCreate,\r\n    isLoading: isLoadingPermissions,\r\n    canUpdate,\r\n    canCopyLink,\r\n    canDownload,\r\n  } = useMediaLibraryPermissions();\r\n\r\n  const [\r\n    { queryObject },\r\n    {\r\n      onChangeFilters,\r\n      onChangePage,\r\n      onChangePageSize,\r\n      onChangeSort,\r\n      onChangeSearch,\r\n      onChangeFolder: onChangeFolderParam,\r\n    },\r\n  ] = useModalQueryParams({ folder: folderId });\r\n\r\n  const {\r\n    data: { pagination, results: assets } = {},\r\n    isLoading: isLoadingAssets,\r\n    error: errorAssets,\r\n  } = useAssets({ skipWhen: !canRead, query: queryObject });\r\n\r\n  const {\r\n    data: folders,\r\n    isLoading: isLoadingFolders,\r\n    error: errorFolders,\r\n  } = useFolders({\r\n    enabled: canRead && !containsAssetFilter(queryObject!) && pagination?.page === 1,\r\n    query: queryObject,\r\n  });\r\n\r\n  const [\r\n    selectedAssets,\r\n    { selectOne, selectOnly, setSelections, selectMultiple, deselectMultiple },\r\n  ] = useSelectionState(['id'], initiallySelectedAssets);\r\n\r\n  const handleSelectAllAssets = () => {\r\n    const allowedAssets = getAllowedFiles(allowedTypes, assets as AllowedFiles[]);\r\n\r\n    if (!multiple) {\r\n      return undefined;\r\n    }\r\n\r\n    // selected files in current folder\r\n    const alreadySelected = allowedAssets.filter(\r\n      (asset) => selectedAssets.findIndex((selectedAsset) => selectedAsset.id === asset.id) !== -1\r\n    );\r\n\r\n    if (alreadySelected.length > 0) {\r\n      deselectMultiple(alreadySelected);\r\n    } else {\r\n      selectMultiple(allowedAssets);\r\n    }\r\n  };\r\n\r\n  const handleSelectAsset = (asset: Asset | FileRow | FolderRow) => {\r\n    return multiple ? selectOne(asset as Asset) : selectOnly(asset as Asset);\r\n  };\r\n\r\n  const isLoading = isLoadingPermissions || isLoadingAssets || isLoadingFolders;\r\n  const hasError = errorAssets || errorFolders;\r\n\r\n  const [activeTab, setActiveTab] = React.useState(\r\n    selectedAssets.length > 0 ? 'selected' : 'browse'\r\n  );\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <>\r\n        <Modal.Header>\r\n          <Modal.Title>\r\n            {formatMessage({\r\n              id: getTrad('header.actions.add-assets'),\r\n              defaultMessage: 'Add new assets',\r\n            })}\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <LoadingBody justifyContent=\"center\" paddingTop={4} paddingBottom={4}>\r\n          <Loader>\r\n            {formatMessage({\r\n              id: getTrad('content.isLoading'),\r\n              defaultMessage: 'Content is loading.',\r\n            })}\r\n          </Loader>\r\n        </LoadingBody>\r\n        <DialogFooter onClose={onClose} />\r\n      </>\r\n    );\r\n  }\r\n\r\n  if (hasError) {\r\n    return (\r\n      <>\r\n        <Modal.Header>\r\n          <Modal.Title>\r\n            {formatMessage({\r\n              id: getTrad('header.actions.add-assets'),\r\n              defaultMessage: 'Add new assets',\r\n            })}\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Page.Error />\r\n        <DialogFooter onClose={onClose} />\r\n      </>\r\n    );\r\n  }\r\n\r\n  if (!canRead) {\r\n    return (\r\n      <>\r\n        <Modal.Header>\r\n          <Modal.Title>\r\n            {formatMessage({\r\n              id: getTrad('header.actions.add-assets'),\r\n              defaultMessage: 'Add new assets',\r\n            })}\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Page.NoPermissions />\r\n        <DialogFooter onClose={onClose} />\r\n      </>\r\n    );\r\n  }\r\n\r\n  if (assetToEdit) {\r\n    return (\r\n      <EditAssetContent\r\n        onClose={() => setAssetToEdit(undefined)}\r\n        asset={assetToEdit as EditAsset}\r\n        canUpdate={canUpdate}\r\n        canCopyLink={canCopyLink}\r\n        canDownload={canDownload}\r\n        trackedLocation={trackedLocation}\r\n      />\r\n    );\r\n  }\r\n\r\n  if (folderToEdit) {\r\n    return (\r\n      <EditFolderContent\r\n        folder={folderToEdit as FolderDefinition}\r\n        onClose={() => setFolderToEdit(undefined)}\r\n        location=\"content-manager\"\r\n        parentFolderId={queryObject?.folder as string | number | null | undefined}\r\n      />\r\n    );\r\n  }\r\n\r\n  const handleMoveItem = (hoverIndex: number, destIndex: number) => {\r\n    const offset = destIndex - hoverIndex;\r\n    const orderedAssetsClone = selectedAssets.slice();\r\n    const nextAssets = moveElement<Asset>(orderedAssetsClone, hoverIndex, offset);\r\n    setSelections(nextAssets);\r\n  };\r\n\r\n  const handleFolderChange = (folderId: number, folderPath?: string) => {\r\n    onChangeFolder(folderId);\r\n    if (onChangeFolderParam) {\r\n      onChangeFolderParam(folderId, folderPath);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal.Header>\r\n        <Modal.Title>\r\n          {formatMessage({\r\n            id: getTrad('header.actions.add-assets'),\r\n            defaultMessage: 'Add new assets',\r\n          })}\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n\r\n      <TabsRoot variant=\"simple\" value={activeTab} onValueChange={setActiveTab}>\r\n        <Flex paddingLeft={8} paddingRight={8} paddingTop={6} justifyContent=\"space-between\">\r\n          <Tabs.List>\r\n            <Tabs.Trigger value=\"browse\">\r\n              {formatMessage({\r\n                id: getTrad('modal.nav.browse'),\r\n                defaultMessage: 'Browse',\r\n              })}\r\n            </Tabs.Trigger>\r\n            <Tabs.Trigger value=\"selected\">\r\n              {formatMessage({\r\n                id: getTrad('modal.header.select-files'),\r\n                defaultMessage: 'Selected files',\r\n              })}\r\n              <Badge marginLeft={2}>{selectedAssets.length}</Badge>\r\n            </Tabs.Trigger>\r\n          </Tabs.List>\r\n          <Flex gap={2}>\r\n            <Button\r\n              variant=\"secondary\"\r\n              onClick={() => onAddFolder({ folderId: queryObject?.folder })}\r\n            >\r\n              {formatMessage({\r\n                id: getTrad('modal.upload-list.sub-header.add-folder'),\r\n                defaultMessage: 'Add folder',\r\n              })}\r\n            </Button>\r\n            <Button onClick={() => onAddAsset({ folderId: queryObject?.folder })}>\r\n              {formatMessage({\r\n                id: getTrad('modal.upload-list.sub-header.button'),\r\n                defaultMessage: 'Add more assets',\r\n              })}\r\n            </Button>\r\n          </Flex>\r\n        </Flex>\r\n        <Divider />\r\n        <Modal.Body>\r\n          <Tabs.Content value=\"browse\">\r\n            <BrowseStep\r\n              allowedTypes={allowedTypes}\r\n              assets={assets!}\r\n              canCreate={canCreate}\r\n              canRead={canRead}\r\n              folders={folders as FolderWithType[]}\r\n              onSelectAsset={handleSelectAsset}\r\n              selectedAssets={selectedAssets}\r\n              multiple={multiple}\r\n              onSelectAllAsset={handleSelectAllAssets}\r\n              onEditAsset={setAssetToEdit}\r\n              onEditFolder={setFolderToEdit}\r\n              pagination={pagination!}\r\n              queryObject={queryObject!}\r\n              onAddAsset={onAddAsset}\r\n              onChangeFilters={(filters: FilterCondition<string>[] | BrowseFilter[]) =>\r\n                onChangeFilters!(filters as FilterCondition<string>[])\r\n              }\r\n              onChangeFolder={handleFolderChange}\r\n              onChangePage={onChangePage!}\r\n              onChangePageSize={onChangePageSize!}\r\n              onChangeSort={(sort: string | undefined) => onChangeSort!(sort as Query['sort'])}\r\n              onChangeSearch={onChangeSearch!}\r\n            />\r\n          </Tabs.Content>\r\n          <Tabs.Content value=\"selected\">\r\n            <SelectedStep\r\n              selectedAssets={selectedAssets}\r\n              onSelectAsset={handleSelectAsset}\r\n              onReorderAsset={handleMoveItem}\r\n            />\r\n          </Tabs.Content>\r\n        </Modal.Body>\r\n      </TabsRoot>\r\n      <DialogFooter onClose={onClose} onValidate={() => onValidate(selectedAssets)} />\r\n    </>\r\n  );\r\n};\r\n\r\ninterface AssetDialogProps extends AssetContentProps {\r\n  open?: boolean;\r\n}\r\n\r\nexport const AssetDialog = ({ open = false, onClose, ...restProps }: AssetDialogProps) => {\r\n  return (\r\n    <Modal.Root open={open} onOpenChange={onClose}>\r\n      <Modal.Content>\r\n        <AssetContent onClose={onClose} {...restProps} />\r\n      </Modal.Content>\r\n    </Modal.Root>\r\n  );\r\n};\r\n\r\nconst TabsRoot = styled(Tabs.Root)`\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: hidden;\r\n`;\r\n", "import * as React from 'react';\r\n\r\nimport { useTracking } from '@strapi/admin/strapi-admin';\r\nimport { stringify } from 'qs';\r\n\r\nimport { useConfig } from './useConfig';\r\n\r\nimport type { Query, FilterCondition } from '../../../shared/contracts/files';\r\n\r\nexport const useModalQueryParams = (initialState?: Partial<Query>) => {\r\n  const { trackUsage } = useTracking();\r\n  const {\r\n    config: { data: config },\r\n  } = useConfig();\r\n\r\n  const [queryObject, setQueryObject] = React.useState<Query>({\r\n    page: 1,\r\n    sort: 'updatedAt:DESC',\r\n    pageSize: 10,\r\n    filters: {\r\n      $and: [],\r\n    },\r\n    ...initialState,\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    if (config && 'sort' in config && 'pageSize' in config) {\r\n      setQueryObject((prevQuery) => ({\r\n        ...prevQuery,\r\n        sort: config.sort,\r\n        pageSize: config.pageSize,\r\n      }));\r\n    }\r\n  }, [config]);\r\n\r\n  const handleChangeFilters = (nextFilters: FilterCondition<string>[]) => {\r\n    if (nextFilters) {\r\n      trackUsage('didFilterMediaLibraryElements', {\r\n        location: 'content-manager',\r\n        filter: Object.keys(nextFilters[nextFilters.length - 1])[0],\r\n      });\r\n      setQueryObject((prev) => ({ ...prev, page: 1, filters: { $and: nextFilters } }));\r\n    }\r\n  };\r\n\r\n  const handleChangePageSize = (pageSize: Query['pageSize']) => {\r\n    setQueryObject((prev) => ({\r\n      ...prev,\r\n      pageSize: typeof pageSize === 'string' ? parseInt(pageSize, 10) : pageSize,\r\n      page: 1,\r\n    }));\r\n  };\r\n\r\n  const handeChangePage = (page: Query['page']) => {\r\n    setQueryObject((prev) => ({ ...prev, page }));\r\n  };\r\n\r\n  const handleChangeSort = (sort: Query['sort']) => {\r\n    if (sort) {\r\n      trackUsage('didSortMediaLibraryElements', {\r\n        location: 'content-manager',\r\n        sort,\r\n      });\r\n      setQueryObject((prev) => ({ ...prev, sort }));\r\n    }\r\n  };\r\n\r\n  const handleChangeSearch = (_q: Query['_q'] | null) => {\r\n    if (_q) {\r\n      setQueryObject((prev) => ({ ...prev, _q, page: 1 }));\r\n    } else {\r\n      const newState: Query = { page: 1 };\r\n\r\n      Object.keys(queryObject).forEach((key) => {\r\n        if (!['page', '_q'].includes(key)) {\r\n          (newState as Record<string, string | number | undefined>)[key] = (\r\n            queryObject as Record<string, string | number | undefined>\r\n          )[key];\r\n        }\r\n      });\r\n\r\n      setQueryObject(newState);\r\n    }\r\n  };\r\n\r\n  const handleChangeFolder = (folder: Query['folder'], folderPath: Query['folderPath']) => {\r\n    setQueryObject((prev) => ({ ...prev, folder: folder ?? null, folderPath }));\r\n  };\r\n\r\n  return [\r\n    { queryObject, rawQuery: stringify(queryObject, { encode: false }) },\r\n    {\r\n      onChangeFilters: handleChangeFilters,\r\n      onChangeFolder: handleChangeFolder,\r\n      onChangePage: handeChangePage,\r\n      onChangePageSize: handleChangePageSize,\r\n      onChangeSort: handleChangeSort,\r\n      onChangeSearch: handleChangeSearch,\r\n    },\r\n  ];\r\n};\r\n", "import * as React from 'react';\r\n\r\nimport { Button, Popover } from '@strapi/design-system';\r\nimport { Filter } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { displayedFilters } from '../../../utils';\r\nimport { FilterList } from '../../FilterList/FilterList';\r\nimport { FilterPopover } from '../../FilterPopover/FilterPopover';\r\n\r\ntype NumberKeyedObject = Record<number, string>;\r\n\r\ntype StringFilter = {\r\n  [key: string]: string;\r\n};\r\n\r\ntype MimeFilter = {\r\n  [key: string]:\r\n    | string\r\n    | NumberKeyedObject\r\n    | Record<string, string | NumberKeyedObject>\r\n    | undefined;\r\n};\r\n\r\nexport type FilterStructure = {\r\n  [key: string]: MimeFilter | StringFilter | undefined;\r\n};\r\n\r\nexport type Filter = {\r\n  [key in 'mime' | 'createdAt' | 'updatedAt']?:\r\n    | {\r\n        [key in '$contains' | '$notContains' | '$eq' | '$not']?:\r\n          | string[]\r\n          | string\r\n          | { $contains: string[] };\r\n      }\r\n    | undefined;\r\n};\r\n\r\ninterface FiltersProps {\r\n  appliedFilters: FilterStructure[];\r\n  onChangeFilters: (filters: Filter[]) => void;\r\n}\r\n\r\nexport const Filters = ({ appliedFilters, onChangeFilters }: FiltersProps) => {\r\n  const [open, setOpen] = React.useState(false);\r\n  const { formatMessage } = useIntl();\r\n\r\n  return (\r\n    <Popover.Root open={open} onOpenChange={setOpen}>\r\n      <Popover.Trigger>\r\n        <Button variant=\"tertiary\" startIcon={<Filter />} size=\"S\">\r\n          {formatMessage({ id: 'app.utils.filters', defaultMessage: 'Filters' })}\r\n        </Button>\r\n      </Popover.Trigger>\r\n      <FilterPopover\r\n        onToggle={() => setOpen((prev) => !prev)}\r\n        displayedFilters={displayedFilters}\r\n        filters={appliedFilters}\r\n        onSubmit={onChangeFilters}\r\n      />\r\n\r\n      {appliedFilters && (\r\n        <FilterList\r\n          appliedFilters={appliedFilters}\r\n          filtersSchema={displayedFilters}\r\n          onRemoveFilter={onChangeFilters}\r\n        />\r\n      )}\r\n    </Popover.Root>\r\n  );\r\n};\r\n", "import { Box, Flex, SingleSelectOption, SingleSelect, Typography } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\n\r\ninterface PageSizeProps {\r\n  onChangePageSize: (value: number) => void;\r\n  pageSize: number;\r\n}\r\n\r\nexport const PageSize = ({ onChangePageSize, pageSize }: PageSizeProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  const handleChange = (value: string | number) => {\r\n    onChangePageSize(Number(value));\r\n  };\r\n\r\n  return (\r\n    <Flex>\r\n      <SingleSelect\r\n        size=\"S\"\r\n        aria-label={formatMessage({\r\n          id: 'components.PageFooter.select',\r\n          defaultMessage: 'Entries per page',\r\n        })}\r\n        onChange={handleChange}\r\n        value={pageSize.toString()}\r\n      >\r\n        <SingleSelectOption value=\"10\">10</SingleSelectOption>\r\n        <SingleSelectOption value=\"20\">20</SingleSelectOption>\r\n        <SingleSelectOption value=\"50\">50</SingleSelectOption>\r\n        <SingleSelectOption value=\"100\">100</SingleSelectOption>\r\n      </SingleSelect>\r\n      <Box paddingLeft={2}>\r\n        <Typography textColor=\"neutral600\" tag=\"label\" htmlFor=\"page-size\">\r\n          {formatMessage({\r\n            id: 'components.PageFooter.select',\r\n            defaultMessage: 'Entries per page',\r\n          })}\r\n        </Typography>\r\n      </Box>\r\n    </Flex>\r\n  );\r\n};\r\n", "import * as React from 'react';\r\n\r\nimport { Box, Flex } from '@strapi/design-system';\r\n\r\nconst PaginationContext = React.createContext({ activePage: 1, pageCount: 1 });\r\nexport const usePagination = () => React.useContext(PaginationContext);\r\n\r\ninterface PaginationProps {\r\n  activePage: number;\r\n  children: React.ReactNode;\r\n  label?: string;\r\n  pageCount: number;\r\n}\r\n\r\nexport const Pagination = ({\r\n  children,\r\n  activePage,\r\n  pageCount,\r\n  label = 'pagination',\r\n}: PaginationProps) => {\r\n  const paginationValue = React.useMemo(() => ({ activePage, pageCount }), [activePage, pageCount]);\r\n\r\n  return (\r\n    <PaginationContext.Provider value={paginationValue}>\r\n      <Box tag=\"nav\" aria-label={label}>\r\n        <Flex tag=\"ul\" gap={1}>\r\n          {children}\r\n        </Flex>\r\n      </Box>\r\n    </PaginationContext.Provider>\r\n  );\r\n};\r\n", "// TODO: find a better naming convention for the file that was an index file before\r\n/**\r\n * The component works as follows: this is a duplicate of the helper-plugin one but without the router\r\n * `1` , 2, 3, ... 10\r\n * 1, `2`, 3, ... 10\r\n * 1, 2, `3`, 4, ... 10\r\n * 1, 2, 3, `4`, 5, ... 10\r\n * 1, ..,4, `5`, 6, ... 10\r\n *\r\n * 1, ...., 8, 9, `10`\r\n * 1, ...., 8, `9`, 10\r\n * 1, ...., 7, `8`, 9, 10\r\n * 1, ... 6, `7`, 8, 9, 10\r\n */\r\nimport { Typography, VisuallyHidden } from '@strapi/design-system';\r\nimport { ChevronLeft, ChevronRight } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\nimport { styled, css } from 'styled-components';\r\n\r\nimport { Pagination, usePagination } from './Pagination';\r\n\r\nconst PaginationText = styled(Typography)`\r\n  line-height: revert;\r\n`;\r\n\r\nconst linkWrapperStyles = css<{ $active?: boolean }>`\r\n  padding: ${({ theme }) => theme.spaces[3]};\r\n  border-radius: ${({ theme }) => theme.borderRadius};\r\n  box-shadow: ${({ $active, theme }) => ($active ? theme.shadows.filterShadow : undefined)};\r\n  text-decoration: none;\r\n  display: flex;\r\n  position: relative;\r\n  outline: none;\r\n\r\n  &:after {\r\n    transition-property: all;\r\n    transition-duration: 0.2s;\r\n    border-radius: 8px;\r\n    content: '';\r\n    position: absolute;\r\n    top: -4px;\r\n    bottom: -4px;\r\n    left: -4px;\r\n    right: -4px;\r\n    border: 2px solid transparent;\r\n  }\r\n\r\n  &:focus-visible {\r\n    outline: none;\r\n\r\n    &:after {\r\n      border-radius: 8px;\r\n      content: '';\r\n      position: absolute;\r\n      top: -5px;\r\n      bottom: -5px;\r\n      left: -5px;\r\n      right: -5px;\r\n      border: 2px solid ${(props) => props.theme.colors.primary600};\r\n    }\r\n  }\r\n`;\r\n\r\nconst LinkWrapperButton = styled.button<{ $active?: boolean }>`\r\n  ${linkWrapperStyles}\r\n`;\r\n\r\nconst LinkWrapperDiv = styled.div<{ $active?: boolean }>`\r\n  ${linkWrapperStyles}\r\n`;\r\n\r\nLinkWrapperButton.defaultProps = { type: 'button' };\r\n\r\nconst PageLinkWrapper = styled(LinkWrapperButton)`\r\n  color: ${({ theme, $active }) => ($active ? theme.colors.primary700 : theme.colors.neutral800)};\r\n  background: ${({ theme, $active }) => ($active ? theme.colors.neutral0 : undefined)};\r\n\r\n  &:hover {\r\n    box-shadow: ${({ theme }) => theme.shadows.filterShadow};\r\n  }\r\n`;\r\n\r\nconst ActionLinkWrapper = styled(LinkWrapperButton)`\r\n  font-size: 1.1rem;\r\n  svg path {\r\n    fill: ${(p) => (p['aria-disabled'] ? p.theme.colors.neutral300 : p.theme.colors.neutral600)};\r\n  }\r\n\r\n  &:focus,\r\n  &:hover {\r\n    svg path {\r\n      fill: ${(p) => (p['aria-disabled'] ? p.theme.colors.neutral300 : p.theme.colors.neutral700)};\r\n    }\r\n  }\r\n\r\n  ${(p) =>\r\n    p['aria-disabled']\r\n      ? `\r\n  pointer-events: none;\r\n    `\r\n      : undefined}\r\n`;\r\n\r\nconst DotsWrapper = styled(LinkWrapperDiv)`\r\n  color: ${({ theme }) => theme.colors.neutral800};\r\n`;\r\n\r\ninterface PaginationLinkProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\r\n  children: React.ReactNode;\r\n}\r\n\r\ninterface PageLinkProps extends PaginationLinkProps {\r\n  number: number;\r\n}\r\n\r\nconst PreviousLink = ({ children, ...props }: PaginationLinkProps) => {\r\n  const { activePage } = usePagination();\r\n\r\n  const disabled = activePage === 1;\r\n\r\n  return (\r\n    <li>\r\n      <ActionLinkWrapper aria-disabled={disabled} tabIndex={disabled ? -1 : undefined} {...props}>\r\n        <VisuallyHidden>{children}</VisuallyHidden>\r\n        <ChevronLeft aria-hidden />\r\n      </ActionLinkWrapper>\r\n    </li>\r\n  );\r\n};\r\n\r\nconst NextLink = ({ children, ...props }: PaginationLinkProps) => {\r\n  const { activePage, pageCount } = usePagination();\r\n\r\n  const disabled = activePage === pageCount;\r\n\r\n  return (\r\n    <li>\r\n      <ActionLinkWrapper aria-disabled={disabled} tabIndex={disabled ? -1 : undefined} {...props}>\r\n        <VisuallyHidden>{children}</VisuallyHidden>\r\n        <ChevronRight aria-hidden />\r\n      </ActionLinkWrapper>\r\n    </li>\r\n  );\r\n};\r\n\r\nconst PageLink = ({ number, children, ...props }: PageLinkProps) => {\r\n  const { activePage } = usePagination();\r\n\r\n  const isActive = activePage === number;\r\n\r\n  return (\r\n    <li>\r\n      <PageLinkWrapper {...props} $active={isActive}>\r\n        <VisuallyHidden>{children}</VisuallyHidden>\r\n        <PaginationText aria-hidden variant=\"pi\" fontWeight={isActive ? 'bold' : ''}>\r\n          {number}\r\n        </PaginationText>\r\n      </PageLinkWrapper>\r\n    </li>\r\n  );\r\n};\r\n\r\ninterface DotsProps extends React.HTMLAttributes<HTMLDivElement> {\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst Dots = ({ children, ...props }: DotsProps) => (\r\n  <li>\r\n    <DotsWrapper {...props} as=\"div\">\r\n      <VisuallyHidden>{children}</VisuallyHidden>\r\n      <PaginationText aria-hidden small>\r\n        …\r\n      </PaginationText>\r\n    </DotsWrapper>\r\n  </li>\r\n);\r\n\r\ninterface PaginationFooterProps {\r\n  activePage: number;\r\n  onChangePage: (page: number) => void;\r\n  pagination: {\r\n    pageCount: number;\r\n  };\r\n}\r\n\r\nexport const PaginationFooter = ({\r\n  activePage,\r\n  onChangePage,\r\n  pagination: { pageCount },\r\n}: PaginationFooterProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  const previousActivePage = activePage - 1;\r\n  const nextActivePage = activePage + 1;\r\n\r\n  const firstLinks = [\r\n    <PageLink\r\n      key={1}\r\n      number={1}\r\n      onClick={() => {\r\n        onChangePage(1);\r\n      }}\r\n    >\r\n      {formatMessage(\r\n        { id: 'components.pagination.go-to', defaultMessage: 'Go to page {page}' },\r\n        { page: 1 }\r\n      )}\r\n    </PageLink>,\r\n  ];\r\n\r\n  if (pageCount <= 4) {\r\n    const links = Array.from({ length: pageCount })\r\n      .map((_, i) => i + 1)\r\n      .map((number) => {\r\n        return (\r\n          <PageLink key={number} number={number} onClick={() => onChangePage(number)}>\r\n            {formatMessage(\r\n              { id: 'components.pagination.go-to', defaultMessage: 'Go to page {page}' },\r\n              { page: number }\r\n            )}\r\n          </PageLink>\r\n        );\r\n      });\r\n\r\n    return (\r\n      <Pagination activePage={activePage} pageCount={pageCount}>\r\n        <PreviousLink onClick={() => onChangePage(previousActivePage)}>\r\n          {formatMessage({\r\n            id: 'components.pagination.go-to-previous',\r\n            defaultMessage: 'Go to previous page',\r\n          })}\r\n        </PreviousLink>\r\n        {links}\r\n        <NextLink onClick={() => onChangePage(nextActivePage)}>\r\n          {formatMessage({\r\n            id: 'components.pagination.go-to-next',\r\n            defaultMessage: 'Go to next page',\r\n          })}\r\n        </NextLink>\r\n      </Pagination>\r\n    );\r\n  }\r\n\r\n  let firstLinksToCreate: number[] = [];\r\n  const lastLinks: JSX.Element[] = [];\r\n  let lastLinksToCreate: number[] = [];\r\n  const middleLinks: JSX.Element[] = [];\r\n\r\n  if (pageCount > 1) {\r\n    lastLinks.push(\r\n      <PageLink key={pageCount} number={pageCount} onClick={() => onChangePage(pageCount)}>\r\n        {formatMessage(\r\n          { id: 'components.pagination.go-to', defaultMessage: 'Go to page {page}' },\r\n          { page: pageCount }\r\n        )}\r\n      </PageLink>\r\n    );\r\n  }\r\n\r\n  if (activePage === 1 && pageCount >= 3) {\r\n    firstLinksToCreate = [2];\r\n  }\r\n\r\n  if (activePage === 2 && pageCount >= 3) {\r\n    if (pageCount === 5) {\r\n      firstLinksToCreate = [2, 3, 4];\r\n    } else if (pageCount === 3) {\r\n      firstLinksToCreate = [2];\r\n    } else {\r\n      firstLinksToCreate = [2, 3];\r\n    }\r\n  }\r\n\r\n  if (activePage === 4 && pageCount >= 3) {\r\n    firstLinksToCreate = [2];\r\n  }\r\n\r\n  if (activePage === pageCount && pageCount >= 3) {\r\n    lastLinksToCreate = [pageCount - 1];\r\n  }\r\n\r\n  if (activePage === pageCount - 2 && pageCount > 3) {\r\n    lastLinksToCreate = [activePage + 1, activePage, activePage - 1];\r\n  }\r\n\r\n  if (activePage === pageCount - 3 && pageCount > 3 && activePage > 5) {\r\n    lastLinksToCreate = [activePage + 2, activePage + 1, activePage, activePage - 1];\r\n  }\r\n\r\n  if (activePage === pageCount - 1 && pageCount > 3) {\r\n    lastLinksToCreate = [activePage, activePage - 1];\r\n  }\r\n\r\n  lastLinksToCreate.forEach((number) => {\r\n    lastLinks.unshift(\r\n      <PageLink key={number} number={number} onClick={() => onChangePage(number)}>\r\n        Go to page {number}\r\n      </PageLink>\r\n    );\r\n  });\r\n\r\n  firstLinksToCreate.forEach((number) => {\r\n    firstLinks.push(\r\n      <PageLink key={number} number={number} onClick={() => onChangePage(number)}>\r\n        {formatMessage(\r\n          { id: 'components.pagination.go-to', defaultMessage: 'Go to page {page}' },\r\n          { page: number }\r\n        )}\r\n      </PageLink>\r\n    );\r\n  });\r\n\r\n  if (\r\n    ![1, 2].includes(activePage) &&\r\n    activePage <= pageCount - 3 &&\r\n    firstLinks.length + lastLinks.length < 6\r\n  ) {\r\n    const middleLinksToCreate = [activePage - 1, activePage, activePage + 1];\r\n\r\n    middleLinksToCreate.forEach((number) => {\r\n      middleLinks.push(\r\n        <PageLink key={number} number={number} onClick={() => onChangePage(number)}>\r\n          {formatMessage(\r\n            { id: 'components.pagination.go-to', defaultMessage: 'Go to page {page}' },\r\n            { page: number }\r\n          )}\r\n        </PageLink>\r\n      );\r\n    });\r\n  }\r\n\r\n  const shouldShowDotsAfterFirstLink =\r\n    pageCount > 5 || (pageCount === 5 && (activePage === 1 || activePage === 5));\r\n  const shouldShowMiddleDots = middleLinks.length > 2 && activePage > 4 && pageCount > 5;\r\n\r\n  const beforeDotsLinksLength = shouldShowMiddleDots\r\n    ? pageCount - activePage - 1\r\n    : pageCount - firstLinks.length - lastLinks.length;\r\n  const afterDotsLength = shouldShowMiddleDots\r\n    ? pageCount - firstLinks.length - lastLinks.length\r\n    : pageCount - activePage - 1;\r\n\r\n  return (\r\n    <Pagination activePage={activePage} pageCount={pageCount}>\r\n      <PreviousLink onClick={() => onChangePage(previousActivePage)}>\r\n        {formatMessage({\r\n          id: 'components.pagination.go-to-previous',\r\n          defaultMessage: 'Go to previous page',\r\n        })}\r\n      </PreviousLink>\r\n      {firstLinks}\r\n      {shouldShowMiddleDots && (\r\n        <Dots>\r\n          {formatMessage(\r\n            {\r\n              id: 'components.pagination.remaining-links',\r\n              defaultMessage: 'And {number} other links',\r\n            },\r\n            { number: beforeDotsLinksLength }\r\n          )}\r\n        </Dots>\r\n      )}\r\n      {middleLinks}\r\n      {shouldShowDotsAfterFirstLink && (\r\n        <Dots>\r\n          {formatMessage(\r\n            {\r\n              id: 'components.pagination.remaining-links',\r\n              defaultMessage: 'And {number} other links',\r\n            },\r\n            { number: afterDotsLength }\r\n          )}\r\n        </Dots>\r\n      )}\r\n      {lastLinks}\r\n      <NextLink onClick={() => onChangePage(nextActivePage)}>\r\n        {formatMessage({\r\n          id: 'components.pagination.go-to-next',\r\n          defaultMessage: 'Go to next page',\r\n        })}\r\n      </NextLink>\r\n    </Pagination>\r\n  );\r\n};\r\n", "// TODO: find a better naming convention for the file that was an index file before\r\nimport * as React from 'react';\r\n\r\nimport { useTracking } from '@strapi/admin/strapi-admin';\r\nimport { IconButton, Searchbar, SearchForm } from '@strapi/design-system';\r\nimport { Search } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { getTrad } from '../../../../utils';\r\n\r\nimport type { Query } from '../../../../../../shared/contracts/files';\r\n\r\ninterface SearchAssetProps {\r\n  onChangeSearch: (_q: Query['_q'] | null) => void;\r\n  queryValue?: Query['_q'] | null;\r\n}\r\n\r\nexport const SearchAsset = ({ onChangeSearch, queryValue = null }: SearchAssetProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const { trackUsage } = useTracking();\r\n  const [isOpen, setIsOpen] = React.useState(!!queryValue);\r\n  const [value, setValue] = React.useState(queryValue || '');\r\n  const wrapperRef = React.useRef<HTMLDivElement>(null);\r\n\r\n  React.useLayoutEffect(() => {\r\n    if (isOpen) {\r\n      setTimeout(() => {\r\n        wrapperRef.current?.querySelector('input')?.focus();\r\n      }, 0);\r\n    }\r\n  }, [isOpen]);\r\n\r\n  const handleToggle = () => {\r\n    setIsOpen((prev) => !prev);\r\n  };\r\n\r\n  const handleClear = () => {\r\n    handleToggle();\r\n    onChangeSearch(null);\r\n  };\r\n\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n\r\n    trackUsage('didSearchMediaLibraryElements', { location: 'content-manager' });\r\n    onChangeSearch(value);\r\n  };\r\n\r\n  if (isOpen) {\r\n    return (\r\n      <div ref={wrapperRef}>\r\n        <SearchForm onSubmit={handleSubmit}>\r\n          <Searchbar\r\n            name=\"search\"\r\n            onClear={handleClear}\r\n            onChange={(e) => setValue(e.target.value)}\r\n            clearLabel={formatMessage({\r\n              id: getTrad('search.clear.label'),\r\n              defaultMessage: 'Clear the search',\r\n            })}\r\n            aria-label=\"search\"\r\n            size=\"S\"\r\n            value={value}\r\n            placeholder={formatMessage({\r\n              id: getTrad('search.placeholder'),\r\n              defaultMessage: 'e.g: the first dog on the moon',\r\n            })}\r\n          >\r\n            {formatMessage({ id: getTrad('search.label'), defaultMessage: 'Search for an asset' })}\r\n          </Searchbar>\r\n        </SearchForm>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <IconButton label=\"Search\" onClick={handleToggle}>\r\n      <Search />\r\n    </IconButton>\r\n  );\r\n};\r\n", "export const isSelectable = (allowedTypes: string[], mime = '') => {\r\n  if (!mime) return false;\r\n\r\n  const fileType = mime.split('/')[0];\r\n\r\n  return (\r\n    allowedTypes.includes(fileType) ||\r\n    (allowedTypes.includes('file') && !['video', 'image', 'audio'].includes(fileType))\r\n  );\r\n};\r\n", "// TODO: find a better naming convention for the file that was an index file before\r\nimport {\r\n  Checkbox,\r\n  Box,\r\n  Button,\r\n  Divider,\r\n  Flex,\r\n  IconButton,\r\n  Typography,\r\n  VisuallyHidden,\r\n  Grid,\r\n} from '@strapi/design-system';\r\nimport { GridFour as GridIcon, List, Pencil, Plus } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { localStorageKeys, viewOptions } from '../../../constants';\r\nimport { useFolder } from '../../../hooks/useFolder';\r\nimport { usePersistentState } from '../../../hooks/usePersistentState';\r\nimport {\r\n  getBreadcrumbDataCM,\r\n  toSingularTypes,\r\n  getTrad,\r\n  getAllowedFiles,\r\n  BreadcrumbDataFolder,\r\n  AllowedFiles,\r\n} from '../../../utils';\r\nimport { AssetGridList } from '../../AssetGridList/AssetGridList';\r\nimport { Breadcrumbs } from '../../Breadcrumbs/Breadcrumbs';\r\nimport { EmptyAssets } from '../../EmptyAssets/EmptyAssets';\r\nimport { FolderCard } from '../../FolderCard/FolderCard/FolderCard';\r\nimport { FolderCardBody } from '../../FolderCard/FolderCardBody/FolderCardBody';\r\nimport { FolderCardBodyAction } from '../../FolderCard/FolderCardBodyAction/FolderCardBodyAction';\r\nimport { FolderGridList } from '../../FolderGridList/FolderGridList';\r\nimport { SortPicker } from '../../SortPicker/SortPicker';\r\nimport { TableList, FolderRow, FileRow } from '../../TableList/TableList';\r\n\r\nimport { Filters, FilterStructure as ImportedFilterStructure } from './Filters';\r\nimport { PageSize } from './PageSize';\r\nimport { PaginationFooter } from './PaginationFooter/PaginationFooter';\r\nimport { SearchAsset } from './SearchAsset/SearchAsset';\r\nimport { isSelectable } from './utils/isSelectable';\r\n\r\nimport type { File, Query, FilterCondition } from '../../../../../shared/contracts/files';\r\nimport type { Folder } from '../../../../../shared/contracts/folders';\r\nimport type { AllowedTypes } from '../../AssetCard/AssetCard';\r\n\r\nconst TypographyMaxWidth = styled(Typography)`\r\n  max-width: 100%;\r\n`;\r\n\r\nconst ActionContainer = styled(Box)`\r\n  svg {\r\n    path {\r\n      fill: ${({ theme }) => theme.colors.neutral500};\r\n    }\r\n  }\r\n`;\r\n\r\ntype NumberKeyedObject = Record<number, string>;\r\n\r\ntype StringFilter = {\r\n  [key: string]: string;\r\n};\r\n\r\ntype MimeFilter = {\r\n  [key: string]:\r\n    | string\r\n    | NumberKeyedObject\r\n    | Record<string, string | NumberKeyedObject>\r\n    | undefined;\r\n};\r\n\r\nexport type FilterStructure = {\r\n  [key: string]: MimeFilter | StringFilter | undefined;\r\n};\r\n\r\nexport type Filter = {\r\n  [key in 'mime' | 'createdAt' | 'updatedAt']?:\r\n    | {\r\n        [key in '$contains' | '$notContains' | '$eq' | '$not']?:\r\n          | string[]\r\n          | string\r\n          | { $contains: string[] };\r\n      }\r\n    | undefined;\r\n};\r\n\r\nexport interface FolderWithType extends Omit<Folder, 'children' | 'files'> {\r\n  folderURL?: string;\r\n  isSelectable?: boolean;\r\n  type?: string;\r\n  children?: Folder['children'] & {\r\n    count: number;\r\n  };\r\n  files?: Folder['files'] & {\r\n    count: number;\r\n  };\r\n}\r\n\r\nexport interface FileWithType extends File {\r\n  folderURL?: string;\r\n  isSelectable?: boolean;\r\n  type?: string;\r\n}\r\n\r\nexport interface BrowseStepProps {\r\n  allowedTypes?: AllowedTypes[];\r\n  assets: File[];\r\n  canCreate: boolean;\r\n  canRead: boolean;\r\n  folders?: FolderWithType[];\r\n  multiple?: boolean;\r\n  onAddAsset: () => void;\r\n  onChangeFilters: (filters: FilterCondition<string>[] | Filter[]) => void;\r\n  onChangeFolder: (id: number, path?: string) => void;\r\n  onChangePage: (page: number) => void;\r\n  onChangePageSize: (value: number) => void;\r\n  onChangeSort: (value: Query['sort'] | string) => void;\r\n  onChangeSearch: (_q?: Query['_q'] | null) => void;\r\n  onEditAsset: ((asset: FileWithType) => void) | null;\r\n  onEditFolder: ((folder: FolderRow) => void) | null;\r\n  onSelectAsset: (element: FileRow | FolderRow) => void;\r\n  onSelectAllAsset?: (checked: boolean | string, rows?: FolderRow[] | FileRow[]) => void;\r\n  queryObject: Query;\r\n  pagination: { pageCount: number };\r\n  selectedAssets: FileWithType[] | FolderWithType[];\r\n}\r\n\r\nexport const BrowseStep = ({\r\n  allowedTypes = [],\r\n  assets: rawAssets,\r\n  canCreate,\r\n  canRead,\r\n  folders = [],\r\n  multiple = false,\r\n  onAddAsset,\r\n  onChangeFilters,\r\n  onChangePage,\r\n  onChangePageSize,\r\n  onChangeSearch,\r\n  onChangeSort,\r\n  onChangeFolder,\r\n  onEditAsset,\r\n  onEditFolder,\r\n  onSelectAllAsset,\r\n  onSelectAsset,\r\n  pagination,\r\n  queryObject,\r\n  selectedAssets,\r\n}: BrowseStepProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const [view, setView] = usePersistentState(localStorageKeys.modalView, viewOptions.GRID);\r\n  const isGridView = view === viewOptions.GRID;\r\n\r\n  const { data: currentFolder, isLoading: isCurrentFolderLoading } = useFolder(\r\n    queryObject?.folder as number | null | undefined,\r\n    {\r\n      enabled: canRead && !!queryObject?.folder,\r\n    }\r\n  );\r\n\r\n  const singularTypes = toSingularTypes(allowedTypes);\r\n  const assets = rawAssets.map((asset) => ({\r\n    ...asset,\r\n    isSelectable: isSelectable(singularTypes, asset?.mime),\r\n    type: 'asset',\r\n  }));\r\n\r\n  const breadcrumbs = !isCurrentFolderLoading\r\n    ? getBreadcrumbDataCM(currentFolder as BreadcrumbDataFolder)\r\n    : undefined;\r\n\r\n  const allAllowedAsset = getAllowedFiles(allowedTypes, assets as AllowedFiles[]);\r\n  const areAllAssetSelected =\r\n    allAllowedAsset.length > 0 &&\r\n    selectedAssets.length > 0 &&\r\n    allAllowedAsset.every(\r\n      (asset) => selectedAssets.findIndex((currAsset) => currAsset.id === asset.id) !== -1\r\n    );\r\n  const hasSomeAssetSelected = allAllowedAsset.some(\r\n    (asset) => selectedAssets.findIndex((currAsset) => currAsset.id === asset.id) !== -1\r\n  );\r\n  const isSearching = !!queryObject?._q;\r\n  const isFiltering = !!queryObject?.filters?.$and?.length && queryObject.filters.$and.length > 0;\r\n  const isSearchingOrFiltering = isSearching || isFiltering;\r\n  const assetCount = assets.length;\r\n  const folderCount = folders.length;\r\n  const handleClickFolderCard = (...args: Parameters<typeof onChangeFolder>) => {\r\n    // Search query will always fetch the same results\r\n    // we remove it here to allow navigating in a folder and see the result of this navigation\r\n    onChangeSearch('');\r\n    onChangeFolder(...args);\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      {onSelectAllAsset && (\r\n        <Box paddingBottom={4}>\r\n          <Flex justifyContent=\"space-between\" alignItems=\"flex-start\">\r\n            {(assetCount > 0 || folderCount > 0 || isFiltering) && (\r\n              <Flex gap={2} wrap=\"wrap\">\r\n                {multiple && isGridView && (\r\n                  <Flex\r\n                    paddingLeft={2}\r\n                    paddingRight={2}\r\n                    background=\"neutral0\"\r\n                    hasRadius\r\n                    borderColor=\"neutral200\"\r\n                    height=\"3.2rem\"\r\n                  >\r\n                    <Checkbox\r\n                      aria-label={formatMessage({\r\n                        id: getTrad('bulk.select.label'),\r\n                        defaultMessage: 'Select all assets',\r\n                      })}\r\n                      checked={\r\n                        !areAllAssetSelected && hasSomeAssetSelected\r\n                          ? 'indeterminate'\r\n                          : areAllAssetSelected\r\n                      }\r\n                      onCheckedChange={onSelectAllAsset}\r\n                    />\r\n                  </Flex>\r\n                )}\r\n                {isGridView && <SortPicker onChangeSort={onChangeSort} value={queryObject?.sort} />}\r\n                <Filters\r\n                  appliedFilters={queryObject?.filters?.$and as ImportedFilterStructure[]}\r\n                  onChangeFilters={onChangeFilters}\r\n                />\r\n              </Flex>\r\n            )}\r\n\r\n            {(assetCount > 0 || folderCount > 0 || isSearching) && (\r\n              <Flex marginLeft=\"auto\" shrink={0} gap={2}>\r\n                <ActionContainer paddingTop={1} paddingBottom={1}>\r\n                  <IconButton\r\n                    label={\r\n                      isGridView\r\n                        ? formatMessage({\r\n                            id: 'view-switch.list',\r\n                            defaultMessage: 'List View',\r\n                          })\r\n                        : formatMessage({\r\n                            id: 'view-switch.grid',\r\n                            defaultMessage: 'Grid View',\r\n                          })\r\n                    }\r\n                    onClick={() => setView(isGridView ? viewOptions.LIST : viewOptions.GRID)}\r\n                  >\r\n                    {isGridView ? <List /> : <GridIcon />}\r\n                  </IconButton>\r\n                </ActionContainer>\r\n                <SearchAsset onChangeSearch={onChangeSearch} queryValue={queryObject._q || ''} />\r\n              </Flex>\r\n            )}\r\n          </Flex>\r\n        </Box>\r\n      )}\r\n\r\n      {canRead && breadcrumbs?.length && breadcrumbs.length > 0 && currentFolder && (\r\n        <Box paddingTop={3}>\r\n          <Breadcrumbs\r\n            onChangeFolder={onChangeFolder}\r\n            label={formatMessage({\r\n              id: getTrad('header.breadcrumbs.nav.label'),\r\n              defaultMessage: 'Folders navigation',\r\n            })}\r\n            breadcrumbs={breadcrumbs as BreadcrumbDataFolder[]}\r\n            currentFolderId={queryObject?.folder as number | undefined}\r\n          />\r\n        </Box>\r\n      )}\r\n\r\n      {assetCount === 0 && folderCount === 0 && (\r\n        <Box paddingBottom={6}>\r\n          <EmptyAssets\r\n            size=\"S\"\r\n            count={6}\r\n            action={\r\n              canCreate &&\r\n              !isFiltering &&\r\n              !isSearching && (\r\n                <Button variant=\"secondary\" startIcon={<Plus />} onClick={onAddAsset}>\r\n                  {formatMessage({\r\n                    id: getTrad('header.actions.add-assets'),\r\n                    defaultMessage: 'Add new assets',\r\n                  })}\r\n                </Button>\r\n              )\r\n            }\r\n            content={\r\n              // eslint-disable-next-line no-nested-ternary\r\n              isSearchingOrFiltering\r\n                ? formatMessage({\r\n                    id: getTrad('list.assets-empty.title-withSearch'),\r\n                    defaultMessage: 'There are no assets with the applied filters',\r\n                  })\r\n                : canCreate && !isSearching\r\n                  ? formatMessage({\r\n                      id: getTrad('list.assets.empty'),\r\n                      defaultMessage: 'Upload your first assets...',\r\n                    })\r\n                  : formatMessage({\r\n                      id: getTrad('list.assets.empty.no-permissions'),\r\n                      defaultMessage: 'The asset list is empty',\r\n                    })\r\n            }\r\n          />\r\n        </Box>\r\n      )}\r\n\r\n      {!isGridView && (folderCount > 0 || assetCount > 0) && (\r\n        <TableList\r\n          allowedTypes={allowedTypes}\r\n          assetCount={assetCount}\r\n          folderCount={folderCount}\r\n          indeterminate={!areAllAssetSelected && hasSomeAssetSelected}\r\n          isFolderSelectionAllowed={false}\r\n          onChangeSort={onChangeSort}\r\n          onChangeFolder={handleClickFolderCard}\r\n          onEditAsset={onEditAsset}\r\n          onEditFolder={onEditFolder}\r\n          onSelectOne={onSelectAsset}\r\n          onSelectAll={onSelectAllAsset!}\r\n          rows={\r\n            [...folders.map((folder) => ({ ...folder, type: 'folder' })), ...assets] as\r\n              | FolderRow[]\r\n              | FileRow[]\r\n          }\r\n          selected={selectedAssets}\r\n          shouldDisableBulkSelect={!multiple}\r\n          sortQuery={queryObject?.sort ?? ''}\r\n        />\r\n      )}\r\n\r\n      {isGridView && (\r\n        <>\r\n          {folderCount > 0 && (\r\n            <FolderGridList\r\n              title={\r\n                (((isSearchingOrFiltering && assetCount > 0) || !isSearchingOrFiltering) &&\r\n                  formatMessage(\r\n                    {\r\n                      id: getTrad('list.folders.title'),\r\n                      defaultMessage: 'Folders ({count})',\r\n                    },\r\n                    { count: folderCount }\r\n                  )) ||\r\n                ''\r\n              }\r\n            >\r\n              {folders.map((folder) => {\r\n                return (\r\n                  <Grid.Item\r\n                    col={3}\r\n                    key={`folder-${folder.id}`}\r\n                    direction=\"column\"\r\n                    alignItems=\"stretch\"\r\n                  >\r\n                    <FolderCard\r\n                      ariaLabel={folder.name}\r\n                      id={`folder-${folder.id}`}\r\n                      onClick={() => handleClickFolderCard(folder.id, folder.path)}\r\n                      cardActions={\r\n                        onEditFolder && (\r\n                          <IconButton\r\n                            withTooltip={false}\r\n                            label={formatMessage({\r\n                              id: getTrad('list.folder.edit'),\r\n                              defaultMessage: 'Edit folder',\r\n                            })}\r\n                            onClick={() => onEditFolder(folder)}\r\n                          >\r\n                            <Pencil />\r\n                          </IconButton>\r\n                        )\r\n                      }\r\n                    >\r\n                      <FolderCardBody>\r\n                        <FolderCardBodyAction\r\n                          onClick={() => handleClickFolderCard(folder.id, folder.path)}\r\n                        >\r\n                          <Flex tag=\"h2\" direction=\"column\" alignItems=\"start\" maxWidth=\"100%\">\r\n                            <TypographyMaxWidth\r\n                              fontWeight=\"semiBold\"\r\n                              ellipsis\r\n                              textColor=\"neutral800\"\r\n                            >\r\n                              {folder.name}\r\n                              {/* VisuallyHidden dash here allows to separate folder title and count informations\r\n                              for voice reading structure purpose */}\r\n                              <VisuallyHidden>-</VisuallyHidden>\r\n                            </TypographyMaxWidth>\r\n                            <TypographyMaxWidth\r\n                              tag=\"span\"\r\n                              textColor=\"neutral600\"\r\n                              variant=\"pi\"\r\n                              ellipsis\r\n                            >\r\n                              {formatMessage(\r\n                                {\r\n                                  id: getTrad('list.folder.subtitle'),\r\n                                  defaultMessage:\r\n                                    '{folderCount, plural, =0 {# folder} one {# folder} other {# folders}}, {filesCount, plural, =0 {# asset} one {# asset} other {# assets}}',\r\n                                },\r\n                                {\r\n                                  folderCount: folder.children?.count,\r\n                                  filesCount: folder.files?.count,\r\n                                }\r\n                              )}\r\n                            </TypographyMaxWidth>\r\n                          </Flex>\r\n                        </FolderCardBodyAction>\r\n                      </FolderCardBody>\r\n                    </FolderCard>\r\n                  </Grid.Item>\r\n                );\r\n              })}\r\n            </FolderGridList>\r\n          )}\r\n\r\n          {assetCount > 0 && folderCount > 0 && (\r\n            <Box paddingTop={6}>\r\n              <Divider />\r\n            </Box>\r\n          )}\r\n\r\n          {assetCount > 0 && (\r\n            <Box paddingTop={6}>\r\n              <AssetGridList\r\n                allowedTypes={allowedTypes}\r\n                size=\"S\"\r\n                assets={assets}\r\n                onSelectAsset={onSelectAsset}\r\n                selectedAssets={selectedAssets as FileWithType[]}\r\n                onEditAsset={onEditAsset!}\r\n                title={\r\n                  ((!isSearchingOrFiltering || (isSearchingOrFiltering && folderCount > 0)) &&\r\n                    queryObject.page === 1 &&\r\n                    formatMessage(\r\n                      {\r\n                        id: getTrad('list.assets.title'),\r\n                        defaultMessage: 'Assets ({count})',\r\n                      },\r\n                      { count: assetCount }\r\n                    )) ||\r\n                  ''\r\n                }\r\n              />\r\n            </Box>\r\n          )}\r\n        </>\r\n      )}\r\n\r\n      {pagination.pageCount > 0 && (\r\n        <Flex justifyContent=\"space-between\" paddingTop={4} position=\"relative\" zIndex={1}>\r\n          <PageSize\r\n            pageSize={queryObject.pageSize! as number}\r\n            onChangePageSize={onChangePageSize}\r\n          />\r\n          <PaginationFooter\r\n            activePage={queryObject.page as number}\r\n            onChangePage={onChangePage}\r\n            pagination={pagination}\r\n          />\r\n        </Flex>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n", "import { Button, Modal } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\n\r\ninterface DialogFooterProps {\r\n  onClose: () => void;\r\n  onValidate?: () => void;\r\n}\r\n\r\nexport const DialogFooter = ({ onClose, onValidate }: DialogFooterProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  return (\r\n    <Modal.Footer>\r\n      <Button onClick={onClose} variant=\"tertiary\">\r\n        {formatMessage({ id: 'app.components.Button.cancel', defaultMessage: 'Cancel' })}\r\n      </Button>\r\n      {onValidate && (\r\n        <Button onClick={onValidate}>\r\n          {formatMessage({ id: 'global.finish', defaultMessage: 'Finish' })}\r\n        </Button>\r\n      )}\r\n    </Modal.Footer>\r\n  );\r\n};\r\n", "// TODO: find a better naming convention for the file that was an index file before\r\nimport { Flex, Typography } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { getTrad } from '../../../utils';\r\nimport { AssetGridList } from '../../AssetGridList/AssetGridList';\r\n\r\nimport type { File } from '../../../../../shared/contracts/files';\r\n\r\ninterface SelectedStepProps {\r\n  onSelectAsset: (asset: File) => void;\r\n  selectedAssets: File[];\r\n  onReorderAsset?: (fromIndex: number, toIndex: number) => void;\r\n}\r\n\r\nexport const SelectedStep = ({\r\n  selectedAssets,\r\n  onSelectAsset,\r\n  onReorderAsset,\r\n}: SelectedStepProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  return (\r\n    <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\r\n      <Flex gap={0} direction=\"column\" alignItems=\"start\">\r\n        <Typography variant=\"pi\" fontWeight=\"bold\" textColor=\"neutral800\">\r\n          {formatMessage(\r\n            {\r\n              id: getTrad('list.assets.to-upload'),\r\n              defaultMessage:\r\n                '{number, plural, =0 {No asset} one {1 asset} other {# assets}} ready to upload',\r\n            },\r\n            { number: selectedAssets.length }\r\n          )}\r\n        </Typography>\r\n        <Typography variant=\"pi\" textColor=\"neutral600\">\r\n          {formatMessage({\r\n            id: getTrad('modal.upload-list.sub-header-subtitle'),\r\n            defaultMessage: 'Manage the assets before adding them to the Media Library',\r\n          })}\r\n        </Typography>\r\n      </Flex>\r\n\r\n      <AssetGridList\r\n        size=\"S\"\r\n        assets={selectedAssets}\r\n        onSelectAsset={onSelectAsset}\r\n        selectedAssets={selectedAssets}\r\n        onReorderAsset={onReorderAsset}\r\n      />\r\n    </Flex>\r\n  );\r\n};\r\n", "// TODO: find a better naming convention for the file that was an index file before\r\nimport * as React from 'react';\r\n\r\nimport { useField, useNotification } from '@strapi/admin/strapi-admin';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { getTrad, getAllowedFiles, AllowedFiles } from '../../utils';\r\nimport { AssetDialog } from '../AssetDialog/AssetDialog';\r\nimport { EditFolderDialog } from '../EditFolderDialog/EditFolderDialog';\r\nimport { UploadAssetDialog, Asset } from '../UploadAssetDialog/UploadAssetDialog';\r\n\r\nimport { CarouselAssets, CarouselAssetsProps, FileWithoutIdHash } from './Carousel/CarouselAssets';\r\n\r\nimport type { File } from '../../../../shared/contracts/files';\r\ntype AllowedTypes = 'files' | 'images' | 'videos' | 'audios';\r\n\r\nconst STEPS = {\r\n  AssetSelect: 'SelectAsset',\r\n  AssetUpload: 'UploadAsset',\r\n  FolderCreate: 'FolderCreate',\r\n};\r\n\r\nexport interface MediaLibraryInputProps {\r\n  required?: boolean;\r\n  name: string;\r\n  labelAction?: React.ReactNode;\r\n  label?: string;\r\n  hint?: string;\r\n  disabled?: boolean;\r\n  attribute?: {\r\n    allowedTypes?: AllowedTypes[];\r\n    multiple?: boolean;\r\n  };\r\n}\r\n\r\nexport const MediaLibraryInput = React.forwardRef<CarouselAssetsProps, MediaLibraryInputProps>(\r\n  (\r\n    {\r\n      attribute: { allowedTypes = null, multiple = false } = {},\r\n      label,\r\n      hint,\r\n      disabled = false,\r\n      labelAction = undefined,\r\n      name,\r\n      required = false,\r\n    },\r\n    forwardedRef\r\n  ) => {\r\n    const { formatMessage } = useIntl();\r\n    const { onChange, value, error } = useField(name);\r\n    const [uploadedFiles, setUploadedFiles] = React.useState<Asset[] | File[]>([]);\r\n    const [step, setStep] = React.useState<string | undefined>(undefined);\r\n    const [selectedIndex, setSelectedIndex] = React.useState(0);\r\n    const [droppedAssets, setDroppedAssets] = React.useState<AllowedFiles[]>();\r\n    const [folderId, setFolderId] = React.useState<number | null>(null);\r\n    const { toggleNotification } = useNotification();\r\n\r\n    React.useEffect(() => {\r\n      // Clear the uploaded files on close\r\n      if (step === undefined) {\r\n        setUploadedFiles([]);\r\n      }\r\n    }, [step]);\r\n\r\n    let selectedAssets: File[] = [];\r\n\r\n    if (Array.isArray(value)) {\r\n      selectedAssets = value;\r\n    } else if (value) {\r\n      selectedAssets = [value];\r\n    }\r\n\r\n    const handleValidation = (nextSelectedAssets: File[]) => {\r\n      const value = multiple ? nextSelectedAssets : nextSelectedAssets[0];\r\n      onChange(name, value);\r\n      setStep(undefined);\r\n    };\r\n\r\n    const handleDeleteAssetFromMediaLibrary = () => {\r\n      let nextValue;\r\n\r\n      if (multiple) {\r\n        const nextSelectedAssets = selectedAssets.filter(\r\n          (_, assetIndex) => assetIndex !== selectedIndex\r\n        );\r\n        nextValue = nextSelectedAssets.length > 0 ? nextSelectedAssets : null;\r\n      } else {\r\n        nextValue = null;\r\n      }\r\n\r\n      const value = nextValue;\r\n      onChange(name, value);\r\n\r\n      setSelectedIndex(0);\r\n    };\r\n\r\n    const handleDeleteAsset = (asset: File) => {\r\n      let nextValue;\r\n\r\n      if (multiple) {\r\n        const nextSelectedAssets = selectedAssets.filter((prevAsset) => prevAsset.id !== asset.id);\r\n\r\n        nextValue = nextSelectedAssets.length > 0 ? nextSelectedAssets : null;\r\n      } else {\r\n        nextValue = null;\r\n      }\r\n\r\n      onChange(name, nextValue);\r\n\r\n      setSelectedIndex(0);\r\n    };\r\n\r\n    const handleAssetEdit = (asset: File) => {\r\n      const nextSelectedAssets = selectedAssets.map((prevAsset) =>\r\n        prevAsset.id === asset.id ? asset : prevAsset\r\n      );\r\n\r\n      onChange(name, multiple ? nextSelectedAssets : nextSelectedAssets[0]);\r\n    };\r\n\r\n    const validateAssetsTypes = (\r\n      assets: FileWithoutIdHash[] | Asset[],\r\n      callback: (assets?: AllowedFiles[], error?: string) => void\r\n    ) => {\r\n      const allowedAssets = getAllowedFiles(allowedTypes, assets as AllowedFiles[]);\r\n\r\n      if (allowedAssets.length > 0) {\r\n        callback(allowedAssets);\r\n      } else {\r\n        toggleNotification({\r\n          type: 'danger',\r\n          timeout: 4000,\r\n          message: formatMessage(\r\n            {\r\n              id: getTrad('input.notification.not-supported'),\r\n              defaultMessage: `You can't upload this type of file.`,\r\n            },\r\n            {\r\n              fileTypes: (allowedTypes ?? []).join(','),\r\n            }\r\n          ),\r\n        });\r\n      }\r\n    };\r\n\r\n    const handleAssetDrop = (assets: FileWithoutIdHash[]) => {\r\n      validateAssetsTypes(assets, (allowedAssets?: AllowedFiles[]) => {\r\n        setDroppedAssets(allowedAssets);\r\n        setStep(STEPS.AssetUpload);\r\n      });\r\n    };\r\n\r\n    if (multiple && selectedAssets.length > 0) {\r\n      label = `${label} (${selectedIndex + 1} / ${selectedAssets.length})`;\r\n    }\r\n\r\n    const handleNext = () => {\r\n      setSelectedIndex((current) => (current < selectedAssets.length - 1 ? current + 1 : 0));\r\n    };\r\n\r\n    const handlePrevious = () => {\r\n      setSelectedIndex((current) => (current > 0 ? current - 1 : selectedAssets.length - 1));\r\n    };\r\n\r\n    const handleFilesUploadSucceeded = (uploadedFiles: Asset[] | File[]) => {\r\n      setUploadedFiles((prev) => [...prev, ...uploadedFiles]);\r\n    };\r\n\r\n    let initiallySelectedAssets = selectedAssets;\r\n\r\n    if (uploadedFiles.length > 0) {\r\n      const allowedUploadedFiles = getAllowedFiles(allowedTypes, uploadedFiles as AllowedFiles[]);\r\n\r\n      initiallySelectedAssets = multiple\r\n        ? [...allowedUploadedFiles, ...selectedAssets]\r\n        : [allowedUploadedFiles[0]];\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <CarouselAssets\r\n          ref={forwardedRef}\r\n          assets={selectedAssets}\r\n          disabled={disabled}\r\n          label={label!}\r\n          labelAction={labelAction}\r\n          onDeleteAsset={handleDeleteAsset}\r\n          onDeleteAssetFromMediaLibrary={handleDeleteAssetFromMediaLibrary}\r\n          onAddAsset={() => setStep(STEPS.AssetSelect)}\r\n          onDropAsset={handleAssetDrop}\r\n          onEditAsset={handleAssetEdit}\r\n          onNext={handleNext}\r\n          onPrevious={handlePrevious}\r\n          error={error}\r\n          hint={hint}\r\n          required={required}\r\n          selectedAssetIndex={selectedIndex}\r\n          trackedLocation=\"content-manager\"\r\n        />\r\n\r\n        {step === STEPS.AssetSelect && (\r\n          <AssetDialog\r\n            allowedTypes={allowedTypes as AllowedTypes[]}\r\n            initiallySelectedAssets={initiallySelectedAssets}\r\n            folderId={folderId}\r\n            onClose={() => {\r\n              setStep(undefined);\r\n              setFolderId(null);\r\n            }}\r\n            open={step === STEPS.AssetSelect}\r\n            onValidate={handleValidation}\r\n            multiple={multiple}\r\n            onAddAsset={() => setStep(STEPS.AssetUpload)}\r\n            onAddFolder={() => setStep(STEPS.FolderCreate)}\r\n            onChangeFolder={(folder) => setFolderId(folder)}\r\n            trackedLocation=\"content-manager\"\r\n          />\r\n        )}\r\n\r\n        {step === STEPS.AssetUpload && (\r\n          <UploadAssetDialog\r\n            open={step === STEPS.AssetUpload}\r\n            onClose={() => setStep(STEPS.AssetSelect)}\r\n            initialAssetsToAdd={droppedAssets as Asset[]}\r\n            addUploadedFiles={handleFilesUploadSucceeded}\r\n            trackedLocation=\"content-manager\"\r\n            folderId={folderId}\r\n            validateAssetsTypes={validateAssetsTypes}\r\n          />\r\n        )}\r\n\r\n        {step === STEPS.FolderCreate && (\r\n          <EditFolderDialog\r\n            open={step === STEPS.FolderCreate}\r\n            onClose={() => setStep(STEPS.AssetSelect)}\r\n            parentFolderId={folderId}\r\n          />\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n);\r\n", "import * as React from 'react';\r\n\r\nimport { CarouselInput, CarouselSlide } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { getTrad } from '../../../utils/getTrad';\r\nimport { EditAssetDialog } from '../../EditAssetDialog/EditAssetContent';\r\n\r\nimport { CarouselAsset } from './CarouselAsset';\r\nimport { CarouselAssetActions } from './CarouselAssetActions';\r\nimport { EmptyStateAsset } from './EmptyStateAsset';\r\n\r\nimport type { File as FileAsset, RawFile } from '../../../../../shared/contracts/files';\r\n\r\nexport type FileWithoutIdHash = Omit<FileAsset, 'id' | 'hash'>;\r\n\r\ninterface Asset extends Omit<FileAsset, 'folder'> {\r\n  isLocal?: boolean;\r\n  rawFile?: RawFile;\r\n  folder?: FileAsset['folder'] & { id: number };\r\n}\r\n\r\nexport interface CarouselAssetsProps {\r\n  assets: FileAsset[];\r\n  disabled?: boolean;\r\n  error?: string;\r\n  hint?: string;\r\n  label: string;\r\n  labelAction?: React.ReactNode;\r\n  onAddAsset: (asset?: FileAsset, event?: React.MouseEventHandler<HTMLButtonElement>) => void;\r\n  onDeleteAsset: (asset: FileAsset) => void;\r\n  onDeleteAssetFromMediaLibrary: () => void;\r\n  onDropAsset?: (assets: FileWithoutIdHash[]) => void;\r\n  onEditAsset?: (asset: FileAsset) => void;\r\n  onNext: () => void;\r\n  onPrevious: () => void;\r\n  required?: boolean;\r\n  selectedAssetIndex: number;\r\n  trackedLocation?: string;\r\n}\r\n\r\nexport const CarouselAssets = React.forwardRef(\r\n  (\r\n    {\r\n      assets,\r\n      disabled = false,\r\n      error,\r\n      hint,\r\n      label,\r\n      labelAction,\r\n      onAddAsset,\r\n      onDeleteAsset,\r\n      onDeleteAssetFromMediaLibrary,\r\n      onDropAsset,\r\n      onEditAsset,\r\n      onNext,\r\n      onPrevious,\r\n      required = false,\r\n      selectedAssetIndex,\r\n      trackedLocation,\r\n    }: CarouselAssetsProps,\r\n    forwardedRef\r\n  ) => {\r\n    const { formatMessage } = useIntl();\r\n    const [isEditingAsset, setIsEditingAsset] = React.useState(false);\r\n\r\n    const currentAsset = assets[selectedAssetIndex];\r\n\r\n    return (\r\n      <>\r\n        <CarouselInput\r\n          ref={forwardedRef as React.Ref<HTMLDivElement>}\r\n          label={label}\r\n          labelAction={labelAction}\r\n          secondaryLabel={currentAsset?.name}\r\n          selectedSlide={selectedAssetIndex}\r\n          previousLabel={formatMessage({\r\n            id: getTrad('mediaLibraryInput.actions.previousSlide'),\r\n            defaultMessage: 'Previous slide',\r\n          })}\r\n          nextLabel={formatMessage({\r\n            id: getTrad('mediaLibraryInput.actions.nextSlide'),\r\n            defaultMessage: 'Next slide',\r\n          })}\r\n          onNext={onNext}\r\n          onPrevious={onPrevious}\r\n          hint={hint}\r\n          error={error}\r\n          required={required}\r\n          actions={\r\n            currentAsset ? (\r\n              <CarouselAssetActions\r\n                asset={currentAsset}\r\n                onDeleteAsset={disabled ? undefined : onDeleteAsset}\r\n                onAddAsset={disabled ? undefined : onAddAsset}\r\n                onEditAsset={onEditAsset ? () => setIsEditingAsset(true) : undefined}\r\n              />\r\n            ) : undefined\r\n          }\r\n        >\r\n          {assets.length === 0 ? (\r\n            <CarouselSlide\r\n              label={formatMessage(\r\n                {\r\n                  id: getTrad('mediaLibraryInput.slideCount'),\r\n                  defaultMessage: '{n} of {m} slides',\r\n                },\r\n                { n: 1, m: 1 }\r\n              )}\r\n            >\r\n              <EmptyStateAsset\r\n                disabled={disabled}\r\n                onClick={onAddAsset}\r\n                onDropAsset={onDropAsset!}\r\n              />\r\n            </CarouselSlide>\r\n          ) : (\r\n            assets.map((asset, index) => (\r\n              <CarouselSlide\r\n                key={asset.id}\r\n                label={formatMessage(\r\n                  {\r\n                    id: getTrad('mediaLibraryInput.slideCount'),\r\n                    defaultMessage: '{n} of {m} slides',\r\n                  },\r\n                  { n: index + 1, m: assets.length }\r\n                )}\r\n              >\r\n                <CarouselAsset asset={asset} />\r\n              </CarouselSlide>\r\n            ))\r\n          )}\r\n        </CarouselInput>\r\n        <EditAssetDialog\r\n          open={isEditingAsset}\r\n          onClose={(editedAsset) => {\r\n            setIsEditingAsset(false);\r\n\r\n            // The asset has been deleted\r\n            if (editedAsset === null) {\r\n              onDeleteAssetFromMediaLibrary();\r\n            }\r\n            if (editedAsset && typeof editedAsset !== 'boolean') {\r\n              onEditAsset?.(editedAsset);\r\n            }\r\n          }}\r\n          asset={currentAsset as Asset}\r\n          canUpdate\r\n          canCopyLink\r\n          canDownload\r\n          trackedLocation={trackedLocation}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n);\r\n", "import { Box, Flex } from '@strapi/design-system';\r\nimport { File, FilePdf } from '@strapi/icons';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { AssetType } from '../../../constants';\r\nimport { createAssetUrl } from '../../../utils';\r\nimport { AudioPreview } from '../../AssetCard/AudioPreview';\r\nimport { VideoPreview } from '../../AssetCard/VideoPreview';\r\n\r\nimport type { File as FileAsset } from '../../../../../shared/contracts/files';\r\n\r\nconst DocAsset = styled(Flex)`\r\n  background: linear-gradient(180deg, #ffffff 0%, #f6f6f9 121.48%);\r\n`;\r\n\r\nconst VideoPreviewWrapper = styled(Box)`\r\n  canvas,\r\n  video {\r\n    max-width: 100%;\r\n    height: 124px;\r\n  }\r\n`;\r\n\r\nconst AudioPreviewWrapper = styled(Box)`\r\n  canvas,\r\n  audio {\r\n    max-width: 100%;\r\n  }\r\n`;\r\n\r\nexport const CarouselAsset = ({ asset }: { asset: FileAsset }) => {\r\n  if (asset.mime?.includes(AssetType.Video)) {\r\n    return (\r\n      <VideoPreviewWrapper height=\"100%\">\r\n        <VideoPreview\r\n          url={createAssetUrl(asset, true)!}\r\n          mime={asset.mime}\r\n          alt={asset.alternativeText || asset.name}\r\n        />\r\n      </VideoPreviewWrapper>\r\n    );\r\n  }\r\n\r\n  if (asset.mime?.includes(AssetType.Audio)) {\r\n    return (\r\n      <AudioPreviewWrapper>\r\n        <AudioPreview\r\n          url={createAssetUrl(asset, true)!}\r\n          alt={asset.alternativeText || asset.name}\r\n        />\r\n      </AudioPreviewWrapper>\r\n    );\r\n  }\r\n\r\n  if (asset.mime?.includes(AssetType.Image)) {\r\n    const assetUrl = createAssetUrl(asset, true);\r\n    if (!assetUrl) return null;\r\n\r\n    // Adding a param to the url to bust the cache and force the refresh of the image when replaced\r\n    // Only add updatedAt parameter if the URL is not signed to prevent signature invalidation\r\n    const cacheBustedUrl = asset.isUrlSigned\r\n      ? assetUrl\r\n      : `${assetUrl}${assetUrl.includes('?') ? '&' : '?'}updatedAt=${asset.updatedAt}`;\r\n\r\n    return (\r\n      <Box\r\n        tag=\"img\"\r\n        maxHeight=\"100%\"\r\n        maxWidth=\"100%\"\r\n        src={cacheBustedUrl}\r\n        alt={asset.alternativeText || asset.name}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <DocAsset width=\"100%\" height=\"100%\" justifyContent=\"center\" hasRadius>\r\n      {asset.ext?.includes('pdf') ? (\r\n        <FilePdf aria-label={asset.alternativeText || asset.name} width=\"24px\" height=\"32px\" />\r\n      ) : (\r\n        <File aria-label={asset.alternativeText || asset.name} width=\"24px\" height=\"32px\" />\r\n      )}\r\n    </DocAsset>\r\n  );\r\n};\r\n", "import { CarouselActions, IconButton } from '@strapi/design-system';\r\nimport { Pencil, Plus, Trash } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { getTrad, prefixFileUrlWithBackendUrl } from '../../../utils';\r\nimport { CopyLinkButton } from '../../CopyLinkButton/CopyLinkButton';\r\n\r\nimport type { File } from '../../../../../shared/contracts/files';\r\n\r\ninterface CarouselAssetActionsProps {\r\n  asset: File;\r\n  onDeleteAsset?: (asset: File) => void;\r\n  onAddAsset?: (asset: File) => void;\r\n  onEditAsset?: () => void;\r\n}\r\n\r\nexport const CarouselAssetActions = ({\r\n  asset,\r\n  onDeleteAsset,\r\n  onAddAsset,\r\n  onEditAsset,\r\n}: CarouselAssetActionsProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  return (\r\n    <CarouselActions>\r\n      {onAddAsset && (\r\n        <IconButton\r\n          label={formatMessage({\r\n            id: getTrad('control-card.add'),\r\n            defaultMessage: 'Add',\r\n          })}\r\n          onClick={() => onAddAsset(asset)}\r\n        >\r\n          <Plus />\r\n        </IconButton>\r\n      )}\r\n\r\n      <CopyLinkButton url={prefixFileUrlWithBackendUrl(asset.url)!} />\r\n\r\n      {onDeleteAsset && (\r\n        <IconButton\r\n          label={formatMessage({\r\n            id: 'global.delete',\r\n            defaultMessage: 'Delete',\r\n          })}\r\n          onClick={() => onDeleteAsset(asset)}\r\n        >\r\n          <Trash />\r\n        </IconButton>\r\n      )}\r\n\r\n      {onEditAsset && (\r\n        <IconButton\r\n          label={formatMessage({\r\n            id: getTrad('control-card.edit'),\r\n            defaultMessage: 'edit',\r\n          })}\r\n          onClick={onEditAsset}\r\n        >\r\n          <Pencil />\r\n        </IconButton>\r\n      )}\r\n    </CarouselActions>\r\n  );\r\n};\r\n", "import * as React from 'react';\r\n\r\nimport { Flex, Typography } from '@strapi/design-system';\r\nimport { PlusCircle as PicturePlus } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { AssetSource } from '../../../constants';\r\nimport { getTrad, rawFileToAsset } from '../../../utils';\r\n\r\nimport type { File } from '../../../../../shared/contracts/files';\r\n\r\nconst TextAlignTypography = styled(Typography)`\r\n  align-items: center;\r\n`;\r\n\r\ntype FileWithoutIdHash = Omit<File, 'id' | 'hash'>;\r\n\r\ninterface EmptyStateAssetProps {\r\n  disabled?: boolean;\r\n  onClick: (asset?: File, event?: React.MouseEventHandler<HTMLButtonElement>) => void;\r\n  onDropAsset: (assets: FileWithoutIdHash[]) => void;\r\n}\r\n\r\nexport const EmptyStateAsset = ({\r\n  disabled = false,\r\n  onClick,\r\n  onDropAsset,\r\n}: EmptyStateAssetProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const [dragOver, setDragOver] = React.useState(false);\r\n\r\n  const handleDragEnter = (e: React.DragEvent<HTMLButtonElement>) => {\r\n    e.preventDefault();\r\n    setDragOver(true);\r\n  };\r\n\r\n  const handleDragLeave = (e: React.DragEvent<HTMLButtonElement>) => {\r\n    if (!e.currentTarget.contains(e.relatedTarget as Node)) {\r\n      setDragOver(false);\r\n    }\r\n  };\r\n\r\n  const handleDragOver = (e: React.DragEvent<HTMLButtonElement>) => {\r\n    e.preventDefault();\r\n  };\r\n\r\n  const handleDrop = (e: React.DragEvent<HTMLButtonElement>) => {\r\n    e.preventDefault();\r\n\r\n    if (e?.dataTransfer?.files) {\r\n      const files = e.dataTransfer.files;\r\n      const assets: FileWithoutIdHash[] = [];\r\n\r\n      for (let i = 0; i < files.length; i++) {\r\n        const file = files.item(i);\r\n        if (file) {\r\n          const asset = rawFileToAsset(file, AssetSource.Computer);\r\n\r\n          assets.push(asset);\r\n        }\r\n      }\r\n\r\n      onDropAsset(assets);\r\n    }\r\n\r\n    setDragOver(false);\r\n  };\r\n\r\n  return (\r\n    <Flex\r\n      borderStyle={dragOver ? 'dashed' : undefined}\r\n      borderWidth={dragOver ? '1px' : undefined}\r\n      borderColor={dragOver ? 'primary600' : undefined}\r\n      direction=\"column\"\r\n      justifyContent=\"center\"\r\n      alignItems=\"center\"\r\n      height=\"100%\"\r\n      width=\"100%\"\r\n      tag=\"button\"\r\n      type=\"button\"\r\n      disabled={disabled}\r\n      onClick={onClick as unknown as React.MouseEventHandler<HTMLButtonElement>}\r\n      onDragEnter={handleDragEnter}\r\n      onDragLeave={handleDragLeave}\r\n      onDragOver={handleDragOver}\r\n      onDrop={handleDrop}\r\n      gap={3}\r\n      style={{ cursor: disabled ? 'not-allowed' : 'pointer' }}\r\n    >\r\n      <PicturePlus\r\n        aria-hidden\r\n        width=\"3.2rem\"\r\n        height=\"3.2rem\"\r\n        fill={disabled ? 'neutral400' : 'primary600'}\r\n      />\r\n      <TextAlignTypography\r\n        variant=\"pi\"\r\n        fontWeight=\"bold\"\r\n        textColor=\"neutral600\"\r\n        style={{ textAlign: 'center' }}\r\n        tag=\"span\"\r\n      >\r\n        {formatMessage({\r\n          id: getTrad('mediaLibraryInput.placeholder'),\r\n          defaultMessage: 'Click to add an asset or drag and drop one in this area',\r\n        })}\r\n      </TextAlignTypography>\r\n    </Flex>\r\n  );\r\n};\r\n", "import { Images } from '@strapi/icons';\r\n\r\nimport pluginPkg from '../../package.json';\r\n\r\nimport { MediaLibraryDialog } from './components/MediaLibraryDialog/MediaLibraryDialog';\r\nimport { MediaLibraryInput } from './components/MediaLibraryInput/MediaLibraryInput';\r\nimport { PERMISSIONS } from './constants';\r\nimport { pluginId } from './pluginId';\r\nimport { getTrad, prefixPluginTranslations } from './utils';\r\n\r\nimport type { MediaLibraryDialogProps } from './components/MediaLibraryDialog/MediaLibraryDialog';\r\nimport type { MediaLibraryInputProps } from './components/MediaLibraryInput/MediaLibraryInput';\r\nimport type { StrapiApp } from '@strapi/admin/strapi-admin';\r\nimport type { Plugin } from '@strapi/types';\r\n\r\nconst name = pluginPkg.strapi.name;\r\n\r\nconst admin: Plugin.Config.AdminInput = {\r\n  register(app: StrapiApp) {\r\n    app.addMenuLink({\r\n      to: `plugins/${pluginId}`,\r\n      icon: Images,\r\n      intlLabel: {\r\n        id: `${pluginId}.plugin.name`,\r\n        defaultMessage: 'Media Library',\r\n      },\r\n      permissions: PERMISSIONS.main,\r\n      Component: () => import('./pages/App/App').then((mod) => ({ default: mod.Upload })),\r\n      position: 4,\r\n    });\r\n\r\n    app.addSettingsLink('global', {\r\n      id: 'media-library-settings',\r\n      to: 'media-library',\r\n      intlLabel: {\r\n        id: getTrad('plugin.name'),\r\n        defaultMessage: 'Media Library',\r\n      },\r\n      async Component() {\r\n        const { ProtectedSettingsPage } = await import('./pages/SettingsPage/SettingsPage');\r\n        return { default: ProtectedSettingsPage };\r\n      },\r\n      permissions: PERMISSIONS.settings,\r\n    });\r\n\r\n    app.addFields({\r\n      type: 'media',\r\n      Component: MediaLibraryInput as React.FC<Partial<MediaLibraryInputProps>>,\r\n    });\r\n    app.addComponents([\r\n      {\r\n        name: 'media-library',\r\n        Component: MediaLibraryDialog as React.FC<Partial<MediaLibraryDialogProps>>,\r\n      },\r\n    ]);\r\n\r\n    app.registerPlugin({\r\n      id: pluginId,\r\n      name,\r\n    });\r\n  },\r\n  async registerTrads({ locales }: { locales: string[] }) {\r\n    const importedTrads = await Promise.all(\r\n      locales.map((locale) => {\r\n        return import(`./translations/${locale}.json`)\r\n          .then(({ default: data }) => {\r\n            return {\r\n              data: prefixPluginTranslations(data, pluginId),\r\n              locale,\r\n            };\r\n          })\r\n          .catch(() => {\r\n            return {\r\n              data: {},\r\n              locale,\r\n            };\r\n          });\r\n      })\r\n    );\r\n\r\n    return Promise.resolve(importedTrads);\r\n  },\r\n};\r\n\r\n// eslint-disable-next-line import/no-default-export\r\nexport default admin;\r\n", "import get from 'lodash/get';\r\nimport * as yup from 'yup';\r\n\r\nimport { CheckboxConfirmation } from './components/CheckboxConfirmation';\r\nimport {\r\n  BulkLocalePublishAction,\r\n  BulkLocaleUnpublishAction,\r\n  DeleteLocaleAction,\r\n  LocalePickerAction,\r\n  FillFromAnotherLocaleAction,\r\n} from './components/CMHeaderActions';\r\nimport {\r\n  DeleteModalAdditionalInfo,\r\n  PublishModalAdditionalInfo,\r\n  UnpublishModalAdditionalInfo,\r\n} from './components/CMListViewModalsAdditionalInformation';\r\nimport { LocalePicker } from './components/LocalePicker';\r\nimport { PERMISSIONS } from './constants';\r\nimport { mutateEditViewHook } from './contentManagerHooks/editView';\r\nimport { addColumnToTableHook } from './contentManagerHooks/listView';\r\nimport { addLocaleToReleasesHook } from './contentReleasesHooks/releaseDetailsView';\r\nimport { extendCTBAttributeInitialDataMiddleware } from './middlewares/extendCTBAttributeInitialData';\r\nimport { extendCTBInitialDataMiddleware } from './middlewares/extendCTBInitialData';\r\nimport { localeMiddleware } from './middlewares/rbac-middleware';\r\nimport { pluginId } from './pluginId';\r\nimport { i18nApi } from './services/api';\r\nimport { LOCALIZED_FIELDS } from './utils/fields';\r\nimport { getTranslation } from './utils/getTranslation';\r\nimport { prefixPluginTranslations } from './utils/prefixPluginTranslations';\r\nimport { mutateCTBContentTypeSchema } from './utils/schemas';\r\n\r\nimport type { DocumentActionComponent } from '@strapi/content-manager/strapi-admin';\r\n\r\n// eslint-disable-next-line import/no-default-export\r\nexport default {\r\n  register(app: any) {\r\n    app.addMiddlewares([extendCTBAttributeInitialDataMiddleware, extendCTBInitialDataMiddleware]);\r\n    app.addMiddlewares([() => i18nApi.middleware]);\r\n    app.addReducers({\r\n      [i18nApi.reducerPath]: i18nApi.reducer,\r\n    });\r\n    app.addRBACMiddleware([localeMiddleware]);\r\n    app.registerPlugin({\r\n      id: pluginId,\r\n      name: pluginId,\r\n    });\r\n  },\r\n  bootstrap(app: any) {\r\n    // // Hook that adds a column into the CM's LV table\r\n    app.registerHook('Admin/CM/pages/ListView/inject-column-in-table', addColumnToTableHook);\r\n    app.registerHook('Admin/CM/pages/EditView/mutate-edit-view-layout', mutateEditViewHook);\r\n    // Hooks that checks if the locale is present in the release\r\n    app.registerHook(\r\n      'ContentReleases/pages/ReleaseDetails/add-locale-in-releases',\r\n      addLocaleToReleasesHook\r\n    );\r\n\r\n    // Add the settings link\r\n    app.addSettingsLink('global', {\r\n      intlLabel: {\r\n        id: getTranslation('plugin.name'),\r\n        defaultMessage: 'Internationalization',\r\n      },\r\n      id: 'internationalization',\r\n      to: 'internationalization',\r\n      Component: () =>\r\n        import('./pages/SettingsPage').then((mod) => ({ default: mod.ProtectedSettingsPage })),\r\n      permissions: PERMISSIONS.accessMain,\r\n    });\r\n\r\n    const contentManager = app.getPlugin('content-manager');\r\n\r\n    contentManager.apis.addDocumentHeaderAction([LocalePickerAction, FillFromAnotherLocaleAction]);\r\n    contentManager.apis.addDocumentAction((actions: DocumentActionComponent[]) => {\r\n      const indexOfDeleteAction = actions.findIndex((action) => action.type === 'delete');\r\n      actions.splice(indexOfDeleteAction, 0, DeleteLocaleAction);\r\n      return actions;\r\n    });\r\n\r\n    contentManager.apis.addDocumentAction((actions: DocumentActionComponent[]) => {\r\n      // When enabled the bulk locale publish action should be the first action\r\n      // in 'More Document Actions' and therefore the third action in the array\r\n      actions.splice(2, 0, BulkLocalePublishAction);\r\n      actions.splice(5, 0, BulkLocaleUnpublishAction);\r\n      return actions;\r\n    });\r\n\r\n    contentManager.injectComponent('listView', 'actions', {\r\n      name: 'i18n-locale-filter',\r\n      Component: LocalePicker,\r\n    });\r\n\r\n    contentManager.injectComponent('listView', 'publishModalAdditionalInfos', {\r\n      name: 'i18n-publish-bullets-in-modal',\r\n      Component: PublishModalAdditionalInfo,\r\n    });\r\n\r\n    contentManager.injectComponent('listView', 'unpublishModalAdditionalInfos', {\r\n      name: 'i18n-unpublish-bullets-in-modal',\r\n      Component: UnpublishModalAdditionalInfo,\r\n    });\r\n\r\n    contentManager.injectComponent('listView', 'deleteModalAdditionalInfos', {\r\n      name: 'i18n-delete-bullets-in-modal',\r\n      Component: DeleteModalAdditionalInfo,\r\n    });\r\n\r\n    const ctbPlugin = app.getPlugin('content-type-builder');\r\n\r\n    if (ctbPlugin) {\r\n      const ctbFormsAPI = ctbPlugin.apis.forms;\r\n      ctbFormsAPI.addContentTypeSchemaMutation(mutateCTBContentTypeSchema);\r\n      ctbFormsAPI.components.add({ id: 'checkboxConfirmation', component: CheckboxConfirmation });\r\n\r\n      ctbFormsAPI.extendContentType({\r\n        validator: () => ({\r\n          i18n: yup.object().shape({\r\n            localized: yup.bool(),\r\n          }),\r\n        }),\r\n        form: {\r\n          advanced() {\r\n            return [\r\n              {\r\n                name: 'pluginOptions.i18n.localized',\r\n                description: {\r\n                  id: getTranslation('plugin.schema.i18n.localized.description-content-type'),\r\n                  defaultMessage: 'Allows translating an entry into different languages',\r\n                },\r\n                type: 'checkboxConfirmation',\r\n                intlLabel: {\r\n                  id: getTranslation('plugin.schema.i18n.localized.label-content-type'),\r\n                  defaultMessage: 'Localization',\r\n                },\r\n              },\r\n            ];\r\n          },\r\n        },\r\n      });\r\n\r\n      ctbFormsAPI.extendFields(LOCALIZED_FIELDS, {\r\n        form: {\r\n          advanced({ contentTypeSchema, forTarget, type, step }: any) {\r\n            if (forTarget !== 'contentType') {\r\n              return [];\r\n            }\r\n\r\n            const hasI18nEnabled = get(\r\n              contentTypeSchema,\r\n              ['pluginOptions', 'i18n', 'localized'],\r\n              false\r\n            );\r\n\r\n            if (!hasI18nEnabled) {\r\n              return [];\r\n            }\r\n\r\n            if (type === 'component' && step === '1') {\r\n              return [];\r\n            }\r\n\r\n            return [\r\n              {\r\n                name: 'pluginOptions.i18n.localized',\r\n                description: {\r\n                  id: getTranslation('plugin.schema.i18n.localized.description-field'),\r\n                  defaultMessage: 'The field can have different values in each locale',\r\n                },\r\n                type: 'checkbox',\r\n                intlLabel: {\r\n                  id: getTranslation('plugin.schema.i18n.localized.label-field'),\r\n                  defaultMessage: 'Enable localization for this field',\r\n                },\r\n              },\r\n            ];\r\n          },\r\n        },\r\n      });\r\n    }\r\n  },\r\n  async registerTrads({ locales }: { locales: string[] }) {\r\n    const importedTrads = await Promise.all(\r\n      locales.map((locale) => {\r\n        return import(`./translations/${locale}.json`)\r\n          .then(({ default: data }) => {\r\n            return {\r\n              data: prefixPluginTranslations(data, pluginId),\r\n              locale,\r\n            };\r\n          })\r\n          .catch(() => {\r\n            return {\r\n              data: {},\r\n              locale,\r\n            };\r\n          });\r\n      })\r\n    );\r\n\r\n    return Promise.resolve(importedTrads);\r\n  },\r\n};\r\n", "import * as React from 'react';\r\n\r\nimport { Button, Checkbox, Dialog, Field, Flex, Typography } from '@strapi/design-system';\r\nimport { WarningCircle } from '@strapi/icons';\r\nimport { MessageDescriptor, useIntl } from 'react-intl';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { getTranslation } from '../utils/getTranslation';\r\n\r\nconst TextAlignTypography = styled(Typography)`\r\n  text-align: center;\r\n`;\r\n\r\ninterface IntlMessage extends MessageDescriptor {\r\n  values: object;\r\n}\r\n\r\ninterface CheckboxConfirmationProps {\r\n  description: IntlMessage;\r\n  intlLabel: IntlMessage;\r\n  isCreating?: boolean;\r\n  name: string;\r\n  onChange: (event: { target: { name: string; value: boolean; type: string } }) => void;\r\n  value: boolean;\r\n}\r\n\r\nconst CheckboxConfirmation = ({\r\n  description,\r\n  isCreating = false,\r\n  intlLabel,\r\n  name,\r\n  onChange,\r\n  value,\r\n}: CheckboxConfirmationProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const [isOpen, setIsOpen] = React.useState(false);\r\n\r\n  const handleChange = (value: boolean) => {\r\n    if (isCreating || value) {\r\n      return onChange({ target: { name, value, type: 'checkbox' } });\r\n    }\r\n\r\n    if (!value) {\r\n      return setIsOpen(true);\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  const handleConfirm = () => {\r\n    onChange({ target: { name, value: false, type: 'checkbox' } });\r\n  };\r\n\r\n  const label = intlLabel.id\r\n    ? formatMessage(\r\n        { id: intlLabel.id, defaultMessage: intlLabel.defaultMessage },\r\n        { ...intlLabel.values }\r\n      )\r\n    : name;\r\n\r\n  const hint = description\r\n    ? formatMessage(\r\n        { id: description.id, defaultMessage: description.defaultMessage },\r\n        { ...description.values }\r\n      )\r\n    : '';\r\n\r\n  return (\r\n    <Dialog.Root open={isOpen} onOpenChange={setIsOpen}>\r\n      <Field.Root hint={hint} name={name}>\r\n        <Checkbox onCheckedChange={handleChange} checked={value}>\r\n          {label}\r\n        </Checkbox>\r\n        <Field.Hint />\r\n      </Field.Root>\r\n      <Dialog.Content>\r\n        <Dialog.Header>\r\n          {formatMessage({\r\n            id: getTranslation('CheckboxConfirmation.Modal.title'),\r\n            defaultMessage: 'Disable localization',\r\n          })}\r\n        </Dialog.Header>\r\n        <Dialog.Body icon={<WarningCircle />}>\r\n          <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\r\n            <Flex justifyContent=\"center\">\r\n              <TextAlignTypography>\r\n                {formatMessage({\r\n                  id: getTranslation('CheckboxConfirmation.Modal.content'),\r\n                  defaultMessage:\r\n                    'Disabling localization will engender the deletion of all your content but the one associated to your default locale (if existing).',\r\n                })}\r\n              </TextAlignTypography>\r\n            </Flex>\r\n            <Flex justifyContent=\"center\">\r\n              <Typography fontWeight=\"semiBold\">\r\n                {formatMessage({\r\n                  id: getTranslation('CheckboxConfirmation.Modal.body'),\r\n                  defaultMessage: 'Do you want to disable it?',\r\n                })}\r\n              </Typography>\r\n            </Flex>\r\n          </Flex>\r\n        </Dialog.Body>\r\n        <Dialog.Footer>\r\n          <Dialog.Cancel>\r\n            <Button variant=\"tertiary\">\r\n              {formatMessage({\r\n                id: 'components.popUpWarning.button.cancel',\r\n                defaultMessage: 'No, cancel',\r\n              })}\r\n            </Button>\r\n          </Dialog.Cancel>\r\n          <Dialog.Action>\r\n            <Button variant=\"danger-light\" onClick={handleConfirm}>\r\n              {formatMessage({\r\n                id: getTranslation('CheckboxConfirmation.Modal.button-confirm'),\r\n                defaultMessage: 'Yes, disable',\r\n              })}\r\n            </Button>\r\n          </Dialog.Action>\r\n        </Dialog.Footer>\r\n      </Dialog.Content>\r\n    </Dialog.Root>\r\n  );\r\n};\r\n\r\nexport { CheckboxConfirmation };\r\n", "import * as React from 'react';\r\n\r\nimport { skipToken } from '@reduxjs/toolkit/query';\r\nimport {\r\n  useNotification,\r\n  useQueryParams,\r\n  Table,\r\n  useAPIErrorHandler,\r\n  FormErrors,\r\n  useForm,\r\n} from '@strapi/admin/strapi-admin';\r\nimport {\r\n  type DocumentActionComponent,\r\n  type DocumentActionProps,\r\n  unstable_useDocument as useDocument,\r\n  unstable_useDocumentActions as useDocumentActions,\r\n  buildValidParams,\r\n  HeaderActionProps,\r\n} from '@strapi/content-manager/strapi-admin';\r\nimport {\r\n  Flex,\r\n  Status,\r\n  Typography,\r\n  Button,\r\n  Modal,\r\n  Field,\r\n  SingleSelect,\r\n  SingleSelectOption,\r\n  Dialog,\r\n  type StatusVariant,\r\n} from '@strapi/design-system';\r\nimport { WarningCircle, ListPlus, Trash, Earth, Cross, Plus } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { useI18n } from '../hooks/useI18n';\r\nimport { useGetLocalesQuery } from '../services/locales';\r\nimport { useGetManyDraftRelationCountQuery } from '../services/relations';\r\nimport { cleanData } from '../utils/clean';\r\nimport { getTranslation } from '../utils/getTranslation';\r\nimport { capitalize } from '../utils/strings';\r\n\r\nimport { BulkLocaleActionModal } from './BulkLocaleActionModal';\r\n\r\nimport type { Locale } from '../../../shared/contracts/locales';\r\nimport type { I18nBaseQuery } from '../types';\r\nimport type { Modules } from '@strapi/types';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * LocalePickerAction\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface LocaleOptionProps {\r\n  isDraftAndPublishEnabled: boolean;\r\n  locale: Locale;\r\n  status: 'draft' | 'published' | 'modified';\r\n  entryExists: boolean;\r\n}\r\n\r\nconst statusVariants: Record<LocaleOptionProps['status'], StatusVariant> = {\r\n  draft: 'secondary',\r\n  published: 'success',\r\n  modified: 'alternative',\r\n};\r\n\r\nconst LocaleOption = ({\r\n  isDraftAndPublishEnabled,\r\n  locale,\r\n  status,\r\n  entryExists,\r\n}: LocaleOptionProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  if (!entryExists) {\r\n    return formatMessage(\r\n      {\r\n        id: getTranslation('CMEditViewLocalePicker.locale.create'),\r\n        defaultMessage: 'Create <bold>{locale}</bold> locale',\r\n      },\r\n      {\r\n        bold: (locale: React.ReactNode) => <b>{locale}</b>,\r\n        locale: locale.name,\r\n      }\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Flex width=\"100%\" gap={1} justifyContent=\"space-between\">\r\n      <Typography>{locale.name}</Typography>\r\n      {isDraftAndPublishEnabled ? (\r\n        <Status\r\n          display=\"flex\"\r\n          paddingLeft=\"6px\"\r\n          paddingRight=\"6px\"\r\n          paddingTop=\"2px\"\r\n          paddingBottom=\"2px\"\r\n          size=\"S\"\r\n          variant={statusVariants[status]}\r\n        >\r\n          <Typography tag=\"span\" variant=\"pi\" fontWeight=\"bold\">\r\n            {capitalize(status)}\r\n          </Typography>\r\n        </Status>\r\n      ) : null}\r\n    </Flex>\r\n  );\r\n};\r\n\r\nconst LocalePickerAction = ({\r\n  document,\r\n  meta,\r\n  model,\r\n  collectionType,\r\n  documentId,\r\n}: HeaderActionProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const [{ query }, setQuery] = useQueryParams<I18nBaseQuery>();\r\n  const { hasI18n, canCreate, canRead } = useI18n();\r\n  const { data: locales = [] } = useGetLocalesQuery();\r\n  const currentDesiredLocale = query.plugins?.i18n?.locale;\r\n  const { schema } = useDocument({\r\n    model,\r\n    collectionType,\r\n    documentId,\r\n    params: { locale: currentDesiredLocale },\r\n  });\r\n\r\n  const handleSelect = React.useCallback(\r\n    (value: string) => {\r\n      setQuery({\r\n        plugins: {\r\n          ...query.plugins,\r\n          i18n: {\r\n            locale: value,\r\n          },\r\n        },\r\n      });\r\n    },\r\n    [query.plugins, setQuery]\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    if (!Array.isArray(locales) || !hasI18n) {\r\n      return;\r\n    }\r\n    /**\r\n     * Handle the case where the current locale query param doesn't exist\r\n     * in the list of available locales, so we redirect to the default locale.\r\n     */\r\n    const doesLocaleExist = locales.find((loc) => loc.code === currentDesiredLocale);\r\n    const defaultLocale = locales.find((locale) => locale.isDefault);\r\n    if (!doesLocaleExist && defaultLocale?.code) {\r\n      handleSelect(defaultLocale.code);\r\n    }\r\n  }, [handleSelect, hasI18n, locales, currentDesiredLocale]);\r\n\r\n  const currentLocale = Array.isArray(locales)\r\n    ? locales.find((locale) => locale.code === currentDesiredLocale)\r\n    : undefined;\r\n\r\n  const allCurrentLocales = [\r\n    { status: getDocumentStatus(document, meta), locale: currentLocale?.code },\r\n    ...(document?.localizations ?? []),\r\n  ];\r\n\r\n  if (!hasI18n || !Array.isArray(locales) || locales.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  const displayedLocales = locales.filter((locale) => {\r\n    /**\r\n     * If you can read we allow you to see the locale exists\r\n     * otherwise the locale is hidden.\r\n     */\r\n    return canRead.includes(locale.code);\r\n  });\r\n\r\n  return {\r\n    label: formatMessage({\r\n      id: getTranslation('Settings.locales.modal.locales.label'),\r\n      defaultMessage: 'Locales',\r\n    }),\r\n    options: displayedLocales.map((locale) => {\r\n      const entryWithLocaleExists = allCurrentLocales.some((doc) => doc.locale === locale.code);\r\n\r\n      const currentLocaleDoc = allCurrentLocales.find((doc) =>\r\n        'locale' in doc ? doc.locale === locale.code : false\r\n      );\r\n\r\n      const permissionsToCheck = currentLocaleDoc ? canRead : canCreate;\r\n\r\n      return {\r\n        disabled: !permissionsToCheck.includes(locale.code),\r\n        value: locale.code,\r\n        label: (\r\n          <LocaleOption\r\n            isDraftAndPublishEnabled={!!schema?.options?.draftAndPublish}\r\n            locale={locale}\r\n            status={currentLocaleDoc?.status}\r\n            entryExists={entryWithLocaleExists}\r\n          />\r\n        ),\r\n        startIcon: !entryWithLocaleExists ? <Plus /> : null,\r\n      };\r\n    }),\r\n    customizeContent: () => currentLocale?.name,\r\n    onSelect: handleSelect,\r\n    value: currentLocale,\r\n  };\r\n};\r\n\r\ntype UseDocument = typeof useDocument;\r\n\r\nconst getDocumentStatus = (\r\n  document: ReturnType<UseDocument>['document'],\r\n  meta: ReturnType<UseDocument>['meta']\r\n): 'draft' | 'published' | 'modified' => {\r\n  const docStatus = document?.status;\r\n  const statuses = meta?.availableStatus ?? [];\r\n\r\n  /**\r\n   * Creating an entry\r\n   */\r\n  if (!docStatus) {\r\n    return 'draft';\r\n  }\r\n\r\n  /**\r\n   * We're viewing a draft, but the document could have a published version\r\n   */\r\n  if (docStatus === 'draft' && statuses.find((doc) => doc.publishedAt !== null)) {\r\n    return 'published';\r\n  }\r\n\r\n  return docStatus;\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * FillFromAnotherLocaleAction\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst FillFromAnotherLocaleAction = ({\r\n  documentId,\r\n  meta,\r\n  model,\r\n  collectionType,\r\n}: HeaderActionProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const [{ query }] = useQueryParams<I18nBaseQuery>();\r\n  const { hasI18n } = useI18n();\r\n  const currentDesiredLocale = query.plugins?.i18n?.locale;\r\n  const [localeSelected, setLocaleSelected] = React.useState<string | null>(null);\r\n  const setValues = useForm('FillFromAnotherLocale', (state) => state.setValues);\r\n\r\n  const { getDocument } = useDocumentActions();\r\n  const { schema, components } = useDocument({\r\n    model,\r\n    documentId,\r\n    collectionType,\r\n    params: { locale: currentDesiredLocale },\r\n  });\r\n  const { data: locales = [] } = useGetLocalesQuery();\r\n\r\n  const availableLocales = Array.isArray(locales)\r\n    ? locales.filter((locale) => meta?.availableLocales.some((l) => l.locale === locale.code))\r\n    : [];\r\n\r\n  const fillFromLocale = (onClose: () => void) => async () => {\r\n    const response = await getDocument({\r\n      collectionType,\r\n      model,\r\n      documentId,\r\n      params: { locale: localeSelected },\r\n    });\r\n    if (!response || !schema) {\r\n      return;\r\n    }\r\n\r\n    const { data } = response;\r\n\r\n    const cleanedData = cleanData(data, schema, components);\r\n\r\n    setValues(cleanedData);\r\n\r\n    onClose();\r\n  };\r\n\r\n  if (!hasI18n) {\r\n    return null;\r\n  }\r\n\r\n  return {\r\n    type: 'icon',\r\n    icon: <Earth />,\r\n    disabled: availableLocales.length === 0,\r\n    label: formatMessage({\r\n      id: getTranslation('CMEditViewCopyLocale.copy-text'),\r\n      defaultMessage: 'Fill in from another locale',\r\n    }),\r\n    dialog: {\r\n      type: 'dialog',\r\n      title: formatMessage({\r\n        id: getTranslation('CMEditViewCopyLocale.dialog.title'),\r\n        defaultMessage: 'Confirmation',\r\n      }),\r\n      content: ({ onClose }: { onClose: () => void }) => (\r\n        <>\r\n          <Dialog.Body>\r\n            <Flex direction=\"column\" gap={3}>\r\n              <WarningCircle width=\"24px\" height=\"24px\" fill=\"danger600\" />\r\n              <Typography textAlign=\"center\">\r\n                {formatMessage({\r\n                  id: getTranslation('CMEditViewCopyLocale.dialog.body'),\r\n                  defaultMessage:\r\n                    'Your current content will be erased and filled by the content of the selected locale:',\r\n                })}\r\n              </Typography>\r\n              <Field.Root width=\"100%\">\r\n                <Field.Label>\r\n                  {formatMessage({\r\n                    id: getTranslation('CMEditViewCopyLocale.dialog.field.label'),\r\n                    defaultMessage: 'Locale',\r\n                  })}\r\n                </Field.Label>\r\n                <SingleSelect\r\n                  value={localeSelected}\r\n                  placeholder={formatMessage({\r\n                    id: getTranslation('CMEditViewCopyLocale.dialog.field.placeholder'),\r\n                    defaultMessage: 'Select one locale...',\r\n                  })}\r\n                  // @ts-expect-error – the DS will handle numbers, but we're not allowing the API.\r\n                  onChange={(value) => setLocaleSelected(value)}\r\n                >\r\n                  {availableLocales.map((locale) => (\r\n                    <SingleSelectOption key={locale.code} value={locale.code}>\r\n                      {locale.name}\r\n                    </SingleSelectOption>\r\n                  ))}\r\n                </SingleSelect>\r\n              </Field.Root>\r\n            </Flex>\r\n          </Dialog.Body>\r\n          <Dialog.Footer>\r\n            <Flex gap={2} width=\"100%\">\r\n              <Button flex=\"auto\" variant=\"tertiary\" onClick={onClose}>\r\n                {formatMessage({\r\n                  id: getTranslation('CMEditViewCopyLocale.cancel-text'),\r\n                  defaultMessage: 'No, cancel',\r\n                })}\r\n              </Button>\r\n              <Button flex=\"auto\" variant=\"success\" onClick={fillFromLocale(onClose)}>\r\n                {formatMessage({\r\n                  id: getTranslation('CMEditViewCopyLocale.submit-text'),\r\n                  defaultMessage: 'Yes, fill in',\r\n                })}\r\n              </Button>\r\n            </Flex>\r\n          </Dialog.Footer>\r\n        </>\r\n      ),\r\n    },\r\n  };\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * DeleteLocaleAction\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst DeleteLocaleAction: DocumentActionComponent = ({\r\n  document,\r\n  documentId,\r\n  model,\r\n  collectionType,\r\n}) => {\r\n  const { formatMessage } = useIntl();\r\n  const navigate = useNavigate();\r\n  const { toggleNotification } = useNotification();\r\n  const { delete: deleteAction, isLoading } = useDocumentActions();\r\n  const { hasI18n, canDelete } = useI18n();\r\n\r\n  // Get the current locale object, using the URL instead of document so it works while creating\r\n  const [{ query }] = useQueryParams<I18nBaseQuery>();\r\n  const { data: locales = [] } = useGetLocalesQuery();\r\n  const currentDesiredLocale = query.plugins?.i18n?.locale;\r\n  const locale = !('error' in locales) && locales.find((loc) => loc.code === currentDesiredLocale);\r\n\r\n  if (!hasI18n) {\r\n    return null;\r\n  }\r\n\r\n  return {\r\n    disabled:\r\n      (document?.locale && !canDelete.includes(document.locale)) || !document || !document.id,\r\n    position: ['header', 'table-row'],\r\n    label: formatMessage(\r\n      {\r\n        id: getTranslation('actions.delete.label'),\r\n        defaultMessage: 'Delete entry ({locale})',\r\n      },\r\n      { locale: locale && locale.name }\r\n    ),\r\n    icon: <StyledTrash />,\r\n    variant: 'danger',\r\n    dialog: {\r\n      type: 'dialog',\r\n      title: formatMessage({\r\n        id: getTranslation('actions.delete.dialog.title'),\r\n        defaultMessage: 'Confirmation',\r\n      }),\r\n      content: (\r\n        <Flex direction=\"column\" gap={2}>\r\n          <WarningCircle width=\"24px\" height=\"24px\" fill=\"danger600\" />\r\n          <Typography tag=\"p\" variant=\"omega\" textAlign=\"center\">\r\n            {formatMessage({\r\n              id: getTranslation('actions.delete.dialog.body'),\r\n              defaultMessage: 'Are you sure?',\r\n            })}\r\n          </Typography>\r\n        </Flex>\r\n      ),\r\n      loading: isLoading,\r\n      onConfirm: async () => {\r\n        const unableToDelete =\r\n          // We are unable to delete a collection type without a document ID\r\n          // & unable to delete generally if there is no document locale\r\n          (collectionType !== 'single-types' && !documentId) || !document?.locale;\r\n\r\n        if (unableToDelete) {\r\n          console.error(\r\n            \"You're trying to delete a document without an id or locale, this is likely a bug with Strapi. Please open an issue.\"\r\n          );\r\n\r\n          toggleNotification({\r\n            message: formatMessage({\r\n              id: getTranslation('actions.delete.error'),\r\n              defaultMessage: 'An error occurred while trying to delete the document locale.',\r\n            }),\r\n            type: 'danger',\r\n          });\r\n\r\n          return;\r\n        }\r\n\r\n        const res = await deleteAction({\r\n          documentId,\r\n          model,\r\n          collectionType,\r\n          params: { locale: document.locale },\r\n        });\r\n\r\n        if (!('error' in res)) {\r\n          navigate({ pathname: `../${collectionType}/${model}` }, { replace: true });\r\n        }\r\n      },\r\n    },\r\n  };\r\n};\r\n\r\nexport type LocaleStatus = {\r\n  locale: string;\r\n  status: Modules.Documents.Params.PublicationStatus.Kind | 'modified';\r\n};\r\n\r\ninterface ExtendedDocumentActionProps extends DocumentActionProps {\r\n  action?: 'bulk-publish' | 'bulk-unpublish';\r\n}\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * BulkLocaleAction\r\n *\r\n * This component is used to handle bulk publish and unpublish actions on locales.\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst BulkLocaleAction: DocumentActionComponent = ({\r\n  document,\r\n  documentId,\r\n  model,\r\n  collectionType,\r\n  action,\r\n}: ExtendedDocumentActionProps) => {\r\n  const locale = document?.locale ?? null;\r\n  const [{ query }] = useQueryParams<{ status: 'draft' | 'published' }>();\r\n\r\n  const params = React.useMemo(() => buildValidParams(query), [query]);\r\n  const isOnPublishedTab = query.status === 'published';\r\n\r\n  const { formatMessage } = useIntl();\r\n  const { hasI18n, canPublish } = useI18n();\r\n  const { toggleNotification } = useNotification();\r\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\r\n\r\n  const [selectedRows, setSelectedRows] = React.useState<any[]>([]);\r\n  const [isDraftRelationConfirmationOpen, setIsDraftRelationConfirmationOpen] =\r\n    React.useState<boolean>(false);\r\n\r\n  const { publishMany: publishManyAction, unpublishMany: unpublishManyAction } =\r\n    useDocumentActions();\r\n\r\n  const { schema, validate } = useDocument(\r\n    {\r\n      model,\r\n      collectionType,\r\n      documentId,\r\n      params: {\r\n        locale,\r\n      },\r\n    },\r\n    {\r\n      // No need to fetch the document, the data is already available in the `document` prop\r\n      skip: true,\r\n    }\r\n  );\r\n\r\n  const { data: localesMetadata = [] } = useGetLocalesQuery(hasI18n ? undefined : skipToken);\r\n\r\n  const headers = [\r\n    {\r\n      label: formatMessage({\r\n        id: 'global.name',\r\n        defaultMessage: 'Name',\r\n      }),\r\n      name: 'name',\r\n    },\r\n    {\r\n      label: formatMessage({\r\n        id: getTranslation('CMEditViewBulkLocale.status'),\r\n        defaultMessage: 'Status',\r\n      }),\r\n      name: 'status',\r\n    },\r\n    {\r\n      label: formatMessage({\r\n        id: getTranslation('CMEditViewBulkLocale.publication-status'),\r\n        defaultMessage: 'Publication Status',\r\n      }),\r\n      name: 'publication-status',\r\n    },\r\n  ];\r\n\r\n  // Extract the rows for the bulk locale publish modal and any validation\r\n  // errors per locale\r\n  const [rows, validationErrors] = React.useMemo(() => {\r\n    if (!document) {\r\n      return [[], {}];\r\n    }\r\n\r\n    const localizations = document.localizations ?? [];\r\n\r\n    // Build the rows for the bulk locale publish modal by combining the current\r\n    // document with all the available locales from the document meta\r\n    const locales: LocaleStatus[] = localizations.map((doc: any) => {\r\n      const { locale, status } = doc;\r\n      return { locale, status };\r\n    });\r\n\r\n    // Add the current document locale\r\n    locales.unshift({\r\n      locale: document.locale,\r\n      status: document.status,\r\n    });\r\n\r\n    // Build the validation errors for each locale.\r\n    const allDocuments = [document, ...localizations];\r\n    const errors = allDocuments.reduce<FormErrors>((errs, document) => {\r\n      if (!document) {\r\n        return errs;\r\n      }\r\n\r\n      // Validate each locale entry via the useDocument validate function and store any errors in a dictionary\r\n      const validation = validate(document as Modules.Documents.AnyDocument);\r\n      if (validation !== null) {\r\n        errs[document.locale] = validation;\r\n      }\r\n      return errs;\r\n    }, {});\r\n\r\n    return [locales, errors];\r\n  }, [document, validate]);\r\n\r\n  const isBulkPublish = action === 'bulk-publish';\r\n  const localesForAction = selectedRows.reduce((acc: string[], selectedRow: LocaleStatus) => {\r\n    const isValidLocale =\r\n      // Validation errors are irrelevant if we are trying to unpublish\r\n      !isBulkPublish || !Object.keys(validationErrors).includes(selectedRow.locale);\r\n\r\n    const shouldAddLocale = isBulkPublish\r\n      ? selectedRow.status !== 'published' && isValidLocale\r\n      : selectedRow.status !== 'draft' && isValidLocale;\r\n\r\n    if (shouldAddLocale) {\r\n      acc.push(selectedRow.locale);\r\n    }\r\n\r\n    return acc;\r\n  }, []);\r\n\r\n  // TODO skipping this for now as there is a bug with the draft relation count that will be worked on separately\r\n  // see https://www.notion.so/strapi/Count-draft-relations-56901b492efb45ab90d42fe975b32bd8?pvs=4\r\n  const enableDraftRelationsCount = false;\r\n  const {\r\n    data: draftRelationsCount = 0,\r\n    isLoading: isDraftRelationsLoading,\r\n    error: isDraftRelationsError,\r\n  } = useGetManyDraftRelationCountQuery(\r\n    {\r\n      model,\r\n      documentIds: [documentId!],\r\n      locale: localesForAction,\r\n    },\r\n    {\r\n      skip: !enableDraftRelationsCount || !documentId || localesForAction.length === 0,\r\n    }\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    if (isDraftRelationsError) {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatAPIError(isDraftRelationsError),\r\n      });\r\n    }\r\n  }, [isDraftRelationsError, toggleNotification, formatAPIError]);\r\n\r\n  if (!schema?.options?.draftAndPublish) {\r\n    return null;\r\n  }\r\n\r\n  if (!hasI18n) {\r\n    return null;\r\n  }\r\n\r\n  if (!documentId) {\r\n    return null;\r\n  }\r\n\r\n  // This document action can be enabled given that draft and publish and i18n are\r\n  // enabled and we can publish the current locale.\r\n\r\n  const publish = async () => {\r\n    await publishManyAction({\r\n      model,\r\n      documentIds: [documentId],\r\n      params: {\r\n        ...params,\r\n        locale: localesForAction,\r\n      },\r\n    });\r\n\r\n    setSelectedRows([]);\r\n  };\r\n\r\n  const unpublish = async () => {\r\n    await unpublishManyAction({\r\n      model,\r\n      documentIds: [documentId],\r\n      params: {\r\n        ...params,\r\n        locale: localesForAction,\r\n      },\r\n    });\r\n\r\n    setSelectedRows([]);\r\n  };\r\n\r\n  const handleAction = async () => {\r\n    if (draftRelationsCount > 0) {\r\n      setIsDraftRelationConfirmationOpen(true);\r\n    } else if (isBulkPublish) {\r\n      await publish();\r\n    } else {\r\n      await unpublish();\r\n    }\r\n  };\r\n\r\n  if (isDraftRelationConfirmationOpen) {\r\n    return {\r\n      label: formatMessage({\r\n        id: 'app.components.ConfirmDialog.title',\r\n        defaultMessage: 'Confirmation',\r\n      }),\r\n      variant: 'danger',\r\n      dialog: {\r\n        onCancel: () => {\r\n          setIsDraftRelationConfirmationOpen(false);\r\n        },\r\n        onConfirm: async () => {\r\n          await publish();\r\n\r\n          setIsDraftRelationConfirmationOpen(false);\r\n        },\r\n        type: 'dialog',\r\n        title: formatMessage({\r\n          id: getTranslation('actions.publish.dialog.title'),\r\n          defaultMessage: 'Confirmation',\r\n        }),\r\n        content: (\r\n          <Flex direction=\"column\" alignItems=\"center\" gap={2}>\r\n            <WarningCircle width=\"2.4rem\" height=\"2.4rem\" fill=\"danger600\" />\r\n            <Typography textAlign=\"center\">\r\n              {formatMessage({\r\n                id: getTranslation('CMEditViewBulkLocale.draft-relation-warning'),\r\n                defaultMessage:\r\n                  'Some locales are related to draft entries. Publishing them could leave broken links in your app.',\r\n              })}\r\n            </Typography>\r\n            <Typography textAlign=\"center\">\r\n              {formatMessage({\r\n                id: getTranslation('CMEditViewBulkLocale.continue-confirmation'),\r\n                defaultMessage: 'Are you sure you want to continue?',\r\n              })}\r\n            </Typography>\r\n          </Flex>\r\n        ),\r\n      },\r\n    };\r\n  }\r\n\r\n  const hasPermission = selectedRows\r\n    .map(({ locale }) => locale)\r\n    .every((locale) => canPublish.includes(locale));\r\n\r\n  return {\r\n    label: formatMessage({\r\n      id: getTranslation(`CMEditViewBulkLocale.${isBulkPublish ? 'publish' : 'unpublish'}-title`),\r\n      defaultMessage: `${isBulkPublish ? 'Publish' : 'Unpublish'} Multiple Locales`,\r\n    }),\r\n    variant: isBulkPublish ? 'secondary' : 'danger',\r\n    icon: isBulkPublish ? <ListPlus /> : <Cross />,\r\n    disabled: isOnPublishedTab || canPublish.length === 0,\r\n    position: ['panel'],\r\n    dialog: {\r\n      type: 'modal',\r\n      title: formatMessage({\r\n        id: getTranslation(`CMEditViewBulkLocale.${isBulkPublish ? 'publish' : 'unpublish'}-title`),\r\n        defaultMessage: `${isBulkPublish ? 'Publish' : 'Unpublish'} Multiple Locales`,\r\n      }),\r\n      content: () => {\r\n        return (\r\n          <Table.Root\r\n            headers={headers}\r\n            rows={rows.map((row) => ({\r\n              ...row,\r\n              id: row.locale,\r\n            }))}\r\n            selectedRows={selectedRows}\r\n            onSelectedRowsChange={(tableSelectedRows) => setSelectedRows(tableSelectedRows)}\r\n          >\r\n            <BulkLocaleActionModal\r\n              validationErrors={validationErrors}\r\n              headers={headers}\r\n              rows={rows}\r\n              localesMetadata={localesMetadata as Locale[]}\r\n              action={action ?? 'bulk-publish'}\r\n            />\r\n          </Table.Root>\r\n        );\r\n      },\r\n      footer: () => (\r\n        <Modal.Footer justifyContent=\"flex-end\">\r\n          <Button\r\n            loading={isDraftRelationsLoading}\r\n            disabled={!hasPermission || localesForAction.length === 0}\r\n            variant=\"default\"\r\n            onClick={handleAction}\r\n          >\r\n            {formatMessage({\r\n              id: isBulkPublish ? 'app.utils.publish' : 'app.utils.unpublish',\r\n              defaultMessage: isBulkPublish ? 'Publish' : 'Unpublish',\r\n            })}\r\n          </Button>\r\n        </Modal.Footer>\r\n      ),\r\n    },\r\n  };\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * BulkLocalePublishAction\r\n * -----------------------------------------------------------------------------------------------*/\r\nconst BulkLocalePublishAction: DocumentActionComponent = (props: ExtendedDocumentActionProps) => {\r\n  return BulkLocaleAction({ action: 'bulk-publish', ...props });\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * BulkLocaleUnpublishAction\r\n * -----------------------------------------------------------------------------------------------*/\r\nconst BulkLocaleUnpublishAction: DocumentActionComponent = (props: ExtendedDocumentActionProps) => {\r\n  return BulkLocaleAction({ action: 'bulk-unpublish', ...props });\r\n};\r\n\r\n/**\r\n * Because the icon system is completely broken, we have to do\r\n * this to remove the fill from the cog.\r\n */\r\nconst StyledTrash = styled(Trash)`\r\n  path {\r\n    fill: currentColor;\r\n  }\r\n`;\r\n\r\nexport {\r\n  BulkLocalePublishAction,\r\n  BulkLocaleUnpublishAction,\r\n  DeleteLocaleAction,\r\n  LocalePickerAction,\r\n  FillFromAnotherLocaleAction,\r\n};\r\n", "import * as React from 'react';\r\n\r\nimport { useAuth } from '@strapi/admin/strapi-admin';\r\nimport { unstable_useDocument as useDocument } from '@strapi/content-manager/strapi-admin';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nimport { doesPluginOptionsHaveI18nLocalized } from '../utils/fields';\r\nimport { capitalize } from '../utils/strings';\r\n\r\ntype UseI18n = () => {\r\n  hasI18n: boolean;\r\n  canCreate: string[];\r\n  canRead: string[];\r\n  canUpdate: string[];\r\n  canDelete: string[];\r\n  canPublish: string[];\r\n};\r\n\r\n/**\r\n * @alpha\r\n * @description This hook is used to get the i18n status of a content type.\r\n * Also returns the CRUDP permission locale properties for the content type\r\n * so we know which locales the user can perform actions on.\r\n */\r\nconst useI18n: UseI18n = () => {\r\n  // Extract the params from the URL to pass to our useDocument hook\r\n  const params = useParams<{ collectionType: string; slug: string; model: string }>();\r\n\r\n  const userPermissions = useAuth('useI18n', (state) => state.permissions);\r\n  const actions = React.useMemo(() => {\r\n    const permissions = userPermissions.filter((permission) => permission.subject === params.slug);\r\n\r\n    return permissions.reduce<Omit<ReturnType<UseI18n>, 'hasI18n'>>(\r\n      (acc, permission) => {\r\n        const [actionShorthand] = permission.action.split('.').slice(-1);\r\n\r\n        return {\r\n          ...acc,\r\n          [`can${capitalize(actionShorthand)}`]: permission.properties?.locales ?? [],\r\n        };\r\n      },\r\n      { canCreate: [], canRead: [], canUpdate: [], canDelete: [], canPublish: [] }\r\n    );\r\n  }, [params.slug, userPermissions]);\r\n\r\n  // TODO: use specific hook to get schema only\r\n  const { schema } = useDocument(\r\n    {\r\n      // We can non-null assert these because below we skip the query if they are not present\r\n      collectionType: params.collectionType!,\r\n      model: params.slug!,\r\n    },\r\n    {\r\n      skip: true,\r\n    }\r\n  );\r\n\r\n  if (doesPluginOptionsHaveI18nLocalized(schema?.pluginOptions)) {\r\n    return {\r\n      hasI18n: schema.pluginOptions.i18n.localized,\r\n      ...actions,\r\n    };\r\n  }\r\n\r\n  return {\r\n    hasI18n: false,\r\n    ...actions,\r\n  };\r\n};\r\n\r\nexport { useI18n };\r\n", "import has from 'lodash/has';\r\n\r\nconst LOCALIZED_FIELDS = [\r\n  'biginteger',\r\n  'boolean',\r\n  'component',\r\n  'date',\r\n  'datetime',\r\n  'decimal',\r\n  'dynamiczone',\r\n  'email',\r\n  'enumeration',\r\n  'float',\r\n  'integer',\r\n  'json',\r\n  'media',\r\n  'number',\r\n  'password',\r\n  'richtext',\r\n  'blocks',\r\n  'string',\r\n  'text',\r\n  'time',\r\n];\r\n\r\nconst doesPluginOptionsHaveI18nLocalized = (\r\n  opts?: object\r\n): opts is { i18n: { localized: boolean } } => has(opts, ['i18n', 'localized']);\r\n\r\nexport { LOCALIZED_FIELDS, doesPluginOptionsHaveI18nLocalized };\r\n", "const capitalize = (str: string) => str.charAt(0).toUpperCase() + str.slice(1);\r\n\r\nexport { capitalize };\r\n", "import { i18nApi } from './api';\r\n\r\nimport type { CountManyEntriesDraftRelations } from '../../../shared/contracts/content-manager';\r\n\r\nconst relationsApi = i18nApi.injectEndpoints({\r\n  overrideExisting: true,\r\n  endpoints: (builder) => ({\r\n    getManyDraftRelationCount: builder.query<\r\n      CountManyEntriesDraftRelations.Response['data'],\r\n      CountManyEntriesDraftRelations.Request['query'] & {\r\n        model: string;\r\n      }\r\n    >({\r\n      query: ({ model, ...params }) => ({\r\n        url: `/content-manager/collection-types/${model}/actions/countManyEntriesDraftRelations`,\r\n        method: 'GET',\r\n        config: {\r\n          params,\r\n        },\r\n      }),\r\n      transformResponse: (response: CountManyEntriesDraftRelations.Response) => response.data,\r\n    }),\r\n  }),\r\n});\r\n\r\nconst { useGetManyDraftRelationCountQuery } = relationsApi;\r\n\r\nexport { useGetManyDraftRelationCountQuery };\r\n", "import type { Schema } from '@strapi/types';\r\n\r\ntype Data = Record<keyof Schema.ContentType['attributes'], any>;\r\n\r\nconst cleanData = (\r\n  data: Data,\r\n  schema: Schema.ContentType,\r\n  components: Record<string, Schema.Component>\r\n) => {\r\n  const cleanedData = removeFields(data, [\r\n    'createdAt',\r\n    'createdBy',\r\n    'updatedAt',\r\n    'updatedBy',\r\n    'id',\r\n    'documentId',\r\n    'publishedAt',\r\n    'strapi_stage',\r\n    'strapi_assignee',\r\n    'locale',\r\n    'status',\r\n  ]);\r\n\r\n  const cleanedDataWithoutPasswordAndRelation = recursiveRemoveFieldTypes(\r\n    cleanedData,\r\n    schema,\r\n    components,\r\n    ['relation', 'password']\r\n  );\r\n\r\n  return cleanedDataWithoutPasswordAndRelation;\r\n};\r\n\r\nconst removeFields = (data: Data, fields: Array<keyof Schema.ContentType['attributes']>) => {\r\n  return Object.keys(data).reduce((acc, current) => {\r\n    if (fields.includes(current)) {\r\n      return acc;\r\n    }\r\n    acc[current] = data[current];\r\n    return acc;\r\n  }, {} as Data);\r\n};\r\n\r\nconst recursiveRemoveFieldTypes = (\r\n  data: Data,\r\n  schema: Schema.Schema,\r\n  components: Record<string, Schema.Component>,\r\n  fields: Array<keyof Schema.ContentType['attributes']>\r\n) => {\r\n  return Object.keys(data).reduce((acc, current) => {\r\n    const attribute = schema.attributes[current] ?? { type: undefined };\r\n\r\n    if (fields.includes(attribute.type)) {\r\n      return acc;\r\n    }\r\n\r\n    if (attribute.type === 'dynamiczone') {\r\n      acc[current] = data[current].map((componentValue: any, index: number) => {\r\n        const { id: _, ...rest } = recursiveRemoveFieldTypes(\r\n          componentValue,\r\n          components[componentValue.__component],\r\n          components,\r\n          fields\r\n        );\r\n\r\n        return {\r\n          ...rest,\r\n          __temp_key__: index + 1,\r\n        };\r\n      });\r\n    } else if (attribute.type === 'component') {\r\n      const { repeatable, component } = attribute;\r\n\r\n      if (repeatable) {\r\n        acc[current] = (data[current] ?? []).map((compoData: any, index: number) => {\r\n          const { id: _, ...rest } = recursiveRemoveFieldTypes(\r\n            compoData,\r\n            components[component],\r\n            components,\r\n            fields\r\n          );\r\n\r\n          return {\r\n            ...rest,\r\n            __temp_key__: index + 1,\r\n          };\r\n        });\r\n      } else {\r\n        const { id: _, ...rest } = recursiveRemoveFieldTypes(\r\n          data[current] ?? {},\r\n          components[component],\r\n          components,\r\n          fields\r\n        );\r\n\r\n        acc[current] = rest;\r\n      }\r\n    } else {\r\n      acc[current] = data[current];\r\n    }\r\n\r\n    return acc;\r\n  }, {} as any);\r\n};\r\n\r\nexport { cleanData };\r\n", "import * as React from 'react';\r\n\r\nimport { FormErrors, Table, useTable } from '@strapi/admin/strapi-admin';\r\nimport { Box, Typography, IconButton, Flex, Tooltip, Status, Modal } from '@strapi/design-system';\r\nimport { Pencil, CheckCircle, CrossCircle, ArrowsCounterClockwise } from '@strapi/icons';\r\nimport { stringify } from 'qs';\r\nimport { type MessageDescriptor, useIntl, PrimitiveType } from 'react-intl';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { Locale } from '../../../shared/contracts/locales';\r\nimport { getTranslation } from '../utils/getTranslation';\r\nimport { capitalize } from '../utils/strings';\r\n\r\nimport { LocaleStatus } from './CMHeaderActions';\r\n\r\nimport type { Modules } from '@strapi/types';\r\n\r\ntype Status = Modules.Documents.Params.PublicationStatus.Kind | 'modified';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * EntryValidationText\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface EntryValidationTextProps {\r\n  status: Status;\r\n  validationErrors: FormErrors[string] | null;\r\n  action: 'bulk-publish' | 'bulk-unpublish';\r\n}\r\n\r\ninterface TranslationMessage extends MessageDescriptor {\r\n  values?: Record<string, PrimitiveType>;\r\n}\r\n\r\nconst isErrorMessageDescriptor = (object?: string | object): object is TranslationMessage => {\r\n  return (\r\n    typeof object === 'object' && object !== null && 'id' in object && 'defaultMessage' in object\r\n  );\r\n};\r\n\r\nconst EntryValidationText = ({\r\n  status = 'draft',\r\n  validationErrors,\r\n  action,\r\n}: EntryValidationTextProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  /**\r\n   * TODO: Should this be extracted an made into a factory to recursively get\r\n   * error messages??\r\n   */\r\n  const getErrorStr = (key: string, value?: FormErrors[string]): string => {\r\n    if (typeof value === 'string') {\r\n      return `${key}: ${value}`;\r\n    } else if (isErrorMessageDescriptor(value)) {\r\n      return `${key}: ${formatMessage(value)}`;\r\n    } else if (Array.isArray(value)) {\r\n      return value.map((v) => getErrorStr(key, v)).join(' ');\r\n    } else if (typeof value === 'object' && !Array.isArray(value)) {\r\n      return Object.entries(value)\r\n        .map(([k, v]) => getErrorStr(k, v))\r\n        .join(' ');\r\n    } else {\r\n      /**\r\n       * unlikely to happen, but we need to return something\r\n       */\r\n      return '';\r\n    }\r\n  };\r\n\r\n  if (validationErrors) {\r\n    const validationErrorsMessages = Object.entries(validationErrors)\r\n      .map(([key, value]) => {\r\n        return getErrorStr(key, value);\r\n      })\r\n      .join(' ');\r\n\r\n    return (\r\n      <Flex gap={2}>\r\n        <CrossCircle fill=\"danger600\" />\r\n        <Tooltip label={validationErrorsMessages}>\r\n          <Typography\r\n            maxWidth={'30rem'}\r\n            textColor=\"danger600\"\r\n            variant=\"omega\"\r\n            fontWeight=\"semiBold\"\r\n            ellipsis\r\n          >\r\n            {validationErrorsMessages}\r\n          </Typography>\r\n        </Tooltip>\r\n      </Flex>\r\n    );\r\n  }\r\n\r\n  const getStatusMessage = () => {\r\n    if (action === 'bulk-publish') {\r\n      if (status === 'published') {\r\n        return {\r\n          icon: <CheckCircle fill=\"success600\" />,\r\n          text: formatMessage({\r\n            id: 'content-manager.bulk-publish.already-published',\r\n            defaultMessage: 'Already Published',\r\n          }),\r\n          textColor: 'success600',\r\n          fontWeight: 'bold',\r\n        };\r\n      } else if (status === 'modified') {\r\n        return {\r\n          icon: <ArrowsCounterClockwise fill=\"alternative600\" />,\r\n          text: formatMessage({\r\n            id: 'app.utils.ready-to-publish-changes',\r\n            defaultMessage: 'Ready to publish changes',\r\n          }),\r\n        };\r\n      } else {\r\n        return {\r\n          icon: <CheckCircle fill=\"success600\" />,\r\n          text: formatMessage({\r\n            id: 'app.utils.ready-to-publish',\r\n            defaultMessage: 'Ready to publish',\r\n          }),\r\n        };\r\n      }\r\n    } else {\r\n      if (status === 'draft') {\r\n        return {\r\n          icon: <CheckCircle fill=\"success600\" />,\r\n          text: formatMessage({\r\n            id: 'content-manager.bulk-unpublish.already-unpublished',\r\n            defaultMessage: 'Already Unpublished',\r\n          }),\r\n          textColor: 'success600',\r\n          fontWeight: 'bold',\r\n        };\r\n      } else {\r\n        return {\r\n          icon: <CheckCircle fill=\"success600\" />,\r\n          text: formatMessage({\r\n            id: 'app.utils.ready-to-unpublish-changes',\r\n            defaultMessage: 'Ready to unpublish',\r\n          }),\r\n          textColor: 'success600',\r\n          fontWeight: 'bold',\r\n        };\r\n      }\r\n    }\r\n  };\r\n\r\n  const { icon, text, textColor = 'success600', fontWeight = 'normal' } = getStatusMessage();\r\n\r\n  return (\r\n    <Flex gap={2}>\r\n      {icon}\r\n      <Typography textColor={textColor} fontWeight={fontWeight}>\r\n        {text}\r\n      </Typography>\r\n    </Flex>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * BoldChunk\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst BoldChunk = (chunks: React.ReactNode) => <Typography fontWeight=\"bold\">{chunks}</Typography>;\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * BulkLocaleActionModal\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface BulkLocaleActionModalProps {\r\n  rows: LocaleStatus[];\r\n  headers: {\r\n    label: string;\r\n    name: string;\r\n  }[];\r\n  localesMetadata: Locale[];\r\n  validationErrors?: FormErrors;\r\n  action: 'bulk-publish' | 'bulk-unpublish';\r\n}\r\n\r\nconst BulkLocaleActionModal = ({\r\n  headers,\r\n  rows,\r\n  localesMetadata,\r\n  validationErrors = {},\r\n  action,\r\n}: BulkLocaleActionModalProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  const selectedRows = useTable<LocaleStatus[]>(\r\n    'BulkLocaleActionModal',\r\n    (state) => state.selectedRows\r\n  );\r\n\r\n  const getFormattedCountMessage = () => {\r\n    const currentStatusByLocale = rows.reduce<Record<string, string>>((acc, { locale, status }) => {\r\n      acc[locale] = status;\r\n      return acc;\r\n    }, {});\r\n    const localesWithErrors = Object.keys(validationErrors);\r\n\r\n    const publishedCount = selectedRows.filter(\r\n      ({ locale }) => currentStatusByLocale[locale] === 'published'\r\n    ).length;\r\n\r\n    const draftCount = selectedRows.filter(\r\n      ({ locale }) =>\r\n        (currentStatusByLocale[locale] === 'draft' ||\r\n          currentStatusByLocale[locale] === 'modified') &&\r\n        !localesWithErrors.includes(locale)\r\n    ).length;\r\n\r\n    const withErrorsCount = localesWithErrors.length;\r\n    const messageId =\r\n      action === 'bulk-publish'\r\n        ? 'content-manager.containers.list.selectedEntriesModal.selectedCount.publish'\r\n        : 'content-manager.containers.list.selectedEntriesModal.selectedCount.unpublish';\r\n\r\n    const defaultMessage =\r\n      action === 'bulk-publish'\r\n        ? '<b>{publishedCount}</b> {publishedCount, plural, =0 {entries} one {entry} other {entries}} already published. <b>{draftCount}</b> {draftCount, plural, =0 {entries} one {entry} other {entries}} ready to publish. <b>{withErrorsCount}</b> {withErrorsCount, plural, =0 {entries} one {entry} other {entries}} waiting for action.'\r\n        : '<b>{draftCount}</b> {draftCount, plural, =0 {entries} one {entry} other {entries}} already unpublished. <b>{publishedCount}</b> {publishedCount, plural, =0 {entries} one {entry} other {entries}} ready to unpublish.';\r\n\r\n    return formatMessage(\r\n      {\r\n        id: messageId,\r\n        defaultMessage,\r\n      },\r\n      {\r\n        withErrorsCount,\r\n        draftCount,\r\n        publishedCount,\r\n        b: BoldChunk,\r\n      }\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Modal.Body>\r\n      <Typography>{getFormattedCountMessage()}</Typography>\r\n      <Box marginTop={5}>\r\n        <Table.Content>\r\n          <Table.Head>\r\n            <Table.HeaderCheckboxCell />\r\n            {headers.map((head) => (\r\n              <Table.HeaderCell key={head.name} {...head} />\r\n            ))}\r\n          </Table.Head>\r\n          <Table.Body>\r\n            {rows.map(({ locale, status }, index) => {\r\n              const error = validationErrors?.[locale] ?? null;\r\n\r\n              const statusVariant =\r\n                status === 'draft' ? 'primary' : status === 'published' ? 'success' : 'alternative';\r\n\r\n              return (\r\n                <Table.Row key={index}>\r\n                  <Table.CheckboxCell id={locale} aria-label={`Select ${locale}`} />\r\n                  <Table.Cell>\r\n                    <Typography variant=\"sigma\" textColor=\"neutral600\">\r\n                      {Array.isArray(localesMetadata)\r\n                        ? localesMetadata.find((localeEntry) => localeEntry.code === locale)?.name\r\n                        : locale}\r\n                    </Typography>\r\n                  </Table.Cell>\r\n                  <Table.Cell>\r\n                    <Box display=\"flex\">\r\n                      <Status\r\n                        display=\"flex\"\r\n                        paddingLeft=\"6px\"\r\n                        paddingRight=\"6px\"\r\n                        paddingTop=\"2px\"\r\n                        paddingBottom=\"2px\"\r\n                        size={'S'}\r\n                        variant={statusVariant}\r\n                      >\r\n                        <Typography tag=\"span\" variant=\"pi\" fontWeight=\"bold\">\r\n                          {capitalize(status)}\r\n                        </Typography>\r\n                      </Status>\r\n                    </Box>\r\n                  </Table.Cell>\r\n                  <Table.Cell>\r\n                    <EntryValidationText validationErrors={error} status={status} action={action} />\r\n                  </Table.Cell>\r\n                  <Table.Cell>\r\n                    <IconButton\r\n                      tag={Link}\r\n                      to={{\r\n                        search: stringify({ plugins: { i18n: { locale } } }),\r\n                      }}\r\n                      label={formatMessage(\r\n                        {\r\n                          id: getTranslation('Settings.list.actions.edit'),\r\n                          defaultMessage: 'Edit {name} locale',\r\n                        },\r\n                        {\r\n                          name: locale,\r\n                        }\r\n                      )}\r\n                      variant=\"ghost\"\r\n                    >\r\n                      <Pencil />\r\n                    </IconButton>\r\n                  </Table.Cell>\r\n                </Table.Row>\r\n              );\r\n            })}\r\n          </Table.Body>\r\n        </Table.Content>\r\n      </Box>\r\n    </Modal.Body>\r\n  );\r\n};\r\n\r\nexport { BulkLocaleActionModal };\r\nexport type { BulkLocaleActionModalProps };\r\n", "import * as React from 'react';\r\n\r\nimport { Typography } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { useI18n } from '../hooks/useI18n';\r\nimport { getTranslation } from '../utils/getTranslation';\r\n\r\nconst Emphasis = (chunks: React.ReactNode) => {\r\n  return (\r\n    <Typography fontWeight=\"semiBold\" textColor=\"danger500\">\r\n      {chunks}\r\n    </Typography>\r\n  );\r\n};\r\n\r\nconst DeleteModalAdditionalInfo = () => {\r\n  const { hasI18n } = useI18n();\r\n  const { formatMessage } = useIntl();\r\n\r\n  if (!hasI18n) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Typography textColor=\"danger500\">\r\n      {formatMessage(\r\n        {\r\n          id: getTranslation('Settings.list.actions.deleteAdditionalInfos'),\r\n          defaultMessage:\r\n            'This will delete the active locale versions <em>(from Internationalization)</em>',\r\n        },\r\n        {\r\n          em: Emphasis,\r\n        }\r\n      )}\r\n    </Typography>\r\n  );\r\n};\r\n\r\nconst PublishModalAdditionalInfo = () => {\r\n  const { hasI18n } = useI18n();\r\n  const { formatMessage } = useIntl();\r\n\r\n  if (!hasI18n) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Typography textColor=\"danger500\">\r\n      {formatMessage(\r\n        {\r\n          id: getTranslation('Settings.list.actions.publishAdditionalInfos'),\r\n          defaultMessage:\r\n            'This will publish the active locale versions <em>(from Internationalization)</em>',\r\n        },\r\n        {\r\n          em: Emphasis,\r\n        }\r\n      )}\r\n    </Typography>\r\n  );\r\n};\r\n\r\nconst UnpublishModalAdditionalInfo = () => {\r\n  const { hasI18n } = useI18n();\r\n  const { formatMessage } = useIntl();\r\n\r\n  if (!hasI18n) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Typography textColor=\"danger500\">\r\n      {formatMessage(\r\n        {\r\n          id: getTranslation('Settings.list.actions.unpublishAdditionalInfos'),\r\n          defaultMessage:\r\n            'This will unpublish the active locale versions <em>(from Internationalization)</em>',\r\n        },\r\n        {\r\n          em: Emphasis,\r\n        }\r\n      )}\r\n    </Typography>\r\n  );\r\n};\r\n\r\nexport { DeleteModalAdditionalInfo, PublishModalAdditionalInfo, UnpublishModalAdditionalInfo };\r\n", "import * as React from 'react';\r\n\r\nimport { useQueryParams } from '@strapi/admin/strapi-admin';\r\nimport { SingleSelect, SingleSelectOption } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { useI18n } from '../hooks/useI18n';\r\nimport { useGetLocalesQuery } from '../services/locales';\r\nimport { getTranslation } from '../utils/getTranslation';\r\n\r\nimport type { I18nBaseQuery } from '../types';\r\n\r\ninterface Query extends I18nBaseQuery {\r\n  page?: number;\r\n}\r\n\r\nconst LocalePicker = () => {\r\n  const { formatMessage } = useIntl();\r\n  const [{ query }, setQuery] = useQueryParams<Query>();\r\n\r\n  const { hasI18n, canRead, canCreate } = useI18n();\r\n  const { data: locales = [] } = useGetLocalesQuery(undefined, {\r\n    skip: !hasI18n,\r\n  });\r\n\r\n  const handleChange = React.useCallback(\r\n    (code: string, replace = false) => {\r\n      setQuery(\r\n        {\r\n          page: 1,\r\n          plugins: { ...query.plugins, i18n: { locale: code } },\r\n        },\r\n        'push',\r\n        replace\r\n      );\r\n    },\r\n    [query.plugins, setQuery]\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    if (!Array.isArray(locales) || !hasI18n) {\r\n      return;\r\n    }\r\n    /**\r\n     * Handle the case where the current locale query param doesn't exist\r\n     * in the list of available locales, so we redirect to the default locale.\r\n     */\r\n    const currentDesiredLocale = query.plugins?.i18n?.locale;\r\n    const doesLocaleExist = locales.find((loc) => loc.code === currentDesiredLocale);\r\n    const defaultLocale = locales.find((locale) => locale.isDefault);\r\n    if (!doesLocaleExist && defaultLocale?.code) {\r\n      handleChange(defaultLocale.code, true);\r\n    }\r\n  }, [hasI18n, handleChange, locales, query.plugins?.i18n?.locale]);\r\n\r\n  if (!hasI18n || !Array.isArray(locales) || locales.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  const displayedLocales = locales.filter((locale) => {\r\n    /**\r\n     * If you can create or read we allow you to see the locale exists\r\n     * this is because in the ListView, you may be able to create a new entry\r\n     * in a locale you can't read.\r\n     */\r\n    return canCreate.includes(locale.code) || canRead.includes(locale.code);\r\n  });\r\n\r\n  return (\r\n    <SingleSelect\r\n      size=\"S\"\r\n      aria-label={formatMessage({\r\n        id: getTranslation('actions.select-locale'),\r\n        defaultMessage: 'Select locale',\r\n      })}\r\n      value={query.plugins?.i18n?.locale || locales.find((locale) => locale.isDefault)?.code}\r\n      // @ts-expect-error – This can be removed in V2 of the DS.\r\n      onChange={handleChange}\r\n    >\r\n      {displayedLocales.map((locale) => (\r\n        <SingleSelectOption key={locale.id} value={locale.code}>\r\n          {locale.name}\r\n        </SingleSelectOption>\r\n      ))}\r\n    </SingleSelect>\r\n  );\r\n};\r\n\r\nexport { LocalePicker };\r\n", "/* eslint-disable check-file/filename-naming-convention */\r\nimport * as React from 'react';\r\n\r\nimport { Flex, VisuallyHidden } from '@strapi/design-system';\r\nimport { Earth, EarthStriked } from '@strapi/icons';\r\nimport { MessageDescriptor, useIntl } from 'react-intl';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { getTranslation } from '../utils/getTranslation';\r\n\r\nimport type { EditFieldLayout, EditLayout } from '@strapi/content-manager/strapi-admin';\r\n\r\ninterface MutateEditViewArgs {\r\n  layout: EditLayout;\r\n}\r\n\r\nconst mutateEditViewHook = ({ layout }: MutateEditViewArgs): MutateEditViewArgs => {\r\n  // If i18n isn't explicitly enabled on the content type, then no field can be localized\r\n  if (\r\n    !('i18n' in layout.options) ||\r\n    (typeof layout.options.i18n === 'object' &&\r\n      layout.options.i18n !== null &&\r\n      'localized' in layout.options.i18n &&\r\n      !layout.options.i18n.localized)\r\n  ) {\r\n    return { layout };\r\n  }\r\n\r\n  const components = Object.entries(layout.components).reduce<EditLayout['components']>(\r\n    (acc, [key, componentLayout]) => {\r\n      return {\r\n        ...acc,\r\n        [key]: {\r\n          ...componentLayout,\r\n          layout: componentLayout.layout.map((row) => row.map(addLabelActionToField)),\r\n        },\r\n      };\r\n    },\r\n    {}\r\n  );\r\n\r\n  return {\r\n    layout: {\r\n      ...layout,\r\n      components,\r\n      layout: layout.layout.map((panel) => panel.map((row) => row.map(addLabelActionToField))),\r\n    },\r\n  } satisfies Pick<MutateEditViewArgs, 'layout'>;\r\n};\r\n\r\nconst addLabelActionToField = (field: EditFieldLayout) => {\r\n  const isFieldLocalized = doesFieldHaveI18nPluginOpt(field.attribute.pluginOptions)\r\n    ? field.attribute.pluginOptions.i18n.localized\r\n    : true || ['uid', 'relation'].includes(field.attribute.type);\r\n\r\n  const labelActionProps = {\r\n    title: {\r\n      id: isFieldLocalized\r\n        ? getTranslation('Field.localized')\r\n        : getTranslation('Field.not-localized'),\r\n      defaultMessage: isFieldLocalized\r\n        ? 'This value is unique for the selected locale'\r\n        : 'This value is the same across all locales',\r\n    },\r\n    icon: isFieldLocalized ? <Earth /> : null,\r\n  };\r\n\r\n  return {\r\n    ...field,\r\n    labelAction: isFieldLocalized ? <LabelAction {...labelActionProps} /> : null,\r\n  };\r\n};\r\n\r\nconst doesFieldHaveI18nPluginOpt = (\r\n  pluginOpts?: object\r\n): pluginOpts is { i18n: { localized: boolean } } => {\r\n  if (!pluginOpts) {\r\n    return false;\r\n  }\r\n\r\n  return (\r\n    'i18n' in pluginOpts &&\r\n    typeof pluginOpts.i18n === 'object' &&\r\n    pluginOpts.i18n !== null &&\r\n    'localized' in pluginOpts.i18n\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * LabelAction\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface LabelActionProps {\r\n  title: MessageDescriptor;\r\n  icon: React.ReactNode;\r\n}\r\n\r\nconst LabelAction = ({ title, icon }: LabelActionProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  return (\r\n    <Span tag=\"span\">\r\n      <VisuallyHidden tag=\"span\">{formatMessage(title)}</VisuallyHidden>\r\n      {React.cloneElement(icon as React.ReactElement, {\r\n        'aria-hidden': true,\r\n        focusable: false, // See: https://allyjs.io/tutorials/focusing-in-svg.html#making-svg-elements-focusable\r\n      })}\r\n    </Span>\r\n  );\r\n};\r\n\r\nconst Span = styled(Flex)`\r\n  svg {\r\n    width: 12px;\r\n    height: 12px;\r\n\r\n    fill: ${({ theme }) => theme.colors.neutral500};\r\n\r\n    path {\r\n      fill: ${({ theme }) => theme.colors.neutral500};\r\n    }\r\n  }\r\n`;\r\n\r\nexport { mutateEditViewHook };\r\n", "import { Box, Flex, Popover, Typography, useCollator, Button } from '@strapi/design-system';\r\nimport { CaretDown } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { Locale } from '../../../shared/contracts/locales';\r\nimport { useGetLocalesQuery } from '../services/locales';\r\n\r\ninterface LocaleListCellProps {\r\n  localizations: { locale: string }[];\r\n  locale: string;\r\n}\r\n\r\nconst LocaleListCell = ({ locale: currentLocale, localizations }: LocaleListCellProps) => {\r\n  const { locale: language } = useIntl();\r\n  const { data: locales = [] } = useGetLocalesQuery();\r\n  const formatter = useCollator(language, {\r\n    sensitivity: 'base',\r\n  });\r\n\r\n  if (!Array.isArray(locales) || !localizations) {\r\n    return null;\r\n  }\r\n\r\n  const availableLocales = localizations.map((loc) => loc.locale);\r\n\r\n  const localesForDocument = locales\r\n    .reduce<Locale[]>((acc, locale) => {\r\n      const createdLocale = [currentLocale, ...availableLocales].find((loc) => {\r\n        return loc === locale.code;\r\n      });\r\n\r\n      if (createdLocale) {\r\n        acc.push(locale);\r\n      }\r\n\r\n      return acc;\r\n    }, [])\r\n    .map((locale) => {\r\n      if (locale.isDefault) {\r\n        return `${locale.name} (default)`;\r\n      }\r\n\r\n      return locale.name;\r\n    })\r\n    .toSorted((a, b) => formatter.compare(a, b));\r\n\r\n  return (\r\n    <Popover.Root>\r\n      <Popover.Trigger>\r\n        <Button variant=\"ghost\" type=\"button\" onClick={(e) => e.stopPropagation()}>\r\n          <Flex minWidth=\"100%\" alignItems=\"center\" justifyContent=\"center\" fontWeight=\"regular\">\r\n            <Typography textColor=\"neutral800\" ellipsis marginRight={2}>\r\n              {localesForDocument.join(', ')}\r\n            </Typography>\r\n            <Flex>\r\n              <CaretDown width=\"1.2rem\" height=\"1.2rem\" />\r\n            </Flex>\r\n          </Flex>\r\n        </Button>\r\n      </Popover.Trigger>\r\n      <Popover.Content sideOffset={16}>\r\n        <ul>\r\n          {localesForDocument.map((name) => (\r\n            <Box key={name} padding={3} tag=\"li\">\r\n              <Typography>{name}</Typography>\r\n            </Box>\r\n          ))}\r\n        </ul>\r\n      </Popover.Content>\r\n    </Popover.Root>\r\n  );\r\n};\r\n\r\nexport { LocaleListCell };\r\nexport type { LocaleListCellProps };\r\n", "/* eslint-disable check-file/filename-naming-convention */\r\nimport { LocaleListCell } from '../components/LocaleListCell';\r\nimport { doesPluginOptionsHaveI18nLocalized } from '../utils/fields';\r\nimport { getTranslation } from '../utils/getTranslation';\r\n\r\nimport type { ListFieldLayout, ListLayout } from '@strapi/content-manager/strapi-admin';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * addColumnToTableHook\r\n * -----------------------------------------------------------------------------------------------*/\r\ninterface AddColumnToTableHookArgs {\r\n  layout: ListLayout;\r\n  displayedHeaders: ListFieldLayout[];\r\n}\r\n\r\nconst addColumnToTableHook = ({ displayedHeaders, layout }: AddColumnToTableHookArgs) => {\r\n  const { options } = layout;\r\n\r\n  const isFieldLocalized = doesPluginOptionsHaveI18nLocalized(options)\r\n    ? options.i18n.localized\r\n    : false;\r\n\r\n  if (!isFieldLocalized) {\r\n    return { displayedHeaders, layout };\r\n  }\r\n\r\n  return {\r\n    displayedHeaders: [\r\n      ...displayedHeaders,\r\n      {\r\n        attribute: { type: 'string' },\r\n        label: {\r\n          id: getTranslation('list-view.table.header.label'),\r\n          defaultMessage: 'Available in',\r\n        },\r\n        searchable: false,\r\n        sortable: false,\r\n        name: 'locales',\r\n        // @ts-expect-error – ID is seen as number | string; this will change when we move the type over.\r\n        cellFormatter: (props, _header, meta) => <LocaleListCell {...props} {...meta} />,\r\n      },\r\n    ],\r\n    layout,\r\n  };\r\n};\r\n\r\nexport { addColumnToTableHook };\r\n", "import type { Schema } from '@strapi/types';\r\n/* -------------------------------------------------------------------------------------------------\r\n * addLocaleToReleasesHook\r\n * -----------------------------------------------------------------------------------------------*/\r\ninterface AddLocaleToReleasesHookArgs {\r\n  displayedHeaders: {\r\n    key: string;\r\n    fieldSchema: Schema.Attribute.Kind | 'custom';\r\n    metadatas: {\r\n      label: { id: string; defaultMessage: string };\r\n      searchable: boolean;\r\n      sortable: boolean;\r\n    };\r\n    name: string;\r\n  }[];\r\n  hasI18nEnabled: boolean;\r\n}\r\n\r\nconst addLocaleToReleasesHook = ({ displayedHeaders = [] }: AddLocaleToReleasesHookArgs) => {\r\n  return {\r\n    displayedHeaders: [\r\n      ...displayedHeaders,\r\n      {\r\n        label: {\r\n          id: 'content-releases.page.ReleaseDetails.table.header.label.locale',\r\n          defaultMessage: 'locale',\r\n        },\r\n        name: 'locale',\r\n      },\r\n    ],\r\n    hasI18nEnabled: true,\r\n  };\r\n};\r\n\r\nexport { addLocaleToReleasesHook };\r\n", "import get from 'lodash/get';\r\n\r\nimport type { Middleware } from '@reduxjs/toolkit';\r\nimport type { Store } from '@strapi/admin/strapi-admin';\r\n\r\nconst extendCTBAttributeInitialDataMiddleware: () => Middleware<\r\n  object,\r\n  ReturnType<Store['getState']>\r\n> = () => {\r\n  return ({ getState }) =>\r\n    (next) =>\r\n    (action) => {\r\n      const enhanceAction = ({ uid }: { uid: string }) => {\r\n        // the block here is to catch the error when trying to access the state\r\n        // of the ctb when the plugin is not mounted\r\n        try {\r\n          const store = getState();\r\n\r\n          const type = get(store, [\r\n            'content-type-builder_dataManagerProvider',\r\n            'current',\r\n            'contentTypes',\r\n            uid,\r\n          ]);\r\n\r\n          if (!type || type.modelType !== 'contentType') {\r\n            return next(action);\r\n          }\r\n\r\n          const hasi18nEnabled = get(type, ['pluginOptions', 'i18n', 'localized'], false);\r\n\r\n          if (hasi18nEnabled) {\r\n            return next({\r\n              ...action,\r\n              payload: {\r\n                ...action.payload,\r\n                options: {\r\n                  pluginOptions: {\r\n                    ...(action?.payload?.options?.pluginOptions ?? {}),\r\n                    i18n: {\r\n                      localized: true,\r\n                    },\r\n                  },\r\n                },\r\n              },\r\n            });\r\n          }\r\n\r\n          return next(action);\r\n        } catch (err) {\r\n          return next(action);\r\n        }\r\n      };\r\n\r\n      const { payload = {}, type } = action ?? {};\r\n\r\n      if (\r\n        type === 'formModal/setAttributeDataSchema' &&\r\n        !['relation', 'component'].includes(payload.attributeType) &&\r\n        !payload.isEditing\r\n      ) {\r\n        return enhanceAction({\r\n          uid: payload.uid,\r\n        });\r\n      }\r\n\r\n      if (type === 'formModal/setCustomFieldDataSchema' && !payload.isEditing) {\r\n        return enhanceAction({\r\n          uid: payload.uid,\r\n        });\r\n      }\r\n\r\n      if (\r\n        type === 'formModal/resetPropsAndSetFormForAddingAnExistingCompo' ||\r\n        type === 'formModal/resetPropsAndSaveCurrentData'\r\n      ) {\r\n        return enhanceAction({\r\n          uid: payload.uid,\r\n        });\r\n      }\r\n\r\n      return next(action);\r\n    };\r\n};\r\n\r\nexport { extendCTBAttributeInitialDataMiddleware };\r\n", "import type { Middleware } from '@reduxjs/toolkit';\r\nimport type { Store } from '@strapi/admin/strapi-admin';\r\n\r\nconst extendCTBInitialDataMiddleware: () => Middleware<\r\n  object,\r\n  ReturnType<Store['getState']>\r\n> = () => {\r\n  return () => (next) => (action) => {\r\n    if (\r\n      action.type === 'ContentTypeBuilder/FormModal/SET_DATA_TO_EDIT' &&\r\n      action.modalType === 'contentType'\r\n    ) {\r\n      const i18n = { localized: false };\r\n\r\n      const pluginOptions = action.data.pluginOptions\r\n        ? { ...action.data.pluginOptions, i18n }\r\n        : { i18n };\r\n\r\n      const data = { ...action.data, pluginOptions };\r\n\r\n      if (action.actionType === 'create') {\r\n        return next({ ...action, data });\r\n      }\r\n\r\n      // Override the action if the pluginOption config does not contain i18n\r\n      // In this case we need to set the proper initialData shape\r\n      if (!action.data.pluginOptions?.i18n?.localized) {\r\n        return next({ ...action, data });\r\n      }\r\n    }\r\n\r\n    // action is not the one we want to override\r\n    return next(action);\r\n  };\r\n};\r\n\r\nexport { extendCTBInitialDataMiddleware };\r\n", "/* eslint-disable check-file/filename-naming-convention */\r\nimport * as qs from 'qs';\r\nimport { matchPath } from 'react-router-dom';\r\n\r\nimport type { RBACMiddleware } from '@strapi/admin/strapi-admin';\r\n\r\nconst localeMiddleware: RBACMiddleware = (ctx) => (next) => (permissions) => {\r\n  const match = matchPath('/content-manager/:collectionType/:model?/:id', ctx.pathname);\r\n\r\n  if (!match) {\r\n    return next(permissions);\r\n  }\r\n\r\n  const search = qs.parse(ctx.search);\r\n\r\n  if (typeof search !== 'object') {\r\n    return next(permissions);\r\n  }\r\n\r\n  if (!('plugins' in search && typeof search.plugins === 'object')) {\r\n    return next(permissions);\r\n  }\r\n\r\n  if (\r\n    !(\r\n      'i18n' in search.plugins &&\r\n      typeof search.plugins.i18n === 'object' &&\r\n      !Array.isArray(search.plugins.i18n)\r\n    )\r\n  ) {\r\n    return next(permissions);\r\n  }\r\n\r\n  const { locale } = search.plugins.i18n;\r\n\r\n  if (typeof locale !== 'string') {\r\n    return next(permissions);\r\n  }\r\n\r\n  const revisedPermissions = permissions.filter(\r\n    (permission) =>\r\n      !permission.properties?.locales || permission.properties.locales.includes(locale)\r\n  );\r\n\r\n  return next(revisedPermissions);\r\n};\r\n\r\nexport { localeMiddleware };\r\n", "type TradOptions = Record<string, string>;\r\n\r\nconst prefixPluginTranslations = (trad: TradOptions, pluginId: string): TradOptions => {\r\n  if (!pluginId) {\r\n    throw new TypeError(\"pluginId can't be empty\");\r\n  }\r\n  return Object.keys(trad).reduce((acc, current) => {\r\n    acc[`${pluginId}.${current}`] = trad[current];\r\n    return acc;\r\n  }, {} as TradOptions);\r\n};\r\n\r\nexport { prefixPluginTranslations };\r\n", "import omit from 'lodash/omit';\r\n\r\nimport { LOCALIZED_FIELDS, doesPluginOptionsHaveI18nLocalized } from './fields';\r\n\r\nimport type { Schema } from '@strapi/types';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * mutateCTBContentTypeSchema\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\n// TODO: refactor for CTB refactors\r\nconst mutateCTBContentTypeSchema = (\r\n  nextSchema: {\r\n    pluginOptions: Schema.ContentType['pluginOptions'];\r\n    attributes: Schema.Attribute.AnyAttribute[];\r\n    uid?: string;\r\n  },\r\n  prevSchema?: {\r\n    pluginOptions: Schema.ContentType['pluginOptions'];\r\n    attributes: Schema.Attribute.AnyAttribute[];\r\n    uid?: string;\r\n  }\r\n) => {\r\n  if (!prevSchema) {\r\n    return nextSchema;\r\n  }\r\n\r\n  // Don't perform mutations components\r\n  if (!doesPluginOptionsHaveI18nLocalized(nextSchema.pluginOptions)) {\r\n    return nextSchema;\r\n  }\r\n\r\n  const isNextSchemaLocalized = nextSchema.pluginOptions.i18n.localized;\r\n  const isPrevSchemaLocalized = doesPluginOptionsHaveI18nLocalized(prevSchema?.pluginOptions)\r\n    ? prevSchema?.pluginOptions.i18n.localized\r\n    : false;\r\n\r\n  // No need to perform modification on the schema, if the i18n feature was not changed\r\n  // at the ct level\r\n  if (isNextSchemaLocalized && isPrevSchemaLocalized) {\r\n    return nextSchema;\r\n  }\r\n\r\n  if (isNextSchemaLocalized) {\r\n    const attributes = addLocalisationToFields(nextSchema.attributes);\r\n\r\n    return {\r\n      ...nextSchema,\r\n      attributes,\r\n    };\r\n  }\r\n\r\n  // Remove the i18n object from the pluginOptions\r\n  if (!isNextSchemaLocalized) {\r\n    const pluginOptions = omit(nextSchema.pluginOptions, 'i18n');\r\n    const attributes = disableAttributesLocalisation(nextSchema.attributes);\r\n\r\n    return {\r\n      ...nextSchema,\r\n      pluginOptions,\r\n      attributes,\r\n    };\r\n  }\r\n\r\n  return nextSchema;\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * addLocalisationToFields\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst addLocalisationToFields = (attributes: Schema.Attribute.AnyAttribute[]) => {\r\n  return attributes.map((currentAttribute) => {\r\n    if (LOCALIZED_FIELDS.includes(currentAttribute.type)) {\r\n      const i18n = { localized: true };\r\n\r\n      const pluginOptions = currentAttribute.pluginOptions\r\n        ? { ...currentAttribute.pluginOptions, i18n }\r\n        : { i18n };\r\n\r\n      return { ...currentAttribute, pluginOptions };\r\n    }\r\n\r\n    return currentAttribute;\r\n  });\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * disableAttributesLocalisation\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst disableAttributesLocalisation = (attributes: Schema.Attribute.AnyAttribute[]) => {\r\n  return attributes.map((currentAttribute) => {\r\n    return omit(currentAttribute, 'pluginOptions.i18n');\r\n  });\r\n};\r\n\r\nexport { mutateCTBContentTypeSchema };\r\n", "import * as React from 'react';\r\n\r\nimport {\r\n  useAPIErrorHandler,\r\n  useNotification,\r\n  useQueryParams,\r\n  useRBAC,\r\n  isFetchError,\r\n} from '@strapi/admin/strapi-admin';\r\nimport { unstable_useDocumentLayout as useDocumentLayout } from '@strapi/content-manager/strapi-admin';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Flex,\r\n  SingleSelect,\r\n  SingleSelectOption,\r\n  EmptyStateLayout,\r\n  LinkButton,\r\n  Field,\r\n  Modal,\r\n} from '@strapi/design-system';\r\nimport { PaperPlane } from '@strapi/icons';\r\nimport { EmptyDocuments } from '@strapi/icons/symbols';\r\nimport { useFormik } from 'formik';\r\nimport { useIntl } from 'react-intl';\r\nimport { Link as ReactRouterLink } from 'react-router-dom';\r\nimport * as yup from 'yup';\r\n\r\nimport { CreateReleaseAction } from '../../../shared/contracts/release-actions';\r\nimport { PERMISSIONS } from '../constants';\r\nimport { useCreateReleaseActionMutation, useGetReleasesForEntryQuery } from '../services/release';\r\n\r\nimport { ReleaseActionOptions } from './ReleaseActionOptions';\r\n\r\nimport type {\r\n  DocumentActionComponent,\r\n  DocumentActionProps,\r\n} from '@strapi/content-manager/strapi-admin';\r\nimport type { UID } from '@strapi/types';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * AddActionToReleaseModal\r\n * -----------------------------------------------------------------------------------------------*/\r\nexport const RELEASE_ACTION_FORM_SCHEMA = yup.object().shape({\r\n  type: yup.string().oneOf(['publish', 'unpublish']).required(),\r\n  releaseId: yup.string().required(),\r\n});\r\n\r\nexport interface FormValues {\r\n  type: CreateReleaseAction.Request['body']['type'];\r\n  releaseId: CreateReleaseAction.Request['params']['releaseId'];\r\n}\r\n\r\nexport const INITIAL_VALUES = {\r\n  type: 'publish',\r\n  releaseId: '',\r\n} satisfies FormValues;\r\n\r\ninterface AddActionToReleaseModalProps {\r\n  contentType: string;\r\n  documentId?: string;\r\n  onInputChange: (field: keyof FormValues, value: string | number) => void;\r\n  values: FormValues;\r\n}\r\n\r\nexport const NoReleases = () => {\r\n  const { formatMessage } = useIntl();\r\n  return (\r\n    <EmptyStateLayout\r\n      icon={<EmptyDocuments width=\"16rem\" />}\r\n      content={formatMessage({\r\n        id: 'content-releases.content-manager-edit-view.add-to-release.no-releases-message',\r\n        defaultMessage:\r\n          'No available releases. Open the list of releases and create a new one from there.',\r\n      })}\r\n      action={\r\n        <LinkButton\r\n          to={{\r\n            pathname: '/plugins/content-releases',\r\n          }}\r\n          tag={ReactRouterLink}\r\n          variant=\"secondary\"\r\n        >\r\n          {formatMessage({\r\n            id: 'content-releases.content-manager-edit-view.add-to-release.redirect-button',\r\n            defaultMessage: 'Open the list of releases',\r\n          })}\r\n        </LinkButton>\r\n      }\r\n      shadow=\"none\"\r\n    />\r\n  );\r\n};\r\n\r\nconst AddActionToReleaseModal = ({\r\n  contentType,\r\n  documentId,\r\n  onInputChange,\r\n  values,\r\n}: AddActionToReleaseModalProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const [{ query }] = useQueryParams<{ plugins?: { i18n?: { locale?: string } } }>();\r\n  const locale = query.plugins?.i18n?.locale;\r\n\r\n  // Get all 'pending' releases that do not have the entry attached\r\n  const response = useGetReleasesForEntryQuery({\r\n    contentType,\r\n    entryDocumentId: documentId,\r\n    hasEntryAttached: false,\r\n    locale,\r\n  });\r\n\r\n  const releases = response.data?.data;\r\n\r\n  if (releases?.length === 0) {\r\n    return <NoReleases />;\r\n  }\r\n\r\n  return (\r\n    <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\r\n      <Box paddingBottom={6}>\r\n        <Field.Root required>\r\n          <Field.Label>\r\n            {formatMessage({\r\n              id: 'content-releases.content-manager-edit-view.add-to-release.select-label',\r\n              defaultMessage: 'Select a release',\r\n            })}\r\n          </Field.Label>\r\n          <SingleSelect\r\n            required\r\n            placeholder={formatMessage({\r\n              id: 'content-releases.content-manager-edit-view.add-to-release.select-placeholder',\r\n              defaultMessage: 'Select',\r\n            })}\r\n            name=\"releaseId\"\r\n            onChange={(value) => onInputChange('releaseId', value)}\r\n            value={values.releaseId}\r\n          >\r\n            {releases?.map((release) => (\r\n              <SingleSelectOption key={release.id} value={release.id}>\r\n                {release.name}\r\n              </SingleSelectOption>\r\n            ))}\r\n          </SingleSelect>\r\n        </Field.Root>\r\n      </Box>\r\n      <Field.Label>\r\n        {formatMessage({\r\n          id: 'content-releases.content-manager-edit-view.add-to-release.action-type-label',\r\n          defaultMessage: 'What do you want to do with this entry?',\r\n        })}\r\n      </Field.Label>\r\n      <ReleaseActionOptions\r\n        selected={values.type}\r\n        handleChange={(e) => onInputChange('type', e.target.value)}\r\n        name=\"type\"\r\n      />\r\n    </Flex>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ReleaseActionModalForm\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst ReleaseActionModalForm: DocumentActionComponent = ({\r\n  documentId,\r\n  document,\r\n  model,\r\n  collectionType,\r\n}: DocumentActionProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const { allowedActions } = useRBAC(PERMISSIONS);\r\n  const { canCreateAction } = allowedActions;\r\n  const [createReleaseAction, { isLoading }] = useCreateReleaseActionMutation();\r\n  const { toggleNotification } = useNotification();\r\n  const { formatAPIError } = useAPIErrorHandler();\r\n  const [{ query }] = useQueryParams<{ plugins?: { i18n?: { locale?: string } } }>();\r\n  const locale = query.plugins?.i18n?.locale;\r\n\r\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>, onClose: () => void) => {\r\n    try {\r\n      await formik.handleSubmit(e);\r\n      onClose();\r\n    } catch (error) {\r\n      if (isFetchError(error)) {\r\n        // Handle axios error\r\n        toggleNotification({\r\n          type: 'danger',\r\n          message: formatAPIError(error),\r\n        });\r\n      } else {\r\n        // Handle generic error\r\n        toggleNotification({\r\n          type: 'danger',\r\n          message: formatMessage({\r\n            id: 'notification.error',\r\n            defaultMessage: 'An error occurred',\r\n          }),\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const formik = useFormik({\r\n    initialValues: INITIAL_VALUES,\r\n    validationSchema: RELEASE_ACTION_FORM_SCHEMA,\r\n    onSubmit: async (values: FormValues) => {\r\n      if (collectionType === 'collection-types' && !documentId) {\r\n        throw new Error('Document id is required');\r\n      }\r\n\r\n      const response = await createReleaseAction({\r\n        body: {\r\n          type: values.type,\r\n          contentType: model as UID.ContentType,\r\n          entryDocumentId: documentId,\r\n          locale,\r\n        },\r\n        params: { releaseId: values.releaseId },\r\n      });\r\n\r\n      if ('data' in response) {\r\n        // Handle success\r\n        toggleNotification({\r\n          type: 'success',\r\n          message: formatMessage({\r\n            id: 'content-releases.content-manager-edit-view.add-to-release.notification.success',\r\n            defaultMessage: 'Entry added to release',\r\n          }),\r\n        });\r\n\r\n        return;\r\n      }\r\n\r\n      if ('error' in response) {\r\n        throw response.error;\r\n      }\r\n    },\r\n  });\r\n\r\n  const {\r\n    edit: { options },\r\n  } = useDocumentLayout(model);\r\n\r\n  // Project is not EE or contentType does not have draftAndPublish enabled\r\n  if (!window.strapi.isEE || !options?.draftAndPublish || !canCreateAction) {\r\n    return null;\r\n  }\r\n\r\n  if (collectionType === 'collection-types' && (!documentId || documentId === 'create')) {\r\n    return null;\r\n  }\r\n\r\n  return {\r\n    label: formatMessage({\r\n      id: 'content-releases.content-manager-edit-view.add-to-release',\r\n      defaultMessage: 'Add to release',\r\n    }),\r\n    icon: <PaperPlane />,\r\n    // Entry is creating so we don't want to allow adding it to a release\r\n    disabled: !document,\r\n    position: ['panel', 'table-row'],\r\n    dialog: {\r\n      type: 'modal',\r\n      title: formatMessage({\r\n        id: 'content-releases.content-manager-edit-view.add-to-release',\r\n        defaultMessage: 'Add to release',\r\n      }),\r\n      content: (\r\n        <AddActionToReleaseModal\r\n          contentType={model}\r\n          documentId={documentId}\r\n          onInputChange={formik.setFieldValue}\r\n          values={formik.values}\r\n        />\r\n      ),\r\n      footer: ({ onClose }) => (\r\n        <Modal.Footer>\r\n          <Button onClick={onClose} variant=\"tertiary\" name=\"cancel\">\r\n            {formatMessage({\r\n              id: 'content-releases.content-manager-edit-view.add-to-release.cancel-button',\r\n              defaultMessage: 'Cancel',\r\n            })}\r\n          </Button>\r\n          <Button\r\n            type=\"submit\"\r\n            // @ts-expect-error - formik ReactEvent types don't match button onClick types as they expect a MouseEvent\r\n            onClick={(e) => handleSubmit(e, onClose)}\r\n            disabled={!formik.values.releaseId}\r\n            loading={isLoading}\r\n          >\r\n            {formatMessage({\r\n              id: 'content-releases.content-manager-edit-view.add-to-release.continue-button',\r\n              defaultMessage: 'Continue',\r\n            })}\r\n          </Button>\r\n        </Modal.Footer>\r\n      ),\r\n    },\r\n  };\r\n};\r\n\r\nexport { ReleaseActionModalForm };\r\n", "import * as React from 'react';\r\n\r\nimport {\r\n  useAPIErrorHandler,\r\n  useNotification,\r\n  useQueryParams,\r\n  useRBAC,\r\n  isFetchError,\r\n} from '@strapi/admin/strapi-admin';\r\nimport { unstable_useContentManagerContext as useContentManagerContext } from '@strapi/content-manager/strapi-admin';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Flex,\r\n  SingleSelect,\r\n  SingleSelectOption,\r\n  Modal,\r\n  Field,\r\n} from '@strapi/design-system';\r\nimport { Formik, Form } from 'formik';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { CreateManyReleaseActions } from '../../../shared/contracts/release-actions';\r\nimport { PERMISSIONS as releasePermissions } from '../constants';\r\nimport { useCreateManyReleaseActionsMutation, useGetReleasesQuery } from '../services/release';\r\n\r\nimport {\r\n  type FormValues,\r\n  INITIAL_VALUES,\r\n  RELEASE_ACTION_FORM_SCHEMA,\r\n  NoReleases,\r\n} from './ReleaseActionModal';\r\nimport { ReleaseActionOptions } from './ReleaseActionOptions';\r\n\r\nimport type { BulkActionComponent } from '@strapi/content-manager/strapi-admin';\r\nimport type { UID } from '@strapi/types';\r\n\r\nconst getContentPermissions = (subject: string) => {\r\n  const permissions = {\r\n    publish: [\r\n      {\r\n        action: 'plugin::content-manager.explorer.publish',\r\n        subject,\r\n        id: '',\r\n        actionParameters: {},\r\n        properties: {},\r\n        conditions: [],\r\n      },\r\n    ],\r\n  };\r\n\r\n  return permissions;\r\n};\r\n\r\nconst ReleaseAction: BulkActionComponent = ({ documents, model }) => {\r\n  const { formatMessage } = useIntl();\r\n  const { toggleNotification } = useNotification();\r\n  const { formatAPIError } = useAPIErrorHandler();\r\n  const [{ query }] = useQueryParams<{ plugins?: { i18n?: { locale?: string } } }>();\r\n  const contentPermissions = getContentPermissions(model);\r\n  const {\r\n    allowedActions: { canPublish },\r\n  } = useRBAC(contentPermissions);\r\n  const {\r\n    allowedActions: { canCreate },\r\n  } = useRBAC(releasePermissions);\r\n  const { hasDraftAndPublish } = useContentManagerContext();\r\n\r\n  // Get all the releases not published\r\n  const response = useGetReleasesQuery();\r\n  const releases = response.data?.data;\r\n  const [createManyReleaseActions, { isLoading }] = useCreateManyReleaseActionsMutation();\r\n  const documentIds = documents.map((doc) => doc.documentId);\r\n\r\n  const handleSubmit = async (values: FormValues) => {\r\n    const locale = query.plugins?.i18n?.locale;\r\n\r\n    const releaseActionEntries: CreateManyReleaseActions.Request['body'] = documentIds.map(\r\n      (entryDocumentId) => ({\r\n        type: values.type,\r\n        contentType: model as UID.ContentType,\r\n        entryDocumentId,\r\n        locale,\r\n      })\r\n    );\r\n\r\n    const response = await createManyReleaseActions({\r\n      body: releaseActionEntries,\r\n      params: { releaseId: values.releaseId },\r\n    });\r\n\r\n    if ('data' in response) {\r\n      // Handle success\r\n\r\n      const notificationMessage = formatMessage(\r\n        {\r\n          id: 'content-releases.content-manager-list-view.add-to-release.notification.success.message',\r\n          defaultMessage:\r\n            '{entriesAlreadyInRelease} out of {totalEntries} entries were already in the release.',\r\n        },\r\n        {\r\n          entriesAlreadyInRelease: response.data.meta.entriesAlreadyInRelease,\r\n          totalEntries: response.data.meta.totalEntries,\r\n        }\r\n      );\r\n\r\n      const notification = {\r\n        type: 'success' as const,\r\n        title: formatMessage(\r\n          {\r\n            id: 'content-releases.content-manager-list-view.add-to-release.notification.success.title',\r\n            defaultMessage: 'Successfully added to release.',\r\n          },\r\n          {\r\n            entriesAlreadyInRelease: response.data.meta.entriesAlreadyInRelease,\r\n            totalEntries: response.data.meta.totalEntries,\r\n          }\r\n        ),\r\n        message: response.data.meta.entriesAlreadyInRelease ? notificationMessage : '',\r\n      };\r\n\r\n      toggleNotification(notification);\r\n\r\n      return true;\r\n    }\r\n\r\n    if ('error' in response) {\r\n      if (isFetchError(response.error)) {\r\n        // Handle fetch error\r\n        toggleNotification({\r\n          type: 'warning',\r\n          message: formatAPIError(response.error),\r\n        });\r\n      } else {\r\n        // Handle generic error\r\n        toggleNotification({\r\n          type: 'warning',\r\n          message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  if (!hasDraftAndPublish || !canCreate || !canPublish) return null;\r\n\r\n  return {\r\n    actionType: 'release',\r\n    variant: 'tertiary',\r\n    label: formatMessage({\r\n      id: 'content-manager-list-view.add-to-release',\r\n      defaultMessage: 'Add to Release',\r\n    }),\r\n    dialog: {\r\n      type: 'modal',\r\n      title: formatMessage({\r\n        id: 'content-manager-list-view.add-to-release',\r\n        defaultMessage: 'Add to Release',\r\n      }),\r\n      content: ({ onClose }) => {\r\n        return (\r\n          <Formik\r\n            onSubmit={async (values) => {\r\n              const data = await handleSubmit(values);\r\n              if (data) {\r\n                return onClose();\r\n              }\r\n            }}\r\n            validationSchema={RELEASE_ACTION_FORM_SCHEMA}\r\n            initialValues={INITIAL_VALUES}\r\n          >\r\n            {({ values, setFieldValue }) => (\r\n              <Form>\r\n                {releases?.length === 0 ? (\r\n                  <NoReleases />\r\n                ) : (\r\n                  <Modal.Body>\r\n                    <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\r\n                      <Box paddingBottom={6}>\r\n                        <Field.Root required>\r\n                          <Field.Label>\r\n                            {formatMessage({\r\n                              id: 'content-releases.content-manager-list-view.add-to-release.select-label',\r\n                              defaultMessage: 'Select a release',\r\n                            })}\r\n                          </Field.Label>\r\n                          <SingleSelect\r\n                            placeholder={formatMessage({\r\n                              id: 'content-releases.content-manager-list-view.add-to-release.select-placeholder',\r\n                              defaultMessage: 'Select',\r\n                            })}\r\n                            onChange={(value) => setFieldValue('releaseId', value)}\r\n                            value={values.releaseId}\r\n                          >\r\n                            {releases?.map((release) => (\r\n                              <SingleSelectOption key={release.id} value={release.id}>\r\n                                {release.name}\r\n                              </SingleSelectOption>\r\n                            ))}\r\n                          </SingleSelect>\r\n                        </Field.Root>\r\n                      </Box>\r\n                      <Field.Label>\r\n                        {formatMessage({\r\n                          id: 'content-releases.content-manager-list-view.add-to-release.action-type-label',\r\n                          defaultMessage: 'What do you want to do with these entries?',\r\n                        })}\r\n                      </Field.Label>\r\n                      <ReleaseActionOptions\r\n                        selected={values.type}\r\n                        handleChange={(e) => setFieldValue('type', e.target.value)}\r\n                        name=\"type\"\r\n                      />\r\n                    </Flex>\r\n                  </Modal.Body>\r\n                )}\r\n                <Modal.Footer>\r\n                  <Button onClick={onClose} variant=\"tertiary\" name=\"cancel\">\r\n                    {formatMessage({\r\n                      id: 'content-releases.content-manager-list-view.add-to-release.cancel-button',\r\n                      defaultMessage: 'Cancel',\r\n                    })}\r\n                  </Button>\r\n                  {/** * TODO: Ideally we would use isValid from Formik to disable the button,\r\n                  however currently it always returns true * for yup.string().required(), even when\r\n                  the value is falsy (including empty string) */}\r\n                  <Button type=\"submit\" disabled={!values.releaseId} loading={isLoading}>\r\n                    {formatMessage({\r\n                      id: 'content-releases.content-manager-list-view.add-to-release.continue-button',\r\n                      defaultMessage: 'Continue',\r\n                    })}\r\n                  </Button>\r\n                </Modal.Footer>\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n        );\r\n      },\r\n    },\r\n  };\r\n};\r\n\r\nexport { ReleaseAction };\r\n", "import * as React from 'react';\r\n\r\nimport { useTable, useQueryParams } from '@strapi/admin/strapi-admin';\r\nimport { ListFieldLayout, ListLayout } from '@strapi/content-manager/strapi-admin';\r\nimport { Box, Popover, Typography, Button, Link } from '@strapi/design-system';\r\nimport { CaretDown } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { useGetMappedEntriesInReleasesQuery } from '../services/release';\r\n\r\nimport type { Modules, UID } from '@strapi/types';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * useReleasesList\r\n * -----------------------------------------------------------------------------------------------*/\r\ninterface QueryParams {\r\n  plugins?: {\r\n    i18n?: {\r\n      locale: string;\r\n    };\r\n  };\r\n}\r\n\r\nconst useReleasesList = (contentTypeUid: UID.ContentType, documentId: Modules.Documents.ID) => {\r\n  const listViewData = useTable('ListView', (state) => state.rows);\r\n  const documentIds = listViewData.map((entry) => entry.documentId);\r\n  const [{ query }] = useQueryParams();\r\n  const locale = (query as QueryParams)?.plugins?.i18n?.locale || undefined;\r\n\r\n  const response = useGetMappedEntriesInReleasesQuery(\r\n    { contentTypeUid, documentIds, locale },\r\n    { skip: !documentIds || !contentTypeUid || documentIds.length === 0 }\r\n  );\r\n\r\n  const mappedEntriesInReleases = response.data || {};\r\n\r\n  return mappedEntriesInReleases?.[documentId] || [];\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * addColumnToTableHook\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface AddColumnToTableHookArgs {\r\n  layout: ListLayout;\r\n  displayedHeaders: ListFieldLayout[];\r\n}\r\n\r\nconst addColumnToTableHook = ({ displayedHeaders, layout }: AddColumnToTableHookArgs) => {\r\n  const { options } = layout;\r\n\r\n  if (!options?.draftAndPublish) {\r\n    return { displayedHeaders, layout };\r\n  }\r\n\r\n  return {\r\n    displayedHeaders: [\r\n      ...displayedHeaders,\r\n      {\r\n        searchable: false,\r\n        sortable: false,\r\n        name: 'releases',\r\n        label: {\r\n          id: 'content-releases.content-manager.list-view.releases.header',\r\n          defaultMessage: 'To be released in',\r\n        },\r\n        cellFormatter: (\r\n          props: Modules.Documents.AnyDocument,\r\n          _: any,\r\n          { model }: { model: UID.ContentType }\r\n        ) => <ReleaseListCell {...props} model={model} />,\r\n      },\r\n    ],\r\n    layout,\r\n  };\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ReleaseListCell\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface ReleaseListCellProps extends Modules.Documents.AnyDocument {\r\n  documentId: Modules.Documents.ID;\r\n  model: UID.ContentType;\r\n}\r\n\r\nconst ReleaseListCell = ({ documentId, model }: ReleaseListCellProps) => {\r\n  const releases = useReleasesList(model, documentId);\r\n  const { formatMessage } = useIntl();\r\n\r\n  return (\r\n    <Popover.Root>\r\n      <Popover.Trigger>\r\n        <Button\r\n          variant=\"ghost\"\r\n          onClick={(e: React.MouseEvent<HTMLElement>) => e.stopPropagation()}\r\n          // TODO: find a way in the DS to define the widht and height of the icon\r\n          endIcon={releases.length > 0 ? <CaretDown width=\"1.2rem\" height=\"1.2rem\" /> : null}\r\n        >\r\n          <Typography\r\n            style={{ maxWidth: '252px', cursor: 'pointer' }}\r\n            textColor=\"neutral800\"\r\n            fontWeight=\"regular\"\r\n          >\r\n            {releases.length > 0\r\n              ? formatMessage(\r\n                  {\r\n                    id: 'content-releases.content-manager.list-view.releases-number',\r\n                    defaultMessage: '{number} {number, plural, one {release} other {releases}}',\r\n                  },\r\n                  {\r\n                    number: releases.length,\r\n                  }\r\n                )\r\n              : '-'}\r\n          </Typography>\r\n        </Button>\r\n      </Popover.Trigger>\r\n      <Popover.Content>\r\n        <ul>\r\n          {releases.map(({ id, name }) => (\r\n            <Box key={id} padding={3} tag=\"li\">\r\n              <Link href={`/admin/plugins/content-releases/${id}`} isExternal={false}>\r\n                {name}\r\n              </Link>\r\n            </Box>\r\n          ))}\r\n        </ul>\r\n      </Popover.Content>\r\n    </Popover.Root>\r\n  );\r\n};\r\n\r\nexport { ReleaseListCell, addColumnToTableHook };\r\nexport type { ReleaseListCellProps };\r\n", "import { useRBAC, useQueryParams } from '@strapi/admin/strapi-admin';\r\nimport { unstable_useDocumentLayout as useDocumentLayout } from '@strapi/content-manager/strapi-admin';\r\nimport { Box, Flex, Typography } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { PERMISSIONS } from '../constants';\r\nimport { useGetReleasesForEntryQuery } from '../services/release';\r\nimport { getTimezoneOffset } from '../utils/time';\r\n\r\nimport { ReleaseActionMenu } from './ReleaseActionMenu';\r\n\r\nimport type { PanelComponent, PanelComponentProps } from '@strapi/content-manager/strapi-admin';\r\n\r\nconst Panel: PanelComponent = ({\r\n  model,\r\n  document,\r\n  documentId,\r\n  collectionType,\r\n}: PanelComponentProps) => {\r\n  const [{ query }] = useQueryParams<{ plugins: { i18n: { locale: string } } }>();\r\n  const locale = query.plugins?.i18n?.locale;\r\n\r\n  const {\r\n    edit: { options },\r\n  } = useDocumentLayout(model);\r\n  const { formatMessage, formatDate, formatTime } = useIntl();\r\n\r\n  const { allowedActions } = useRBAC(PERMISSIONS);\r\n  const { canRead, canDeleteAction } = allowedActions;\r\n\r\n  const response = useGetReleasesForEntryQuery(\r\n    {\r\n      contentType: model,\r\n      entryDocumentId: documentId,\r\n      locale,\r\n      hasEntryAttached: true,\r\n    },\r\n    {\r\n      skip: !document,\r\n    }\r\n  );\r\n  const releases = response.data?.data;\r\n\r\n  const getReleaseColorVariant = (\r\n    actionType: 'publish' | 'unpublish',\r\n    shade: '100' | '200' | '600'\r\n  ) => {\r\n    if (actionType === 'unpublish') {\r\n      return `secondary${shade}`;\r\n    }\r\n\r\n    return `success${shade}`;\r\n  };\r\n\r\n  // Project is not EE or contentType does not have draftAndPublish enabled\r\n  if (!window.strapi.isEE || !options?.draftAndPublish || !canRead) {\r\n    return null;\r\n  }\r\n\r\n  if (collectionType === 'collection-types' && (!documentId || documentId === 'create')) {\r\n    return null;\r\n  }\r\n\r\n  if (!releases || releases.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  return {\r\n    title: formatMessage({\r\n      id: 'content-releases.plugin.name',\r\n      defaultMessage: 'Releases',\r\n    }),\r\n    content: (\r\n      <Flex direction=\"column\" alignItems=\"stretch\" gap={3} width=\"100%\">\r\n        {releases?.map((release) => (\r\n          <Flex\r\n            key={release.id}\r\n            direction=\"column\"\r\n            alignItems=\"start\"\r\n            borderWidth=\"1px\"\r\n            borderStyle=\"solid\"\r\n            borderColor={getReleaseColorVariant(release.actions[0].type, '200')}\r\n            overflow=\"hidden\"\r\n            hasRadius\r\n          >\r\n            <Box\r\n              paddingTop={3}\r\n              paddingBottom={3}\r\n              paddingLeft={4}\r\n              paddingRight={4}\r\n              background={getReleaseColorVariant(release.actions[0].type, '100')}\r\n              width=\"100%\"\r\n            >\r\n              <Typography\r\n                fontSize={1}\r\n                variant=\"pi\"\r\n                textColor={getReleaseColorVariant(release.actions[0].type, '600')}\r\n              >\r\n                {formatMessage(\r\n                  {\r\n                    id: 'content-releases.content-manager-edit-view.list-releases.title',\r\n                    defaultMessage:\r\n                      '{isPublish, select, true {Will be published in} other {Will be unpublished in}}',\r\n                  },\r\n                  { isPublish: release.actions[0].type === 'publish' }\r\n                )}\r\n              </Typography>\r\n            </Box>\r\n            <Flex padding={4} direction=\"column\" gap={2} width=\"100%\" alignItems=\"flex-start\">\r\n              <Typography fontSize={2} fontWeight=\"bold\" variant=\"omega\" textColor=\"neutral700\">\r\n                {release.name}\r\n              </Typography>\r\n              {release.scheduledAt && release.timezone && (\r\n                <Typography variant=\"pi\" textColor=\"neutral600\">\r\n                  {formatMessage(\r\n                    {\r\n                      id: 'content-releases.content-manager-edit-view.scheduled.date',\r\n                      defaultMessage: '{date} at {time} ({offset})',\r\n                    },\r\n                    {\r\n                      date: formatDate(new Date(release.scheduledAt), {\r\n                        day: '2-digit',\r\n                        month: '2-digit',\r\n                        year: 'numeric',\r\n                        timeZone: release.timezone,\r\n                      }),\r\n                      time: formatTime(new Date(release.scheduledAt), {\r\n                        hourCycle: 'h23',\r\n                        timeZone: release.timezone,\r\n                      }),\r\n                      offset: getTimezoneOffset(release.timezone, new Date(release.scheduledAt)),\r\n                    }\r\n                  )}\r\n                </Typography>\r\n              )}\r\n              {canDeleteAction ? (\r\n                <ReleaseActionMenu.Root hasTriggerBorder>\r\n                  <ReleaseActionMenu.EditReleaseItem releaseId={release.id} />\r\n                  <ReleaseActionMenu.DeleteReleaseActionItem\r\n                    releaseId={release.id}\r\n                    actionId={release.actions[0].id}\r\n                  />\r\n                </ReleaseActionMenu.Root>\r\n              ) : null}\r\n            </Flex>\r\n          </Flex>\r\n        ))}\r\n      </Flex>\r\n    ),\r\n  };\r\n};\r\n\r\nexport { Panel };\r\n", "type TradOptions = Record<string, string>;\r\n\r\nconst prefixPluginTranslations = (trad: TradOptions, pluginId: string): TradOptions => {\r\n  if (!pluginId) {\r\n    throw new TypeError(\"pluginId can't be empty\");\r\n  }\r\n  return Object.keys(trad).reduce((acc, current) => {\r\n    acc[`${pluginId}.${current}`] = trad[current];\r\n    return acc;\r\n  }, {} as TradOptions);\r\n};\r\n\r\nexport { prefixPluginTranslations };\r\n", "import { PaperPlane } from '@strapi/icons';\r\n\r\nimport { ReleaseAction } from './components/ReleaseAction';\r\nimport { ReleaseActionModalForm } from './components/ReleaseActionModal';\r\nimport { addColumnToTableHook } from './components/ReleaseListCell';\r\nimport { Panel as ReleasesPanel } from './components/ReleasesPanel';\r\nimport { PERMISSIONS } from './constants';\r\nimport { pluginId } from './pluginId';\r\nimport { prefixPluginTranslations } from './utils/prefixPluginTranslations';\r\n\r\nimport type { StrapiApp } from '@strapi/admin/strapi-admin';\r\nimport type {\r\n  DocumentActionComponent,\r\n  BulkActionComponent,\r\n} from '@strapi/content-manager/strapi-admin';\r\nimport type { Plugin } from '@strapi/types';\r\n\r\n// eslint-disable-next-line import/no-default-export\r\nconst admin: Plugin.Config.AdminInput = {\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  register(app: StrapiApp) {\r\n    /**\r\n     * Hook that adds the locale column in the Release Details table\r\n     * @constant\r\n     * @type {string}\r\n     */\r\n    app.createHook('ContentReleases/pages/ReleaseDetails/add-locale-in-releases');\r\n\r\n    if (window.strapi.features.isEnabled('cms-content-releases')) {\r\n      app.addMenuLink({\r\n        to: `plugins/${pluginId}`,\r\n        icon: PaperPlane,\r\n        intlLabel: {\r\n          id: `${pluginId}.plugin.name`,\r\n          defaultMessage: 'Releases',\r\n        },\r\n        Component: () => import('./pages/App').then((mod) => ({ default: mod.App })),\r\n        permissions: PERMISSIONS.main,\r\n        position: 2,\r\n      });\r\n\r\n      // Insert the releases container into the CM's sidebar on the Edit View\r\n      const contentManagerPluginApis = app.getPlugin('content-manager').apis;\r\n      if (\r\n        'addEditViewSidePanel' in contentManagerPluginApis &&\r\n        typeof contentManagerPluginApis.addEditViewSidePanel === 'function'\r\n      ) {\r\n        contentManagerPluginApis.addEditViewSidePanel([ReleasesPanel]);\r\n      }\r\n\r\n      // Insert the \"add to release\" action into the CM's Edit View\r\n      if (\r\n        'addDocumentAction' in contentManagerPluginApis &&\r\n        typeof contentManagerPluginApis.addDocumentAction === 'function'\r\n      ) {\r\n        contentManagerPluginApis.addDocumentAction((actions: DocumentActionComponent[]) => {\r\n          const indexOfDeleteAction = actions.findIndex((action) => action.type === 'unpublish');\r\n          actions.splice(indexOfDeleteAction, 0, ReleaseActionModalForm);\r\n          return actions;\r\n        });\r\n      }\r\n\r\n      app.addSettingsLink('global', {\r\n        id: pluginId,\r\n        to: 'releases',\r\n        intlLabel: {\r\n          id: `${pluginId}.plugin.name`,\r\n          defaultMessage: 'Releases',\r\n        },\r\n        permissions: [],\r\n        async Component() {\r\n          const { ProtectedReleasesSettingsPage } = await import('./pages/ReleasesSettingsPage');\r\n          return { default: ProtectedReleasesSettingsPage };\r\n        },\r\n      });\r\n\r\n      if (\r\n        'addBulkAction' in contentManagerPluginApis &&\r\n        typeof contentManagerPluginApis.addBulkAction === 'function'\r\n      ) {\r\n        contentManagerPluginApis.addBulkAction((actions: BulkActionComponent[]) => {\r\n          // We want to add this action to just before the delete action all the time\r\n          const deleteActionIndex = actions.findIndex((action) => action.type === 'delete');\r\n\r\n          actions.splice(deleteActionIndex, 0, ReleaseAction);\r\n          return actions;\r\n        });\r\n      }\r\n\r\n      // Hook that adds a column into the CM's LV table\r\n      app.registerHook('Admin/CM/pages/ListView/inject-column-in-table', addColumnToTableHook);\r\n    } else if (\r\n      !window.strapi.features.isEnabled('cms-content-releases') &&\r\n      window.strapi?.flags?.promoteEE\r\n    ) {\r\n      app.addSettingsLink('global', {\r\n        id: pluginId,\r\n        to: '/plugins/purchase-content-releases',\r\n        intlLabel: {\r\n          id: `${pluginId}.plugin.name`,\r\n          defaultMessage: 'Releases',\r\n        },\r\n        permissions: [],\r\n        async Component() {\r\n          const { PurchaseContentReleases } = await import('./pages/PurchaseContentReleases');\r\n          return { default: PurchaseContentReleases };\r\n        },\r\n        licenseOnly: true,\r\n      });\r\n    }\r\n  },\r\n  async registerTrads({ locales }: { locales: string[] }) {\r\n    const importedTrads = await Promise.all(\r\n      locales.map((locale) => {\r\n        return import(`./translations/${locale}.json`)\r\n          .then(({ default: data }) => {\r\n            return {\r\n              data: prefixPluginTranslations(data, 'content-releases'),\r\n              locale,\r\n            };\r\n          })\r\n          .catch(() => {\r\n            return {\r\n              data: {},\r\n              locale,\r\n            };\r\n          });\r\n      })\r\n    );\r\n\r\n    return Promise.resolve(importedTrads);\r\n  },\r\n};\r\n\r\n// eslint-disable-next-line import/no-default-export\r\nexport default admin;\r\n", "import * as React from 'react';\r\n\r\nimport {\r\n  useNotification,\r\n  useAPIErrorHandler,\r\n  useRBAC,\r\n  useAdminUsers,\r\n  useQueryParams,\r\n} from '@strapi/admin/strapi-admin';\r\nimport { unstable_useDocument } from '@strapi/content-manager/strapi-admin';\r\nimport { Combobox, ComboboxOption, Field, VisuallyHidden } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nimport { useTypedSelector } from '../../../../../modules/hooks';\r\nimport { useUpdateAssigneeMutation } from '../../../../../services/content-manager';\r\nimport { buildValidParams } from '../../../../../utils/api';\r\nimport { getDisplayName } from '../../../../../utils/users';\r\n\r\nimport { ASSIGNEE_ATTRIBUTE_NAME } from './constants';\r\n\r\nconst AssigneeSelect = ({ isCompact }: { isCompact?: boolean }) => {\r\n  const {\r\n    collectionType = '',\r\n    id,\r\n    slug: model = '',\r\n  } = useParams<{ collectionType: string; slug: string; id: string }>();\r\n  const permissions = useTypedSelector((state) => state.admin_app.permissions);\r\n  const { formatMessage } = useIntl();\r\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\r\n  const { toggleNotification } = useNotification();\r\n  const {\r\n    allowedActions: { canRead },\r\n    isLoading: isLoadingPermissions,\r\n  } = useRBAC(permissions.settings?.users);\r\n  const [{ query }] = useQueryParams();\r\n  const params = React.useMemo(() => buildValidParams(query), [query]);\r\n  const {\r\n    data,\r\n    isLoading: isLoadingUsers,\r\n    isError,\r\n  } = useAdminUsers(undefined, {\r\n    skip: isLoadingPermissions || !canRead,\r\n  });\r\n  const { document } = unstable_useDocument(\r\n    {\r\n      collectionType,\r\n      model,\r\n      documentId: id,\r\n    },\r\n    {\r\n      skip: !id && collectionType !== 'single-types',\r\n    }\r\n  );\r\n\r\n  const users = data?.users || [];\r\n\r\n  const currentAssignee = document ? document[ASSIGNEE_ATTRIBUTE_NAME] : null;\r\n\r\n  const [updateAssignee, { error, isLoading: isMutating }] = useUpdateAssigneeMutation();\r\n\r\n  if (!collectionType || !model || !document?.documentId) {\r\n    return null;\r\n  }\r\n\r\n  const handleChange = async (assigneeId: string | null) => {\r\n    // a simple way to avoid erroneous updates\r\n    if (currentAssignee?.id === assigneeId) {\r\n      return;\r\n    }\r\n\r\n    const res = await updateAssignee({\r\n      slug: collectionType,\r\n      model,\r\n      id: document.documentId,\r\n      params,\r\n      data: {\r\n        id: assigneeId ? parseInt(assigneeId, 10) : null,\r\n      },\r\n    });\r\n\r\n    if ('data' in res) {\r\n      toggleNotification({\r\n        type: 'success',\r\n        message: formatMessage({\r\n          id: 'content-manager.reviewWorkflows.assignee.notification.saved',\r\n          defaultMessage: 'Assignee updated',\r\n        }),\r\n      });\r\n    }\r\n\r\n    if (isCompact && 'error' in res) {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatAPIError(res.error),\r\n      });\r\n    }\r\n  };\r\n\r\n  const isDisabled =\r\n    (!isLoadingPermissions && !isLoadingUsers && users.length === 0) || !document.documentId;\r\n  const isLoading = isLoadingUsers || isLoadingPermissions || isMutating;\r\n\r\n  const assigneeLabel = formatMessage({\r\n    id: 'content-manager.reviewWorkflows.assignee.label',\r\n    defaultMessage: 'Assignee',\r\n  });\r\n  const assigneeClearLabel = formatMessage({\r\n    id: 'content-manager.reviewWorkflows.assignee.clear',\r\n    defaultMessage: 'Clear assignee',\r\n  });\r\n  const assigneePlaceholder = formatMessage({\r\n    id: 'content-manager.reviewWorkflows.assignee.placeholder',\r\n    defaultMessage: 'Select…',\r\n  });\r\n\r\n  if (isCompact) {\r\n    return (\r\n      <Field.Root name={ASSIGNEE_ATTRIBUTE_NAME} id={ASSIGNEE_ATTRIBUTE_NAME}>\r\n        <VisuallyHidden>\r\n          <Field.Label>{assigneeLabel}</Field.Label>\r\n        </VisuallyHidden>\r\n        <Combobox\r\n          clearLabel={assigneeClearLabel}\r\n          disabled={isDisabled}\r\n          value={currentAssignee ? currentAssignee.id.toString() : null}\r\n          onChange={handleChange}\r\n          onClear={() => handleChange(null)}\r\n          placeholder={assigneePlaceholder}\r\n          loading={isLoading || isLoadingPermissions || isMutating}\r\n          size=\"S\"\r\n        >\r\n          {users.map((user) => {\r\n            return (\r\n              <ComboboxOption\r\n                key={user.id}\r\n                value={user.id.toString()}\r\n                textValue={getDisplayName(user)}\r\n              >\r\n                {getDisplayName(user)}\r\n              </ComboboxOption>\r\n            );\r\n          })}\r\n        </Combobox>\r\n      </Field.Root>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Field.Root\r\n      name={ASSIGNEE_ATTRIBUTE_NAME}\r\n      id={ASSIGNEE_ATTRIBUTE_NAME}\r\n      error={\r\n        ((isError &&\r\n          canRead &&\r\n          formatMessage({\r\n            id: 'content-manager.reviewWorkflows.assignee.error',\r\n            defaultMessage: 'An error occurred while fetching users',\r\n          })) ||\r\n          (error && formatAPIError(error))) ??\r\n        undefined\r\n      }\r\n    >\r\n      <Field.Label>{assigneeLabel}</Field.Label>\r\n      <Combobox\r\n        clearLabel={assigneeClearLabel}\r\n        disabled={\r\n          (!isLoadingPermissions && !isLoading && users.length === 0) || !document.documentId\r\n        }\r\n        value={currentAssignee ? currentAssignee.id.toString() : null}\r\n        onChange={handleChange}\r\n        onClear={() => handleChange(null)}\r\n        placeholder={assigneePlaceholder}\r\n        loading={isLoading || isLoadingPermissions || isMutating}\r\n      >\r\n        {users.map((user) => {\r\n          return (\r\n            <ComboboxOption\r\n              key={user.id}\r\n              value={user.id.toString()}\r\n              textValue={getDisplayName(user)}\r\n            >\r\n              {getDisplayName(user)}\r\n            </ComboboxOption>\r\n          );\r\n        })}\r\n      </Combobox>\r\n      <Field.Error />\r\n    </Field.Root>\r\n  );\r\n};\r\n\r\nexport { AssigneeSelect };\r\n", "export const STAGE_ATTRIBUTE_NAME = 'strapi_stage';\r\nexport const ASSIGNEE_ATTRIBUTE_NAME = 'strapi_assignee';\r\n", "import * as React from 'react';\r\n\r\nimport { useNotification, useAPIErrorHandler, useQueryParams } from '@strapi/admin/strapi-admin';\r\nimport { useLicenseLimits } from '@strapi/admin/strapi-admin/ee';\r\nimport { unstable_useDocument } from '@strapi/content-manager/strapi-admin';\r\nimport {\r\n  SingleSelect,\r\n  type SingleSelectProps,\r\n  SingleSelectOption,\r\n  Field,\r\n  Flex,\r\n  Loader,\r\n  Typography,\r\n  VisuallyHidden,\r\n  Tooltip,\r\n} from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nimport { Stage } from '../../../../../../../shared/contracts/review-workflows';\r\nimport { LimitsModal, LimitsModalProps } from '../../../../../components/LimitsModal';\r\nimport {\r\n  CHARGEBEE_STAGES_PER_WORKFLOW_ENTITLEMENT_NAME,\r\n  CHARGEBEE_WORKFLOW_ENTITLEMENT_NAME,\r\n} from '../../../../../constants';\r\nimport { useGetStagesQuery, useUpdateStageMutation } from '../../../../../services/content-manager';\r\nimport { buildValidParams } from '../../../../../utils/api';\r\nimport { getStageColorByHex } from '../../../../../utils/colors';\r\n\r\nimport { STAGE_ATTRIBUTE_NAME } from './constants';\r\n\r\nimport type { Data } from '@strapi/types';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * LimitModals\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst WorkflowLimitModal = ({ open, onOpenChange }: LimitsModalProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  return (\r\n    <LimitsModal.Root open={open} onOpenChange={onOpenChange}>\r\n      <LimitsModal.Title>\r\n        {formatMessage({\r\n          id: 'content-manager.reviewWorkflows.workflows.limit.title',\r\n          defaultMessage: 'You’ve reached the limit of workflows in your plan',\r\n        })}\r\n      </LimitsModal.Title>\r\n\r\n      <LimitsModal.Body>\r\n        {formatMessage({\r\n          id: 'content-manager.reviewWorkflows.workflows.limit.body',\r\n          defaultMessage: 'Delete a workflow or contact Sales to enable more workflows.',\r\n        })}\r\n      </LimitsModal.Body>\r\n    </LimitsModal.Root>\r\n  );\r\n};\r\n\r\nconst StageLimitModal = ({ open, onOpenChange }: LimitsModalProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  return (\r\n    <LimitsModal.Root open={open} onOpenChange={onOpenChange}>\r\n      <LimitsModal.Title>\r\n        {formatMessage({\r\n          id: 'content-manager.reviewWorkflows.stages.limit.title',\r\n          defaultMessage: 'You have reached the limit of stages for this workflow in your plan',\r\n        })}\r\n      </LimitsModal.Title>\r\n\r\n      <LimitsModal.Body>\r\n        {formatMessage({\r\n          id: 'content-manager.reviewWorkflows.stages.limit.body',\r\n          defaultMessage: 'Try deleting some stages or contact Sales to enable more stages.',\r\n        })}\r\n      </LimitsModal.Body>\r\n    </LimitsModal.Root>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * StageSelect\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst Select = ({\r\n  stages,\r\n  activeWorkflowStage,\r\n  isLoading,\r\n  ...props\r\n}: SingleSelectProps & { stages: Stage[]; activeWorkflowStage: Stage; isLoading: boolean }) => {\r\n  const { formatMessage } = useIntl();\r\n  const { themeColorName } = getStageColorByHex(activeWorkflowStage?.color) ?? {};\r\n\r\n  return (\r\n    <SingleSelect\r\n      disabled={stages.length === 0}\r\n      placeholder={formatMessage({\r\n        id: 'content-manager.reviewWorkflows.assignee.placeholder',\r\n        defaultMessage: 'Select…',\r\n      })}\r\n      startIcon={\r\n        activeWorkflowStage && (\r\n          <Flex\r\n            tag=\"span\"\r\n            height={2}\r\n            background={activeWorkflowStage?.color}\r\n            borderColor={themeColorName === 'neutral0' ? 'neutral150' : undefined}\r\n            hasRadius\r\n            shrink={0}\r\n            width={2}\r\n            marginRight=\"-3px\"\r\n          />\r\n        )\r\n      }\r\n      // @ts-expect-error – `customizeContent` is not correctly typed in the DS.\r\n      customizeContent={() => {\r\n        return (\r\n          <Flex tag=\"span\" justifyContent=\"space-between\" alignItems=\"center\" width=\"100%\">\r\n            <Typography textColor=\"neutral800\" ellipsis lineHeight=\"inherit\">\r\n              {activeWorkflowStage?.name ?? ''}\r\n            </Typography>\r\n            {isLoading ? <Loader small style={{ display: 'flex' }} data-testid=\"loader\" /> : null}\r\n          </Flex>\r\n        );\r\n      }}\r\n      {...props}\r\n    >\r\n      {stages.map(({ id, color, name }) => {\r\n        const { themeColorName } = getStageColorByHex(color) ?? {};\r\n\r\n        return (\r\n          <SingleSelectOption\r\n            key={id}\r\n            startIcon={\r\n              <Flex\r\n                height={2}\r\n                background={color}\r\n                borderColor={themeColorName === 'neutral0' ? 'neutral150' : undefined}\r\n                hasRadius\r\n                shrink={0}\r\n                width={2}\r\n              />\r\n            }\r\n            value={id}\r\n            textValue={name}\r\n          >\r\n            {name}\r\n          </SingleSelectOption>\r\n        );\r\n      })}\r\n    </SingleSelect>\r\n  );\r\n};\r\n\r\nexport const StageSelect = ({ isCompact }: { isCompact?: boolean }) => {\r\n  const {\r\n    collectionType = '',\r\n    slug: model = '',\r\n    id = '',\r\n  } = useParams<{\r\n    collectionType: string;\r\n    slug: string;\r\n    id: string;\r\n  }>();\r\n  const { formatMessage } = useIntl();\r\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\r\n  const { toggleNotification } = useNotification();\r\n  const [{ query }] = useQueryParams();\r\n  const params = React.useMemo(() => buildValidParams(query), [query]);\r\n  const { document, isLoading: isLoadingDocument } = unstable_useDocument(\r\n    {\r\n      collectionType,\r\n      model,\r\n      documentId: id,\r\n    },\r\n    {\r\n      skip: !id && collectionType !== 'single-types',\r\n    }\r\n  );\r\n\r\n  const { data, isLoading: isLoadingStages } = useGetStagesQuery(\r\n    {\r\n      slug: collectionType,\r\n      model: model,\r\n      // @ts-expect-error – `id` is not correctly typed in the DS.\r\n      id: document?.documentId,\r\n      params,\r\n    },\r\n    {\r\n      skip: !document?.documentId,\r\n    }\r\n  );\r\n\r\n  const { meta, stages = [] } = data ?? {};\r\n\r\n  const { getFeature } = useLicenseLimits();\r\n  const [showLimitModal, setShowLimitModal] = React.useState<'stage' | 'workflow' | null>(null);\r\n\r\n  const limits = getFeature<string>('review-workflows') ?? {};\r\n\r\n  const activeWorkflowStage = document ? document[STAGE_ATTRIBUTE_NAME] : null;\r\n\r\n  const [updateStage, { error }] = useUpdateStageMutation();\r\n\r\n  const handleChange = async (stageId: Data.ID) => {\r\n    try {\r\n      /**\r\n       * If the current license has a limit:\r\n       * check if the total count of workflows exceeds that limit and display\r\n       * the limits modal.\r\n       *\r\n       * If the current license does not have a limit (e.g. offline license):\r\n       * do nothing (for now).\r\n       *\r\n       */\r\n\r\n      if (\r\n        limits?.[CHARGEBEE_WORKFLOW_ENTITLEMENT_NAME] &&\r\n        parseInt(limits[CHARGEBEE_WORKFLOW_ENTITLEMENT_NAME], 10) < (meta?.workflowCount ?? 0)\r\n      ) {\r\n        setShowLimitModal('workflow');\r\n\r\n        /**\r\n         * If the current license has a limit:\r\n         * check if the total count of stages exceeds that limit and display\r\n         * the limits modal.\r\n         *\r\n         * If the current license does not have a limit (e.g. offline license):\r\n         * do nothing (for now).\r\n         *\r\n         */\r\n      } else if (\r\n        limits?.[CHARGEBEE_STAGES_PER_WORKFLOW_ENTITLEMENT_NAME] &&\r\n        parseInt(limits[CHARGEBEE_STAGES_PER_WORKFLOW_ENTITLEMENT_NAME], 10) < stages.length\r\n      ) {\r\n        setShowLimitModal('stage');\r\n      } else {\r\n        if (document?.documentId) {\r\n          const res = await updateStage({\r\n            model,\r\n            id: document.documentId,\r\n            slug: collectionType,\r\n            params,\r\n            data: { id: stageId },\r\n          });\r\n\r\n          if ('data' in res) {\r\n            toggleNotification({\r\n              type: 'success',\r\n              message: formatMessage({\r\n                id: 'content-manager.reviewWorkflows.stage.notification.saved',\r\n                defaultMessage: 'Review stage updated',\r\n              }),\r\n            });\r\n          }\r\n\r\n          if (isCompact && 'error' in res) {\r\n            toggleNotification({\r\n              type: 'danger',\r\n              message: formatAPIError(res.error),\r\n            });\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatMessage({\r\n          id: 'content-manager.reviewWorkflows.stage.notification.error',\r\n          defaultMessage: 'An error occurred while updating the review stage',\r\n        }),\r\n      });\r\n    }\r\n  };\r\n\r\n  const isLoading = isLoadingStages || isLoadingDocument;\r\n\r\n  const reviewStageLabel = formatMessage({\r\n    id: 'content-manager.reviewWorkflows.stage.label',\r\n    defaultMessage: 'Review stage',\r\n  });\r\n  const reviewStageHint =\r\n    !isLoading &&\r\n    stages.length === 0 &&\r\n    // TODO: Handle errors and hints\r\n    formatMessage({\r\n      id: 'content-manager.reviewWorkflows.stages.no-transition',\r\n      defaultMessage: 'You don’t have the permission to update this stage.',\r\n    });\r\n\r\n  if (isCompact) {\r\n    return (\r\n      <>\r\n        <Tooltip label={reviewStageHint}>\r\n          <Field.Root name={STAGE_ATTRIBUTE_NAME} id={STAGE_ATTRIBUTE_NAME}>\r\n            <>\r\n              <VisuallyHidden>\r\n                <Field.Label>{reviewStageLabel}</Field.Label>\r\n              </VisuallyHidden>\r\n              <Select\r\n                stages={stages}\r\n                activeWorkflowStage={activeWorkflowStage}\r\n                isLoading={isLoading}\r\n                size=\"S\"\r\n                disabled={stages.length === 0}\r\n                value={activeWorkflowStage?.id}\r\n                onChange={handleChange}\r\n                placeholder={formatMessage({\r\n                  id: 'content-manager.reviewWorkflows.assignee.placeholder',\r\n                  defaultMessage: 'Select…',\r\n                })}\r\n              />\r\n            </>\r\n          </Field.Root>\r\n        </Tooltip>\r\n        <WorkflowLimitModal\r\n          open={showLimitModal === 'workflow'}\r\n          onOpenChange={() => setShowLimitModal(null)}\r\n        />\r\n        <StageLimitModal\r\n          open={showLimitModal === 'stage'}\r\n          onOpenChange={() => setShowLimitModal(null)}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Field.Root\r\n        hint={reviewStageHint}\r\n        error={(error && formatAPIError(error)) || undefined}\r\n        name={STAGE_ATTRIBUTE_NAME}\r\n        id={STAGE_ATTRIBUTE_NAME}\r\n      >\r\n        <Field.Label>{reviewStageLabel}</Field.Label>\r\n        <Select\r\n          stages={stages}\r\n          activeWorkflowStage={activeWorkflowStage}\r\n          isLoading={isLoading}\r\n          disabled={stages.length === 0}\r\n          value={activeWorkflowStage?.id}\r\n          onChange={handleChange}\r\n          placeholder={formatMessage({\r\n            id: 'content-manager.reviewWorkflows.assignee.placeholder',\r\n            defaultMessage: 'Select…',\r\n          })}\r\n        />\r\n        <Field.Hint />\r\n        <Field.Error />\r\n      </Field.Root>\r\n      <WorkflowLimitModal\r\n        open={showLimitModal === 'workflow'}\r\n        onOpenChange={() => setShowLimitModal(null)}\r\n      />\r\n      <StageLimitModal\r\n        open={showLimitModal === 'stage'}\r\n        onOpenChange={() => setShowLimitModal(null)}\r\n      />\r\n    </>\r\n  );\r\n};\r\n", "import { unstable_useDocumentLayout as useDocumentLayout } from '@strapi/content-manager/strapi-admin';\r\nimport { Flex } from '@strapi/design-system';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nimport { AssigneeSelect } from './AssigneeSelect';\r\nimport { StageSelect } from './StageSelect';\r\n\r\nconst Header = () => {\r\n  const {\r\n    slug = '',\r\n    id,\r\n    collectionType,\r\n  } = useParams<{\r\n    collectionType: string;\r\n    slug: string;\r\n    id: string;\r\n  }>();\r\n\r\n  const {\r\n    edit: { options },\r\n  } = useDocumentLayout(slug);\r\n\r\n  if (\r\n    !window.strapi.isEE ||\r\n    !options?.reviewWorkflows ||\r\n    (collectionType !== 'single-types' && !id) ||\r\n    id === 'create'\r\n  ) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Flex gap={2}>\r\n      <AssigneeSelect isCompact />\r\n      <StageSelect isCompact />\r\n    </Flex>\r\n  );\r\n};\r\n\r\nHeader.type = 'preview';\r\n\r\nexport { Header };\r\n", "import { unstable_useDocumentLayout as useDocumentLayout } from '@strapi/content-manager/strapi-admin';\r\nimport { Flex } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nimport { AssigneeSelect } from './AssigneeSelect';\r\nimport { StageSelect } from './StageSelect';\r\n\r\nimport type { PanelComponent } from '@strapi/content-manager/strapi-admin';\r\n\r\nconst Panel: PanelComponent = () => {\r\n  const {\r\n    slug = '',\r\n    id,\r\n    collectionType,\r\n  } = useParams<{\r\n    collectionType: string;\r\n    slug: string;\r\n    id: string;\r\n  }>();\r\n\r\n  const {\r\n    edit: { options },\r\n  } = useDocumentLayout(slug);\r\n  const { formatMessage } = useIntl();\r\n\r\n  if (\r\n    !window.strapi.isEE ||\r\n    !options?.reviewWorkflows ||\r\n    (collectionType !== 'single-types' && !id) ||\r\n    id === 'create'\r\n  ) {\r\n    return null;\r\n  }\r\n\r\n  return {\r\n    title: formatMessage({\r\n      id: 'content-manager.containers.edit.panels.review-workflows.title',\r\n      defaultMessage: 'Review Workflows',\r\n    }),\r\n    content: (\r\n      <Flex direction=\"column\" gap={2} alignItems=\"stretch\" width=\"100%\">\r\n        <AssigneeSelect />\r\n        <StageSelect />\r\n      </Flex>\r\n    ),\r\n  };\r\n};\r\n\r\n// @ts-expect-error – this is fine, we like to label the core panels / actions.\r\nPanel.type = 'review-workflows';\r\n\r\nexport { Panel };\r\n", "import * as React from 'react';\r\n\r\nimport { type Filters, useAdminUsers, useField } from '@strapi/admin/strapi-admin';\r\nimport { Combobox, ComboboxOption, ComboboxProps } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { getDisplayName } from '../../../../utils/users';\r\n\r\ninterface AssigneeFilterProps extends Pick<ComboboxProps, 'value' | 'onChange'> {}\r\n\r\nconst AssigneeFilter = ({ name }: Filters.ValueInputProps) => {\r\n  const [page, setPage] = React.useState(1);\r\n  const { formatMessage } = useIntl();\r\n  const { data, isLoading } = useAdminUsers({\r\n    page,\r\n  });\r\n  const users = data?.users || [];\r\n\r\n  const field = useField(name);\r\n\r\n  const handleChange = (value?: string) => {\r\n    setPage(1);\r\n    field.onChange(name, value);\r\n  };\r\n\r\n  return (\r\n    <Combobox\r\n      value={field.value}\r\n      aria-label={formatMessage({\r\n        id: 'content-manager.components.Filters.usersSelect.label',\r\n        defaultMessage: 'Search and select an user to filter',\r\n      })}\r\n      onChange={handleChange}\r\n      loading={isLoading}\r\n      onLoadMore={() => setPage((prev) => prev + 1)}\r\n    >\r\n      {users.map((user) => {\r\n        return (\r\n          <ComboboxOption key={user.id} value={user.id.toString()}>\r\n            {getDisplayName(user)}\r\n          </ComboboxOption>\r\n        );\r\n      })}\r\n    </Combobox>\r\n  );\r\n};\r\n\r\nexport { AssigneeFilter };\r\nexport type { AssigneeFilterProps };\r\n", "import { type Filters, useField } from '@strapi/admin/strapi-admin';\r\nimport {\r\n  Flex,\r\n  Loader,\r\n  SingleSelect,\r\n  SingleSelectOption,\r\n  SingleSelectProps,\r\n  Typography,\r\n} from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nimport { getStageColorByHex } from '../../../../utils/colors';\r\nimport { useReviewWorkflows } from '../../../settings/hooks/useReviewWorkflows';\r\n\r\ninterface StageFilterProps extends Pick<SingleSelectProps, 'value' | 'onChange'> {\r\n  uid?: string;\r\n}\r\n\r\nconst StageFilter = (props: Filters.ValueInputProps) => {\r\n  const { slug: model } = useParams<{ slug: string }>();\r\n  const { formatMessage } = useIntl();\r\n  const { workflows, isLoading } = useReviewWorkflows({ filters: { contentTypes: model } });\r\n\r\n  const field = useField(props.name);\r\n\r\n  const [workflow] = workflows ?? [];\r\n\r\n  return (\r\n    <SingleSelect\r\n      aria-label={formatMessage({\r\n        id: 'content-manager.components.Filters.reviewWorkflows.label',\r\n        defaultMessage: 'Search and select an workflow stage to filter',\r\n      })}\r\n      value={field.value}\r\n      onChange={(value) => {\r\n        field.onChange(props.name, value);\r\n      }}\r\n      loading={isLoading}\r\n      // @ts-expect-error – DS type error with SingleSelect['customizeContent']\r\n      customizeContent={() => (\r\n        <Flex tag=\"span\" justifyContent=\"space-between\" alignItems=\"center\" width=\"100%\">\r\n          <Typography textColor=\"neutral800\" ellipsis>\r\n            {field.value}\r\n          </Typography>\r\n          {isLoading ? <Loader small style={{ display: 'flex' }} /> : null}\r\n        </Flex>\r\n      )}\r\n    >\r\n      {(workflow?.stages ?? []).map(({ id, color, name }) => {\r\n        const { themeColorName } = getStageColorByHex(color) ?? {};\r\n\r\n        return (\r\n          <SingleSelectOption\r\n            key={id}\r\n            startIcon={\r\n              <Flex\r\n                height={2}\r\n                background={color}\r\n                borderColor={themeColorName === 'neutral0' ? 'neutral150' : undefined}\r\n                hasRadius\r\n                shrink={0}\r\n                width={2}\r\n              />\r\n            }\r\n            value={name}\r\n          >\r\n            {name}\r\n          </SingleSelectOption>\r\n        );\r\n      })}\r\n    </SingleSelect>\r\n  );\r\n};\r\n\r\nexport { StageFilter };\r\nexport type { StageFilterProps };\r\n", "import { AssigneeFilter } from './components/AssigneeFilter';\r\nimport { StageFilter } from './components/StageFilter';\r\nimport { AssigneeColumn, StageColumn } from './components/TableColumns';\r\nimport { ASSIGNEE_ATTRIBUTE_NAME, STAGE_ATTRIBUTE_NAME } from './id/components/constants';\r\n\r\nimport type { Filters } from '@strapi/admin/strapi-admin';\r\nimport type { ListFieldLayout } from '@strapi/content-manager/strapi-admin';\r\nimport type { MessageDescriptor } from 'react-intl';\r\n\r\nexport const REVIEW_WORKFLOW_COLUMNS = [\r\n  {\r\n    name: STAGE_ATTRIBUTE_NAME,\r\n    attribute: {\r\n      type: 'relation',\r\n      relation: 'oneToMany',\r\n      target: 'admin::review-workflow-stage',\r\n    },\r\n    label: {\r\n      id: 'review-workflows.containers.list.table-headers.reviewWorkflows.stage',\r\n      defaultMessage: 'Review stage',\r\n    },\r\n    searchable: false,\r\n    sortable: true,\r\n    mainField: {\r\n      name: 'name',\r\n      type: 'string',\r\n    },\r\n    cellFormatter: (props) => <StageColumn {...props} />,\r\n  },\r\n  {\r\n    name: ASSIGNEE_ATTRIBUTE_NAME,\r\n    attribute: {\r\n      type: 'relation',\r\n      target: 'admin::user',\r\n      relation: 'oneToMany',\r\n    },\r\n    label: {\r\n      id: 'review-workflows.containers.list.table-headers.reviewWorkflows.assignee',\r\n      defaultMessage: 'Assignee',\r\n    },\r\n    searchable: false,\r\n    sortable: true,\r\n    mainField: {\r\n      name: 'firstname',\r\n      type: 'string',\r\n    },\r\n    cellFormatter: (props) => <AssigneeColumn {...props} />,\r\n  },\r\n] satisfies Array<Omit<ListFieldLayout, 'label'> & { label: MessageDescriptor }>;\r\n\r\nexport const REVIEW_WORKFLOW_FILTERS = [\r\n  {\r\n    mainField: {\r\n      name: 'name',\r\n      type: 'string',\r\n    },\r\n    input: StageFilter,\r\n    label: {\r\n      id: 'review-workflows.containers.list.table-headers.reviewWorkflows.stage',\r\n      defaultMessage: 'Review stage',\r\n    },\r\n    name: 'strapi_stage',\r\n    type: 'relation',\r\n  },\r\n\r\n  {\r\n    type: 'relation',\r\n    mainField: {\r\n      name: 'id',\r\n      type: 'integer',\r\n    },\r\n    input: AssigneeFilter,\r\n    operators: [\r\n      {\r\n        label: {\r\n          id: 'components.FilterOptions.FILTER_TYPES.$eq',\r\n          defaultMessage: 'is',\r\n        },\r\n        value: '$eq',\r\n      },\r\n      {\r\n        label: {\r\n          id: 'components.FilterOptions.FILTER_TYPES.$ne',\r\n          defaultMessage: 'is not',\r\n        },\r\n        value: '$ne',\r\n      },\r\n    ],\r\n    label: {\r\n      id: 'review-workflows.containers.list.table-headers.reviewWorkflows.assignee.label',\r\n      defaultMessage: 'Assignee',\r\n    },\r\n    name: 'strapi_assignee',\r\n  },\r\n] satisfies Array<\r\n  Omit<Filters.Filter, 'label' | 'operators'> & {\r\n    label: MessageDescriptor;\r\n    operators?: Array<{ value: string; label: MessageDescriptor }>;\r\n  }\r\n>;\r\n", "import { REVIEW_WORKFLOW_COLUMNS } from '../routes/content-manager/model/constants';\r\n\r\nimport type { ListFieldLayout, ListLayout } from '@strapi/content-manager/strapi-admin';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * addColumnToTableHook\r\n * -----------------------------------------------------------------------------------------------*/\r\ninterface AddColumnToTableHookArgs {\r\n  layout: ListLayout;\r\n  displayedHeaders: ListFieldLayout[];\r\n}\r\n\r\nconst addColumnToTableHook = ({ displayedHeaders, layout }: AddColumnToTableHookArgs) => {\r\n  const { options } = layout;\r\n\r\n  if (!options.reviewWorkflows) {\r\n    return { displayedHeaders, layout };\r\n  }\r\n\r\n  return {\r\n    displayedHeaders: [...displayedHeaders, ...REVIEW_WORKFLOW_COLUMNS],\r\n    layout,\r\n  };\r\n};\r\n\r\nexport { addColumnToTableHook };\r\n", "type TradOptions = Record<string, string>;\r\n\r\nconst prefixPluginTranslations = (trad: TradOptions, pluginId: string): TradOptions => {\r\n  if (!pluginId) {\r\n    throw new TypeError(\"pluginId can't be empty\");\r\n  }\r\n  return Object.keys(trad).reduce((acc, current) => {\r\n    acc[`${pluginId}.${current}`] = trad[current];\r\n    return acc;\r\n  }, {} as TradOptions);\r\n};\r\n\r\nexport { prefixPluginTranslations };\r\n", "import { SealCheck } from '@strapi/icons';\r\n\r\nimport { PLUGIN_ID, FEATURE_ID } from './constants';\r\nimport { Header } from './routes/content-manager/model/id/components/Header';\r\nimport { Panel } from './routes/content-manager/model/id/components/Panel';\r\nimport { addColumnToTableHook } from './utils/cm-hooks';\r\nimport { prefixPluginTranslations } from './utils/translations';\r\n\r\nimport type { StrapiApp } from '@strapi/admin/strapi-admin';\r\nimport type { Plugin } from '@strapi/types';\r\n\r\nconst admin: Plugin.Config.AdminInput = {\r\n  register(app: StrapiApp) {\r\n    if (window.strapi.features.isEnabled(FEATURE_ID)) {\r\n      app.registerHook('Admin/CM/pages/ListView/inject-column-in-table', addColumnToTableHook);\r\n\r\n      const contentManagerPluginApis = app.getPlugin('content-manager').apis;\r\n\r\n      if (\r\n        'addEditViewSidePanel' in contentManagerPluginApis &&\r\n        typeof contentManagerPluginApis.addEditViewSidePanel === 'function'\r\n      ) {\r\n        contentManagerPluginApis.addEditViewSidePanel([Panel]);\r\n      }\r\n\r\n      app.addSettingsLink('global', {\r\n        id: PLUGIN_ID,\r\n        to: `review-workflows`,\r\n        intlLabel: {\r\n          id: `${PLUGIN_ID}.plugin.name`,\r\n          defaultMessage: 'Review Workflows',\r\n        },\r\n        permissions: [],\r\n        async Component() {\r\n          const { Router } = await import('./router');\r\n          return { default: Router };\r\n        },\r\n      });\r\n\r\n      app.widgets.register([\r\n        {\r\n          icon: SealCheck,\r\n          title: {\r\n            id: `${PLUGIN_ID}.widget.assigned.title`,\r\n            defaultMessage: 'Assigned to me',\r\n          },\r\n          component: async () => {\r\n            const { AssignedWidget } = await import('./components/Widgets');\r\n            return AssignedWidget;\r\n          },\r\n          pluginId: PLUGIN_ID,\r\n          id: 'assigned',\r\n          permissions: [{ action: 'plugin::content-manager.explorer.read' }],\r\n        },\r\n      ]);\r\n    } else if (!window.strapi.features.isEnabled(FEATURE_ID) && window.strapi?.flags?.promoteEE) {\r\n      app.addSettingsLink('global', {\r\n        id: PLUGIN_ID,\r\n        to: `purchase-review-workflows`,\r\n        intlLabel: {\r\n          id: `${PLUGIN_ID}.plugin.name`,\r\n          defaultMessage: 'Review Workflows',\r\n        },\r\n        licenseOnly: true,\r\n        permissions: [],\r\n        async Component() {\r\n          const { PurchaseReviewWorkflows } = await import('./routes/purchase-review-workflows');\r\n          return { default: PurchaseReviewWorkflows };\r\n        },\r\n      });\r\n    }\r\n  },\r\n  bootstrap(app: StrapiApp) {\r\n    if (window.strapi.features.isEnabled(FEATURE_ID)) {\r\n      app.getPlugin('content-manager').injectComponent('preview', 'actions', {\r\n        name: 'review-workflows-assignee',\r\n        Component: Header,\r\n      });\r\n    }\r\n  },\r\n  async registerTrads({ locales }: { locales: string[] }) {\r\n    const importedTrads = await Promise.all(\r\n      locales.map((locale) => {\r\n        return import(`./translations/${locale}.json`)\r\n          .then(({ default: data }) => {\r\n            return {\r\n              data: prefixPluginTranslations(data, PLUGIN_ID),\r\n              locale,\r\n            };\r\n          })\r\n          .catch(() => {\r\n            return {\r\n              data: {},\r\n              locale,\r\n            };\r\n          });\r\n      })\r\n    );\r\n\r\n    return Promise.resolve(importedTrads);\r\n  },\r\n};\r\n\r\n// eslint-disable-next-line import/no-default-export\r\nexport default admin;\r\n", "import { RenderAdminArgs, renderAdmin } from '@strapi/admin/strapi-admin';\nimport contentTypeBuilder from '@strapi/content-type-builder/strapi-admin';\nimport contentManager from '@strapi/content-manager/strapi-admin';\nimport email from '@strapi/email/strapi-admin';\nimport upload from '@strapi/upload/strapi-admin';\nimport i18n from '@strapi/i18n/strapi-admin';\nimport contentReleases from '@strapi/content-releases/strapi-admin';\nimport reviewWorkflows from '@strapi/review-workflows/strapi-admin';\n\nconst render = (mountNode: HTMLElement | null, { plugins, ...restArgs }: RenderAdminArgs) => {\n  return renderAdmin(mountNode, {\n    ...restArgs,\n    plugins: {\n      'content-manager': contentManager,\n      'content-type-builder': contentTypeBuilder,\n      email,\n      upload,\n      contentReleases,\n      i18n,\n      reviewWorkflows,\n      ...plugins,\n    },\n  });\n};\n\nexport { render as renderAdmin };\nexport type { RenderAdminArgs };\n\nexport * from '@strapi/admin/strapi-admin';\n\nexport {\n  unstable_useDocumentLayout,\n  unstable_useDocumentActions,\n  unstable_useDocument,\n  unstable_useContentManagerContext,\n  useDocumentRBAC,\n} from '@strapi/content-manager/strapi-admin';\n\nexport {\n  private_useAutoReloadOverlayBlocker,\n  private_AutoReloadOverlayBlockerProvider,\n} from '@strapi/content-type-builder/strapi-admin';\n"],
  "mappings": "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",
  "names": ["reducer", "get", "create", "cloneDeep", "prefixPluginTranslations", "pluginId", "src_default", "prefixPluginTranslations", "prefixPluginTranslations", "pluginId", "PERMISSIONS", "globImport_translations_json", "prefixPluginTranslations", "src_default", "React", "React", "React", "Filters", "import_jsx_runtime", "React", "import_jsx_runtime", "Pagination", "import_jsx_runtime", "Pagination", "React", "import_jsx_runtime", "import_jsx_runtime", "Filters", "_a", "_b", "import_jsx_runtime", "import_jsx_runtime", "import_jsx_runtime", "folderId", "import_jsx_runtime", "folderId", "React", "React", "import_jsx_runtime", "import_jsx_runtime", "React", "import_jsx_runtime", "import_jsx_runtime", "import_jsx_runtime", "STEPS", "name", "value", "uploadedFiles", "admin", "pluginId", "PERMISSIONS", "globImport_translations_json", "src_default", "import_get", "React", "import_jsx_runtime", "TextAlignTypography", "name", "value", "React", "React", "has", "import_qs", "import_jsx_runtime", "Link", "import_jsx_runtime", "locale", "_a", "document", "import_jsx_runtime", "React", "import_jsx_runtime", "_a", "_b", "React", "import_jsx_runtime", "import_jsx_runtime", "name", "import_jsx_runtime", "import_get", "type", "get", "prefixPluginTranslations", "pluginId", "omit", "src_default", "pluginId", "PERMISSIONS", "create", "get", "globImport_translations_json", "prefixPluginTranslations", "import_jsx_runtime", "create", "Link", "PERMISSIONS", "import_jsx_runtime", "PERMISSIONS", "_a", "response", "import_jsx_runtime", "addColumnToTableHook", "name", "import_jsx_runtime", "PERMISSIONS", "prefixPluginTranslations", "pluginId", "admin", "pluginId", "PERMISSIONS", "addColumnToTableHook", "globImport_translations_json", "prefixPluginTranslations", "src_default", "React", "import_jsx_runtime", "buildValidParams", "React", "import_jsx_runtime", "name", "themeColorName", "buildValidParams", "error", "import_jsx_runtime", "import_jsx_runtime", "Panel", "React", "import_jsx_runtime", "import_jsx_runtime", "import_jsx_runtime", "addColumnToTableHook", "prefixPluginTranslations", "pluginId", "admin", "addColumnToTableHook", "Panel", "globImport_translations_json", "prefixPluginTranslations", "src_default", "render", "mountNode", "plugins", "restArgs", "renderAdmin", "contentManager", "contentTypeBuilder", "email", "upload", "contentReleases", "i18n", "reviewWorkflows"]
}
