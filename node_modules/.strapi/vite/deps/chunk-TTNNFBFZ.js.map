{
  "version": 3,
  "sources": ["../../../../../packages/core/admin/admin/src/services/webhooks.ts", "../../../../../packages/core/admin/admin/src/pages/Settings/pages/Webhooks/hooks/useWebhooks.ts"],
  "sourcesContent": ["import * as Webhooks from '../../../shared/contracts/webhooks';\r\n\r\nimport { adminApi } from './api';\r\n\r\nconst webhooksSerivce = adminApi\r\n  .enhanceEndpoints({\r\n    addTagTypes: ['Webhook'],\r\n  })\r\n  .injectEndpoints({\r\n    endpoints: (builder) => ({\r\n      getWebhooks: builder.query<\r\n        Webhooks.GetWebhooks.Response['data'],\r\n        Webhooks.GetWebhook.Params | void\r\n      >({\r\n        query: (args) => ({\r\n          url: `/admin/webhooks/${args?.id ?? ''}`,\r\n          method: 'GET',\r\n        }),\r\n        transformResponse: (\r\n          response: Webhooks.GetWebhooks.Response | Webhooks.GetWebhook.Response\r\n        ) => {\r\n          if (Array.isArray(response.data)) {\r\n            return response.data;\r\n          } else {\r\n            return [response.data];\r\n          }\r\n        },\r\n        providesTags: (res, _err, arg) => {\r\n          if (typeof arg === 'object' && 'id' in arg) {\r\n            return [{ type: 'Webhook' as const, id: arg.id }];\r\n          } else {\r\n            return [\r\n              ...(res?.map(({ id }) => ({ type: 'Webhook' as const, id })) ?? []),\r\n              { type: 'Webhook' as const, id: 'LIST' },\r\n            ];\r\n          }\r\n        },\r\n      }),\r\n      createWebhook: builder.mutation<\r\n        Webhooks.CreateWebhook.Response['data'],\r\n        Omit<Webhooks.CreateWebhook.Request['body'], 'id' | 'isEnabled'>\r\n      >({\r\n        query: (body) => ({\r\n          url: `/admin/webhooks`,\r\n          method: 'POST',\r\n          data: body,\r\n        }),\r\n        transformResponse: (response: Webhooks.CreateWebhook.Response) => response.data,\r\n        invalidatesTags: [{ type: 'Webhook', id: 'LIST' }],\r\n      }),\r\n      updateWebhook: builder.mutation<\r\n        Webhooks.UpdateWebhook.Response['data'],\r\n        Webhooks.UpdateWebhook.Request['body'] & Webhooks.UpdateWebhook.Params\r\n      >({\r\n        query: ({ id, ...body }) => ({\r\n          url: `/admin/webhooks/${id}`,\r\n          method: 'PUT',\r\n          data: body,\r\n        }),\r\n        transformResponse: (response: Webhooks.UpdateWebhook.Response) => response.data,\r\n        invalidatesTags: (_res, _err, { id }) => [{ type: 'Webhook', id }],\r\n      }),\r\n      triggerWebhook: builder.mutation<\r\n        Webhooks.TriggerWebhook.Response['data'],\r\n        Webhooks.TriggerWebhook.Params['id']\r\n      >({\r\n        query: (webhookId) => ({\r\n          url: `/admin/webhooks/${webhookId}/trigger`,\r\n          method: 'POST',\r\n        }),\r\n        transformResponse: (response: Webhooks.TriggerWebhook.Response) => response.data,\r\n      }),\r\n      deleteManyWebhooks: builder.mutation<\r\n        Webhooks.DeleteWebhooks.Response['data'],\r\n        Webhooks.DeleteWebhooks.Request['body']\r\n      >({\r\n        query: (body) => ({\r\n          url: `/admin/webhooks/batch-delete`,\r\n          method: 'POST',\r\n          data: body,\r\n        }),\r\n        transformResponse: (response: Webhooks.DeleteWebhooks.Response) => response.data,\r\n        invalidatesTags: (_res, _err, { ids }) => ids.map((id) => ({ type: 'Webhook', id })),\r\n      }),\r\n    }),\r\n    overrideExisting: false,\r\n  });\r\n\r\nconst {\r\n  useGetWebhooksQuery,\r\n  useCreateWebhookMutation,\r\n  useUpdateWebhookMutation,\r\n  useTriggerWebhookMutation,\r\n  useDeleteManyWebhooksMutation,\r\n} = webhooksSerivce;\r\n\r\nexport {\r\n  useGetWebhooksQuery,\r\n  useCreateWebhookMutation,\r\n  useUpdateWebhookMutation,\r\n  useTriggerWebhookMutation,\r\n  useDeleteManyWebhooksMutation,\r\n};\r\n", "import { SerializedError } from '@reduxjs/toolkit';\r\n\r\nimport { GetWebhook, GetWebhooks } from '../../../../../../../shared/contracts/webhooks';\r\nimport {\r\n  useGetWebhooksQuery,\r\n  useCreateWebhookMutation,\r\n  useUpdateWebhookMutation,\r\n  useTriggerWebhookMutation,\r\n  useDeleteManyWebhooksMutation,\r\n} from '../../../../../services/webhooks';\r\nimport { BaseQueryError } from '../../../../../utils/baseQuery';\r\n\r\nconst useWebhooks = (\r\n  args: GetWebhook.Params | void = undefined,\r\n  queryArgs?: Parameters<typeof useGetWebhooksQuery>[1]\r\n) => {\r\n  const { data: webhooks, isLoading, error } = useGetWebhooksQuery(args, queryArgs);\r\n  const [createWebhook, { error: createError }] = useCreateWebhookMutation();\r\n  const [updateWebhook, { error: updateError }] = useUpdateWebhookMutation();\r\n\r\n  const [triggerWebhook] = useTriggerWebhookMutation();\r\n  const [deleteManyWebhooks] = useDeleteManyWebhooksMutation();\r\n\r\n  return {\r\n    webhooks: webhooks as GetWebhooks.Response['data'] | undefined,\r\n    isLoading: isLoading as boolean,\r\n    error: (error || createError || updateError) as BaseQueryError | SerializedError,\r\n    createWebhook,\r\n    updateWebhook,\r\n    triggerWebhook,\r\n    deleteManyWebhooks,\r\n  };\r\n};\r\n\r\nexport { useWebhooks };\r\n"],
  "mappings": "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",
  "names": []
}
