import {
  AssetGridList,
  Breadcrumbs,
  EditAssetDialog,
  EditFolderDialog,
  EmptyAssets,
  FilterList,
  FilterPopover,
  FolderCard,
  FolderCardBody,
  FolderCardBodyAction,
  FolderGridList,
  SelectTree,
  SortPicker,
  TableList,
  UploadAssetDialog,
  useAssets,
  useBulkRemove,
  useFolder,
  useFolderCard,
  useFolderStructure,
  useFolders,
  useMediaLibraryPermissions,
  usePersistentState,
  useSelectionState
} from "./chunk-YBURBBE5.js";
import {
  useConfig
} from "./chunk-GVMFFF2N.js";
import {
  containsAssetFilter,
  displayedFilters,
  getBreadcrumbDataML,
  getFolderURL,
  getTrad,
  localStorageKeys,
  normalizeAPIError,
  pluginId,
  viewOptions
} from "./chunk-7PPO62D5.js";
import "./chunk-XONCH55P.js";
import "./chunk-VGLD7XCK.js";
import "./chunk-2ZQUEACL.js";
import "./chunk-FYXG3DTK.js";
import "./chunk-AUQFPK2Y.js";
import "./chunk-XEUV47ZT.js";
import "./chunk-4J4JH4DL.js";
import "./chunk-HXZ2GHFZ.js";
import "./chunk-G3UG26ZE.js";
import "./chunk-6Q5DMVVB.js";
import "./chunk-D5N4CUND.js";
import "./chunk-Y6F2Z2AQ.js";
import {
  Pagination
} from "./chunk-HSX2BZF6.js";
import "./chunk-L5ESVDCC.js";
import "./chunk-XXRLJZ2Z.js";
import "./chunk-7WFYXSNR.js";
import "./chunk-5TWNRMNB.js";
import "./chunk-ZRXSF5PI.js";
import "./chunk-2M3OHFCF.js";
import "./chunk-3QOMPMDL.js";
import {
  useFetchClient
} from "./chunk-L6MVB4FQ.js";
import {
  SearchInput
} from "./chunk-OQ5X2AZ3.js";
import {
  ConfirmDialog
} from "./chunk-7XSIHJSQ.js";
import "./chunk-PJGZMO5F.js";
import "./chunk-JUJLGPZB.js";
import "./chunk-6GQ5QKHI.js";
import {
  require_isEmpty
} from "./chunk-WNTEWYDG.js";
import "./chunk-6MHIA2XQ.js";
import "./chunk-JTVP57KZ.js";
import "./chunk-BR5DWYPY.js";
import "./chunk-X5YFDRMS.js";
import "./chunk-LVVND4TK.js";
import {
  Layouts
} from "./chunk-O6JJIRK6.js";
import {
  useTracking
} from "./chunk-DHQERSO6.js";
import "./chunk-GLPT7RON.js";
import "./chunk-54PZNGL6.js";
import {
  Page
} from "./chunk-OUTHPJ5W.js";
import {
  useQueryParams
} from "./chunk-YQN4TQZU.js";
import "./chunk-ITUTZMO4.js";
import {
  useNotification
} from "./chunk-S4GSJQUH.js";
import "./chunk-3CYOA7RQ.js";
import "./chunk-3Y3HZKRY.js";
import "./chunk-PR5W4YOM.js";
import "./chunk-75I5DWRQ.js";
import {
  Link as Link2,
  NavLink,
  Route,
  Routes,
  useLocation,
  useNavigate
} from "./chunk-QOSJGLB6.js";
import "./chunk-O4TQZ7PI.js";
import "./chunk-6VYH4IES.js";
import {
  useMutation,
  useQueryClient
} from "./chunk-ICS3EKH5.js";
import "./chunk-6VU4ULW6.js";
import "./chunk-WA6BWN3W.js";
import "./chunk-UCDGERJK.js";
import "./chunk-I7675365.js";
import "./chunk-EHBUXG3W.js";
import {
  Form,
  Formik
} from "./chunk-5KTEVKJL.js";
import "./chunk-CEKG4MVB.js";
import "./chunk-CLDKBGB3.js";
import "./chunk-RYHDJ43U.js";
import "./chunk-GARU6WOT.js";
import "./chunk-2T3F2FEA.js";
import "./chunk-FBKW3ZX5.js";
import "./chunk-6XMPWYL4.js";
import "./chunk-4PYOUU3W.js";
import "./chunk-JNCTODJD.js";
import "./chunk-2VOUQL7N.js";
import "./chunk-SMSMUSQ2.js";
import "./chunk-PBKEIS74.js";
import "./chunk-XNLL4XTY.js";
import "./chunk-VJHHRLHY.js";
import "./chunk-HWWDZF4D.js";
import "./chunk-Z7WXACEM.js";
import "./chunk-PZKJYQOP.js";
import "./chunk-KTCYCI5X.js";
import "./chunk-4S6CO3NF.js";
import "./chunk-WZMMABOO.js";
import "./chunk-KU6R7J3L.js";
import "./chunk-ALOZZQWE.js";
import "./chunk-3XH2Q2B6.js";
import "./chunk-SM5ZDAVK.js";
import "./chunk-AAOWBC4P.js";
import "./chunk-AVUVASSG.js";
import "./chunk-DEZRKVMG.js";
import "./chunk-LDTLLP4K.js";
import "./chunk-CFOYKXNH.js";
import "./chunk-DWNGFC4T.js";
import "./chunk-SKI2TI5D.js";
import "./chunk-PQYVQDZP.js";
import "./chunk-ZGAXZ2TY.js";
import "./chunk-6EUDYBNR.js";
import "./chunk-3KMG3VFU.js";
import "./chunk-UTVXCYRG.js";
import {
  Box,
  Button,
  CheckboxImpl,
  Dialog,
  Divider,
  Field,
  Flex,
  Grid,
  IconButton,
  Link,
  Loader,
  Modal,
  Popover,
  Typography,
  VisuallyHidden
} from "./chunk-3AUSDG4O.js";
import {
  ForwardRef$1l,
  ForwardRef$1z,
  ForwardRef$2t,
  ForwardRef$3d,
  ForwardRef$3n,
  ForwardRef$3p,
  ForwardRef$4l,
  ForwardRef$5r,
  ForwardRef$n
} from "./chunk-F5I3ZVMF.js";
import {
  dt
} from "./chunk-FJZ2NJT6.js";
import "./chunk-VH7UJDNP.js";
import "./chunk-HG4QJCZT.js";
import "./chunk-I7DIJEXN.js";
import {
  useIntl
} from "./chunk-2BDXRWHF.js";
import "./chunk-SBRVGDJ6.js";
import "./chunk-YUZK7WZ2.js";
import "./chunk-NSR7OH4Q.js";
import "./chunk-ZCDXR5JO.js";
import "./chunk-47RN6QNY.js";
import "./chunk-IMHIZKPC.js";
import "./chunk-URNLJJFR.js";
import "./chunk-JHXWLAQ5.js";
import "./chunk-PWXBRFBA.js";
import "./chunk-MZAWSZWW.js";
import "./chunk-QIQU42WJ.js";
import "./chunk-XVBZSUZI.js";
import {
  ForwardRef$H
} from "./chunk-2NWCSGSS.js";
import {
  require_jsx_runtime
} from "./chunk-GAPF2DTI.js";
import {
  require_react
} from "./chunk-2ZN62OJX.js";
import {
  require_lib
} from "./chunk-IV5CMKTD.js";
import "./chunk-ENGB2K3X.js";
import "./chunk-ISIKDMAB.js";
import "./chunk-X5DDYWPV.js";
import "./chunk-TUHVKLNT.js";
import "./chunk-3POB64WN.js";
import "./chunk-63YMLYWU.js";
import "./chunk-YIY4KI6G.js";
import "./chunk-7CLWPW6Q.js";
import "./chunk-IVGYXB4P.js";
import "./chunk-H3WCXLKE.js";
import "./chunk-NDGNZ36Q.js";
import "./chunk-MNGCFISN.js";
import {
  __toESM
} from "./chunk-X6GFWOGJ.js";

// ../packages/core/upload/admin/src/pages/App/App.tsx
var React4 = __toESM(require_react());

// ../packages/core/upload/admin/src/pages/App/MediaLibrary/MediaLibrary.tsx
var React3 = __toESM(require_react());
var import_qs2 = __toESM(require_lib());

// ../packages/core/upload/admin/src/components/FolderCard/FolderCardCheckbox/FolderCardCheckbox.tsx
var import_jsx_runtime = __toESM(require_jsx_runtime());
var FolderCardCheckbox = (props) => {
  const { id } = useFolderCard();
  return (0, import_jsx_runtime.jsx)(Box, { position: "relative", zIndex: 2, children: (0, import_jsx_runtime.jsx)(CheckboxImpl, { "aria-labelledby": `${id}-title`, ...props }) });
};

// ../packages/core/upload/admin/src/pages/App/MediaLibrary/components/BulkDeleteButton.tsx
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var BulkDeleteButton = ({ selected, onSuccess }) => {
  const { formatMessage } = useIntl();
  const { remove } = useBulkRemove();
  const handleConfirmRemove = async () => {
    await remove(selected);
    onSuccess();
  };
  return (0, import_jsx_runtime2.jsxs)(Dialog.Root, { children: [
    (0, import_jsx_runtime2.jsx)(Dialog.Trigger, { children: (0, import_jsx_runtime2.jsx)(Button, { variant: "danger-light", size: "S", startIcon: (0, import_jsx_runtime2.jsx)(ForwardRef$n, {}), children: formatMessage({ id: "global.delete", defaultMessage: "Delete" }) }) }),
    (0, import_jsx_runtime2.jsx)(ConfirmDialog, { onConfirm: handleConfirmRemove })
  ] });
};

// ../packages/core/upload/admin/src/pages/App/MediaLibrary/components/BulkMoveButton.tsx
var React = __toESM(require_react());

// ../packages/core/upload/admin/src/components/BulkMoveDialog/BulkMoveDialog.tsx
var import_isEmpty = __toESM(require_isEmpty());

// ../packages/core/upload/admin/src/hooks/useBulkMove.ts
var useBulkMove = () => {
  const { formatMessage } = useIntl();
  const { toggleNotification } = useNotification();
  const queryClient = useQueryClient();
  const { post } = useFetchClient();
  const bulkMoveQuery = ({ destinationFolderId, filesAndFolders }) => {
    const payload = filesAndFolders.reduce((acc, selected) => {
      const { id, type } = selected;
      const key = type === "asset" ? "fileIds" : "folderIds";
      if (!acc[key]) {
        acc[key] = [];
      }
      acc[key].push(id);
      return acc;
    }, {});
    return post("/upload/actions/bulk-move", { ...payload, destinationFolderId });
  };
  const mutation = useMutation(bulkMoveQuery, {
    onSuccess(res) {
      var _a;
      const {
        data: { data }
      } = res;
      if (((_a = data == null ? void 0 : data.files) == null ? void 0 : _a.length) > 0) {
        queryClient.refetchQueries([pluginId, "assets"], { active: true });
        queryClient.refetchQueries([pluginId, "asset-count"], { active: true });
      }
      queryClient.refetchQueries([pluginId, "folders"], { active: true });
      toggleNotification({
        type: "success",
        message: formatMessage({
          id: getTrad("modal.move.success-label"),
          defaultMessage: "Elements have been moved successfully."
        })
      });
    }
  });
  const move = (destinationFolderId, filesAndFolders) => mutation.mutateAsync({ destinationFolderId, filesAndFolders });
  return { ...mutation, move };
};

// ../packages/core/upload/admin/src/components/BulkMoveDialog/BulkMoveDialog.tsx
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
var BulkMoveDialog = ({ onClose, selected = [], currentFolder }) => {
  const { formatMessage } = useIntl();
  const { data: folderStructure, isLoading } = useFolderStructure();
  const { move } = useBulkMove();
  if (!folderStructure) {
    return null;
  }
  const handleSubmit = async (values, { setErrors }) => {
    var _a;
    try {
      if (typeof values.destination !== "string") {
        const destinationValue = values.destination.value;
        await move(destinationValue, selected);
        onClose();
      }
    } catch (error) {
      const normalizedError = normalizeAPIError(error);
      if (normalizedError && "errors" in normalizedError) {
        const formikErrors = (_a = normalizedError.errors) == null ? void 0 : _a.reduce(
          (acc, error2) => {
            var _a2, _b;
            acc[((_b = (_a2 = error2.values) == null ? void 0 : _a2.path) == null ? void 0 : _b.length) || "destination"] = error2.defaultMessage;
            return acc;
          },
          {}
        );
        if (!(0, import_isEmpty.default)(formikErrors)) {
          setErrors(formikErrors);
        }
      }
    }
  };
  if (isLoading) {
    return (0, import_jsx_runtime3.jsx)(Modal.Content, { children: (0, import_jsx_runtime3.jsx)(Modal.Body, { children: (0, import_jsx_runtime3.jsx)(Flex, { justifyContent: "center", paddingTop: 4, paddingBottom: 4, children: (0, import_jsx_runtime3.jsx)(Loader, { children: formatMessage({
      id: getTrad("content.isLoading"),
      defaultMessage: "Content is loading."
    }) }) }) }) });
  }
  const initialFormData = {
    destination: {
      value: (currentFolder == null ? void 0 : currentFolder.id) || "",
      label: (currentFolder == null ? void 0 : currentFolder.name) || folderStructure[0].label
    }
  };
  return (0, import_jsx_runtime3.jsx)(Modal.Content, { children: (0, import_jsx_runtime3.jsx)(Formik, { validateOnChange: false, onSubmit: handleSubmit, initialValues: initialFormData, children: ({ values, errors, setFieldValue }) => (0, import_jsx_runtime3.jsxs)(Form, { noValidate: true, children: [
    (0, import_jsx_runtime3.jsx)(Modal.Header, { children: (0, import_jsx_runtime3.jsx)(Modal.Title, { children: formatMessage({
      id: getTrad("modal.folder.move.title"),
      defaultMessage: "Move elements to"
    }) }) }),
    (0, import_jsx_runtime3.jsx)(Modal.Body, { children: (0, import_jsx_runtime3.jsx)(Grid.Root, { gap: 4, children: (0, import_jsx_runtime3.jsx)(Grid.Item, { xs: 12, col: 12, direction: "column", alignItems: "stretch", children: (0, import_jsx_runtime3.jsxs)(Field.Root, { id: "folder-destination", children: [
      (0, import_jsx_runtime3.jsx)(Field.Label, { children: formatMessage({
        id: getTrad("form.input.label.folder-location"),
        defaultMessage: "Location"
      }) }),
      (0, import_jsx_runtime3.jsx)(
        SelectTree,
        {
          options: folderStructure,
          onChange: (value) => {
            setFieldValue("destination", value);
          },
          defaultValue: typeof values.destination !== "string" ? values.destination : void 0,
          name: "destination",
          menuPortalTarget: document.querySelector("body"),
          inputId: "folder-destination",
          error: errors == null ? void 0 : errors.destination,
          ariaErrorMessage: "destination-error"
        }
      ),
      errors.destination && (0, import_jsx_runtime3.jsx)(Typography, { variant: "pi", tag: "p", textColor: "danger600", children: errors.destination })
    ] }) }) }) }),
    (0, import_jsx_runtime3.jsxs)(Modal.Footer, { children: [
      (0, import_jsx_runtime3.jsx)(Modal.Close, { children: (0, import_jsx_runtime3.jsx)(Button, { variant: "tertiary", name: "cancel", children: formatMessage({ id: "cancel", defaultMessage: "Cancel" }) }) }),
      (0, import_jsx_runtime3.jsx)(Button, { type: "submit", loading: isLoading, children: formatMessage({ id: "modal.folder.move.submit", defaultMessage: "Move" }) })
    ] })
  ] }) }) });
};

// ../packages/core/upload/admin/src/pages/App/MediaLibrary/components/BulkMoveButton.tsx
var import_jsx_runtime4 = __toESM(require_jsx_runtime());
var BulkMoveButton = ({
  selected = [],
  onSuccess,
  currentFolder
}) => {
  const { formatMessage } = useIntl();
  const [showConfirmDialog, setShowConfirmDialog] = React.useState(false);
  const handleConfirmMove = () => {
    setShowConfirmDialog(false);
    onSuccess();
  };
  return (0, import_jsx_runtime4.jsxs)(Modal.Root, { open: showConfirmDialog, onOpenChange: setShowConfirmDialog, children: [
    (0, import_jsx_runtime4.jsx)(Modal.Trigger, { children: (0, import_jsx_runtime4.jsx)(Button, { variant: "secondary", size: "S", startIcon: (0, import_jsx_runtime4.jsx)(ForwardRef$3n, {}), children: formatMessage({ id: "global.move", defaultMessage: "Move" }) }) }),
    (0, import_jsx_runtime4.jsx)(
      BulkMoveDialog,
      {
        currentFolder,
        onClose: handleConfirmMove,
        selected
      }
    )
  ] });
};

// ../packages/core/upload/admin/src/pages/App/MediaLibrary/components/BulkActions.tsx
var import_jsx_runtime5 = __toESM(require_jsx_runtime());
var BulkActions = ({ selected = [], onSuccess, currentFolder }) => {
  const { formatMessage } = useIntl();
  const numberAssets = selected == null ? void 0 : selected.reduce(function(_this, val) {
    var _a;
    return (val == null ? void 0 : val.type) === "folder" && "files" in val && (val == null ? void 0 : val.files) && "count" in val.files ? _this + ((_a = val == null ? void 0 : val.files) == null ? void 0 : _a.count) : _this + 1;
  }, 0);
  return (0, import_jsx_runtime5.jsxs)(Flex, { gap: 2, paddingBottom: 5, children: [
    (0, import_jsx_runtime5.jsx)(Typography, { variant: "epsilon", textColor: "neutral600", children: formatMessage(
      {
        id: getTrad("list.assets.selected"),
        defaultMessage: "{numberFolders, plural, one {1 folder} other {# folders}} - {numberAssets, plural, one {1 asset} other {# assets}} selected"
      },
      {
        numberFolders: selected == null ? void 0 : selected.filter(({ type }) => type === "folder").length,
        numberAssets
      }
    ) }),
    (0, import_jsx_runtime5.jsx)(
      BulkDeleteButton,
      {
        selected,
        onSuccess
      }
    ),
    (0, import_jsx_runtime5.jsx)(
      BulkMoveButton,
      {
        currentFolder,
        selected,
        onSuccess
      }
    )
  ] });
};

// ../packages/core/upload/admin/src/pages/App/MediaLibrary/components/EmptyOrNoPermissions.tsx
var import_jsx_runtime6 = __toESM(require_jsx_runtime());
var getContentIntlMessage = ({
  isFiltering,
  canCreate,
  canRead
}) => {
  if (isFiltering) {
    return {
      id: "list.assets-empty.title-withSearch",
      defaultMessage: "There are no elements with the applied filters"
    };
  }
  if (canRead) {
    if (canCreate) {
      return {
        id: "list.assets.empty-upload",
        defaultMessage: "Upload your first assets..."
      };
    }
    return {
      id: "list.assets.empty",
      defaultMessage: "Media Library is empty"
    };
  }
  return {
    id: "header.actions.no-permissions",
    defaultMessage: "No permissions to view"
  };
};
var EmptyOrNoPermissions = ({
  canCreate,
  isFiltering,
  canRead,
  onActionClick
}) => {
  const { formatMessage } = useIntl();
  const content = getContentIntlMessage({ isFiltering, canCreate, canRead });
  return (0, import_jsx_runtime6.jsx)(
    EmptyAssets,
    {
      icon: !canRead ? ForwardRef$H : void 0,
      action: canCreate && !isFiltering && (0, import_jsx_runtime6.jsx)(Button, { variant: "secondary", startIcon: (0, import_jsx_runtime6.jsx)(ForwardRef$1l, {}), onClick: onActionClick, children: formatMessage({
        id: getTrad("header.actions.add-assets"),
        defaultMessage: "Add new assets"
      }) }),
      content: formatMessage({
        ...content,
        id: getTrad(content.id)
      })
    }
  );
};

// ../packages/core/upload/admin/src/pages/App/MediaLibrary/components/Filters.tsx
var React2 = __toESM(require_react());
var import_jsx_runtime7 = __toESM(require_jsx_runtime());
var Filters = () => {
  var _a;
  const [open, setOpen] = React2.useState(false);
  const { formatMessage } = useIntl();
  const { trackUsage } = useTracking();
  const [{ query }, setQuery] = useQueryParams();
  const filters = ((_a = query == null ? void 0 : query.filters) == null ? void 0 : _a.$and) || [];
  const handleRemoveFilter = (nextFilters) => {
    setQuery({ filters: { $and: nextFilters }, page: 1 });
  };
  const handleSubmit = (filters2) => {
    trackUsage("didFilterMediaLibraryElements", {
      location: "content-manager",
      filter: Object.keys(filters2[filters2.length - 1])[0]
    });
    setQuery({ filters: { $and: filters2 }, page: 1 });
  };
  return (0, import_jsx_runtime7.jsxs)(Popover.Root, { open, onOpenChange: setOpen, children: [
    (0, import_jsx_runtime7.jsx)(Popover.Trigger, { children: (0, import_jsx_runtime7.jsx)(Button, { variant: "tertiary", startIcon: (0, import_jsx_runtime7.jsx)(ForwardRef$3p, {}), size: "S", children: formatMessage({ id: "app.utils.filters", defaultMessage: "Filters" }) }) }),
    (0, import_jsx_runtime7.jsx)(
      FilterPopover,
      {
        displayedFilters,
        filters,
        onSubmit: handleSubmit,
        onToggle: setOpen
      }
    ),
    (0, import_jsx_runtime7.jsx)(
      FilterList,
      {
        appliedFilters: filters,
        filtersSchema: displayedFilters,
        onRemoveFilter: handleRemoveFilter
      }
    )
  ] });
};

// ../packages/core/upload/admin/src/pages/App/MediaLibrary/components/Header.tsx
var import_qs = __toESM(require_lib());
var import_jsx_runtime8 = __toESM(require_jsx_runtime());
var Header = ({
  breadcrumbs = null,
  canCreate,
  folder = null,
  onToggleEditFolderDialog,
  onToggleUploadAssetDialog
}) => {
  const { formatMessage } = useIntl();
  const { pathname } = useLocation();
  const [{ query }] = useQueryParams();
  const backQuery = {
    ...query,
    folder: (folder == null ? void 0 : folder.parent) && typeof folder.parent !== "number" && folder.parent.id ? folder.parent.id : void 0,
    folderPath: (folder == null ? void 0 : folder.parent) && typeof folder.parent !== "number" && folder.parent.path ? folder.parent.path : void 0
  };
  return (0, import_jsx_runtime8.jsx)(
    Layouts.Header,
    {
      title: formatMessage({
        id: getTrad("plugin.name"),
        defaultMessage: `Media Library`
      }),
      subtitle: breadcrumbs && typeof breadcrumbs !== "boolean" && folder && (0, import_jsx_runtime8.jsx)(
        Breadcrumbs,
        {
          label: formatMessage({
            id: getTrad("header.breadcrumbs.nav.label"),
            defaultMessage: "Folders navigation"
          }),
          breadcrumbs,
          currentFolderId: folder == null ? void 0 : folder.id
        }
      ),
      navigationAction: folder && (0, import_jsx_runtime8.jsx)(
        Link,
        {
          tag: NavLink,
          startIcon: (0, import_jsx_runtime8.jsx)(ForwardRef$5r, {}),
          to: `${pathname}?${(0, import_qs.stringify)(backQuery, { encode: false })}`,
          children: formatMessage({
            id: getTrad("header.actions.folder-level-up"),
            defaultMessage: "Back"
          })
        }
      ),
      primaryAction: canCreate && (0, import_jsx_runtime8.jsxs)(Flex, { gap: 2, children: [
        (0, import_jsx_runtime8.jsx)(Button, { startIcon: (0, import_jsx_runtime8.jsx)(ForwardRef$1l, {}), variant: "secondary", onClick: onToggleEditFolderDialog, children: formatMessage({
          id: getTrad("header.actions.add-folder"),
          defaultMessage: "Add new folder"
        }) }),
        (0, import_jsx_runtime8.jsx)(Button, { startIcon: (0, import_jsx_runtime8.jsx)(ForwardRef$1l, {}), onClick: onToggleUploadAssetDialog, children: formatMessage({
          id: getTrad("header.actions.add-assets"),
          defaultMessage: "Add new assets"
        }) })
      ] })
    }
  );
};

// ../packages/core/upload/admin/src/pages/App/MediaLibrary/MediaLibrary.tsx
var import_jsx_runtime9 = __toESM(require_jsx_runtime());
var BoxWithHeight = dt(Box)`
  height: 3.2rem;
  display: flex;
  align-items: center;
`;
var TypographyMaxWidth = dt(Typography)`
  max-width: 100%;
`;
var ActionContainer = dt(Box)`
  svg {
    path {
      fill: ${({ theme }) => theme.colors.neutral500};
    }
  }
`;
var MediaLibrary = () => {
  var _a, _b, _c, _d;
  const navigate = useNavigate();
  const {
    canRead,
    canCreate,
    canUpdate,
    canCopyLink,
    canDownload,
    canConfigureView,
    isLoading: permissionsLoading
  } = useMediaLibraryPermissions();
  const currentFolderToEditRef = React3.useRef();
  const { formatMessage } = useIntl();
  const { pathname } = useLocation();
  const { trackUsage } = useTracking();
  const [{ query }, setQuery] = useQueryParams();
  const isFiltering = Boolean(query._q || query.filters);
  const [view, setView] = usePersistentState(localStorageKeys.view, viewOptions.GRID);
  const isGridView = view === viewOptions.GRID;
  const {
    data: assetsData,
    isLoading: assetsLoading,
    error: assetsError
  } = useAssets({
    skipWhen: !canRead,
    query
  });
  const {
    data: foldersData,
    isLoading: foldersLoading,
    error: foldersError
  } = useFolders({
    enabled: canRead && ((_a = assetsData == null ? void 0 : assetsData.pagination) == null ? void 0 : _a.page) === 1 && !containsAssetFilter(query),
    query
  });
  const {
    data: currentFolder,
    isLoading: isCurrentFolderLoading,
    error: currentFolderError
  } = useFolder(query == null ? void 0 : query.folder, {
    enabled: canRead && !!(query == null ? void 0 : query.folder)
  });
  if ((currentFolderError == null ? void 0 : currentFolderError.name) === "NotFoundError") {
    navigate(pathname);
  }
  const folders = (foldersData == null ? void 0 : foldersData.map((folder) => ({
    ...folder,
    type: "folder",
    folderURL: getFolderURL(pathname, query, {
      folder: folder.id.toString(),
      folderPath: folder.path
    }),
    isSelectable: canUpdate
  }))) ?? [];
  const folderCount = (folders == null ? void 0 : folders.length) || 0;
  const assets = ((_b = assetsData == null ? void 0 : assetsData.results) == null ? void 0 : _b.map((asset) => ({ ...asset, type: "asset", isSelectable: canUpdate }))) || [];
  const assetCount = (assets == null ? void 0 : assets.length) ?? 0;
  const totalAssetCount = (_c = assetsData == null ? void 0 : assetsData.pagination) == null ? void 0 : _c.total;
  const isLoading = isCurrentFolderLoading || foldersLoading || permissionsLoading || assetsLoading;
  const [showUploadAssetDialog, setShowUploadAssetDialog] = React3.useState(false);
  const [showEditFolderDialog, setShowEditFolderDialog] = React3.useState(false);
  const [assetToEdit, setAssetToEdit] = React3.useState(void 0);
  const [folderToEdit, setFolderToEdit] = React3.useState(void 0);
  const [selected, { selectOne, selectAll }] = useSelectionState(
    ["type", "id"],
    []
  );
  const indeterminateBulkSelect = (selected == null ? void 0 : selected.length) > 0 && (selected == null ? void 0 : selected.length) !== assetCount + folderCount;
  const toggleUploadAssetDialog = () => setShowUploadAssetDialog((prev) => !prev);
  const toggleEditFolderDialog = ({ created = false } = {}) => {
    if (created && (query == null ? void 0 : query.page) !== "1") {
      setQuery({
        ...query,
        page: 1
      });
    }
    setShowEditFolderDialog((prev) => !prev);
  };
  const handleBulkSelect = (checked, elements) => {
    if (checked) {
      trackUsage("didSelectAllMediaLibraryElements");
    }
    selectAll(elements);
  };
  const handleChangeSort = (value) => {
    trackUsage("didSortMediaLibraryElements", {
      location: "upload",
      sort: value
    });
    setQuery({ sort: value });
  };
  const handleEditFolder = (folder) => {
    setFolderToEdit(folder);
    setShowEditFolderDialog(true);
  };
  const handleEditFolderClose = (payload) => {
    setFolderToEdit(null);
    toggleEditFolderDialog(payload);
    if (currentFolderToEditRef.current) {
      currentFolderToEditRef.current.focus();
    }
  };
  const handleAssetDeleted = (numberOfAssets) => {
    var _a2, _b2, _c2;
    if (numberOfAssets === assetCount && ((_a2 = assetsData == null ? void 0 : assetsData.pagination) == null ? void 0 : _a2.page) === ((_b2 = assetsData == null ? void 0 : assetsData.pagination) == null ? void 0 : _b2.pageCount) && ((_c2 = assetsData == null ? void 0 : assetsData.pagination) == null ? void 0 : _c2.page) && assetsData.pagination.page > 1) {
      setQuery({
        ...query,
        page: assetsData.pagination.page - 1
      });
    }
  };
  const handleBulkActionSuccess = () => {
    selectAll();
    handleAssetDeleted(selected.length);
  };
  if (isLoading) {
    return (0, import_jsx_runtime9.jsx)(Page.Loading, {});
  }
  if (assetsError || foldersError) {
    return (0, import_jsx_runtime9.jsx)(Page.Error, {});
  }
  return (0, import_jsx_runtime9.jsxs)(Layouts.Root, { children: [
    (0, import_jsx_runtime9.jsxs)(Page.Main, { children: [
      (0, import_jsx_runtime9.jsx)(
        Header,
        {
          breadcrumbs: !isCurrentFolderLoading ? getBreadcrumbDataML(currentFolder, {
            pathname,
            query
          }) : null,
          canCreate,
          onToggleEditFolderDialog: toggleEditFolderDialog,
          onToggleUploadAssetDialog: toggleUploadAssetDialog,
          folder: currentFolder
        }
      ),
      (0, import_jsx_runtime9.jsx)(
        Layouts.Action,
        {
          startActions: (0, import_jsx_runtime9.jsxs)(import_jsx_runtime9.Fragment, { children: [
            canUpdate && isGridView && (assetCount > 0 || folderCount > 0) && (0, import_jsx_runtime9.jsx)(
              BoxWithHeight,
              {
                paddingLeft: 2,
                paddingRight: 2,
                background: "neutral0",
                hasRadius: true,
                borderColor: "neutral200",
                children: (0, import_jsx_runtime9.jsx)(
                  CheckboxImpl,
                  {
                    "aria-label": formatMessage({
                      id: getTrad("bulk.select.label"),
                      defaultMessage: "Select all folders & assets"
                    }),
                    checked: indeterminateBulkSelect ? "indeterminate" : (assetCount > 0 || folderCount > 0) && selected.length === assetCount + folderCount,
                    onCheckedChange: (e) => handleBulkSelect(e, [...assets, ...folders])
                  }
                )
              }
            ),
            canRead && isGridView && (0, import_jsx_runtime9.jsx)(SortPicker, { value: query == null ? void 0 : query.sort, onChangeSort: handleChangeSort }),
            canRead && (0, import_jsx_runtime9.jsx)(Filters, {})
          ] }),
          endActions: (0, import_jsx_runtime9.jsxs)(import_jsx_runtime9.Fragment, { children: [
            canConfigureView ? (0, import_jsx_runtime9.jsx)(ActionContainer, { paddingTop: 1, paddingBottom: 1, children: (0, import_jsx_runtime9.jsx)(
              IconButton,
              {
                tag: Link2,
                to: {
                  pathname: `${pathname}/configuration`,
                  search: (0, import_qs2.stringify)(query, { encode: false })
                },
                label: formatMessage({
                  id: "app.links.configure-view",
                  defaultMessage: "Configure the view"
                }),
                children: (0, import_jsx_runtime9.jsx)(ForwardRef$4l, {})
              }
            ) }) : null,
            (0, import_jsx_runtime9.jsx)(ActionContainer, { paddingTop: 1, paddingBottom: 1, children: (0, import_jsx_runtime9.jsx)(
              IconButton,
              {
                label: isGridView ? formatMessage({
                  id: getTrad("view-switch.list"),
                  defaultMessage: "List View"
                }) : formatMessage({
                  id: getTrad("view-switch.grid"),
                  defaultMessage: "Grid View"
                }),
                onClick: () => setView(isGridView ? viewOptions.LIST : viewOptions.GRID),
                children: isGridView ? (0, import_jsx_runtime9.jsx)(ForwardRef$2t, {}) : (0, import_jsx_runtime9.jsx)(ForwardRef$3d, {})
              }
            ) }),
            (0, import_jsx_runtime9.jsx)(
              SearchInput,
              {
                label: formatMessage({
                  id: getTrad("search.label"),
                  defaultMessage: "Search for an asset"
                }),
                trackedEvent: "didSearchMediaLibraryElements",
                trackedEventDetails: { location: "upload" }
              }
            )
          ] })
        }
      ),
      (0, import_jsx_runtime9.jsxs)(Layouts.Content, { children: [
        selected.length > 0 && (0, import_jsx_runtime9.jsx)(
          BulkActions,
          {
            currentFolder,
            selected,
            onSuccess: handleBulkActionSuccess
          }
        ),
        folderCount === 0 && assetCount === 0 && (0, import_jsx_runtime9.jsx)(
          EmptyOrNoPermissions,
          {
            canCreate,
            canRead,
            isFiltering,
            onActionClick: toggleUploadAssetDialog
          }
        ),
        canRead && !isGridView && (assetCount > 0 || folderCount > 0) && (0, import_jsx_runtime9.jsx)(
          TableList,
          {
            assetCount,
            folderCount,
            indeterminate: indeterminateBulkSelect,
            onChangeSort: handleChangeSort,
            onChangeFolder: (folderID, folderPath) => navigate(getFolderURL(pathname, query, { folder: folderID.toString(), folderPath })),
            onEditAsset: setAssetToEdit,
            onEditFolder: handleEditFolder,
            onSelectOne: selectOne,
            onSelectAll: handleBulkSelect,
            rows: [...folders, ...assets],
            selected,
            shouldDisableBulkSelect: !canUpdate,
            sortQuery: (query == null ? void 0 : query.sort) ?? ""
          }
        ),
        canRead && isGridView && (0, import_jsx_runtime9.jsxs)(import_jsx_runtime9.Fragment, { children: [
          folderCount > 0 && (0, import_jsx_runtime9.jsx)(
            FolderGridList,
            {
              title: (
                // Folders title should only appear if:
                // user is filtering and there are assets to display, to divide both type of elements
                // user is not filtering
                (isFiltering && assetCount > 0 || !isFiltering) && formatMessage(
                  {
                    id: getTrad("list.folders.title"),
                    defaultMessage: "Folders ({count})"
                  },
                  { count: folderCount }
                ) || ""
              ),
              children: folders.map((folder) => {
                var _a2, _b2;
                const selectedFolders = selected.filter(({ type }) => type === "folder");
                const isSelected = !!selectedFolders.find(
                  (currentFolder2) => currentFolder2.id === folder.id
                );
                const url = getFolderURL(pathname, query, {
                  folder: folder == null ? void 0 : folder.id.toString(),
                  folderPath: folder == null ? void 0 : folder.path
                });
                return (0, import_jsx_runtime9.jsx)(
                  Grid.Item,
                  {
                    col: 3,
                    direction: "column",
                    alignItems: "stretch",
                    children: (0, import_jsx_runtime9.jsx)(
                      FolderCard,
                      {
                        ref: folderToEdit && folder.id === folderToEdit.id ? currentFolderToEditRef : void 0,
                        ariaLabel: folder.name,
                        id: `folder-${folder.id}`,
                        to: url,
                        startAction: folder.isSelectable ? (0, import_jsx_runtime9.jsx)(
                          FolderCardCheckbox,
                          {
                            "data-testid": `folder-checkbox-${folder.id}`,
                            checked: isSelected,
                            onCheckedChange: () => selectOne(folder)
                          }
                        ) : null,
                        cardActions: (0, import_jsx_runtime9.jsx)(
                          IconButton,
                          {
                            label: formatMessage({
                              id: getTrad("list.folder.edit"),
                              defaultMessage: "Edit folder"
                            }),
                            onClick: () => handleEditFolder(folder),
                            children: (0, import_jsx_runtime9.jsx)(ForwardRef$1z, {})
                          }
                        ),
                        children: (0, import_jsx_runtime9.jsx)(FolderCardBody, { children: (0, import_jsx_runtime9.jsx)(FolderCardBodyAction, { to: url, children: (0, import_jsx_runtime9.jsxs)(Flex, { tag: "h2", direction: "column", alignItems: "start", maxWidth: "100%", children: [
                          (0, import_jsx_runtime9.jsxs)(
                            TypographyMaxWidth,
                            {
                              fontWeight: "semiBold",
                              textColor: "neutral800",
                              ellipsis: true,
                              children: [
                                folder.name,
                                (0, import_jsx_runtime9.jsx)(VisuallyHidden, { children: ":" })
                              ]
                            }
                          ),
                          (0, import_jsx_runtime9.jsx)(
                            TypographyMaxWidth,
                            {
                              tag: "span",
                              textColor: "neutral600",
                              variant: "pi",
                              ellipsis: true,
                              children: formatMessage(
                                {
                                  id: getTrad("list.folder.subtitle"),
                                  defaultMessage: "{folderCount, plural, =0 {# folder} one {# folder} other {# folders}}, {filesCount, plural, =0 {# asset} one {# asset} other {# assets}}"
                                },
                                {
                                  folderCount: (_a2 = folder.children) == null ? void 0 : _a2.count,
                                  filesCount: (_b2 = folder.files) == null ? void 0 : _b2.count
                                }
                              )
                            }
                          )
                        ] }) }) })
                      }
                    )
                  },
                  `folder-${folder.id}`
                );
              })
            }
          ),
          assetCount > 0 && folderCount > 0 && (0, import_jsx_runtime9.jsx)(Box, { paddingTop: 6, paddingBottom: 4, children: (0, import_jsx_runtime9.jsx)(Divider, {}) }),
          assetCount > 0 && (0, import_jsx_runtime9.jsx)(
            AssetGridList,
            {
              assets,
              onEditAsset: setAssetToEdit,
              onSelectAsset: selectOne,
              selectedAssets: selected.filter(
                ({ type }) => type === "asset"
              ),
              title: (
                // Assets title should only appear if:
                // - user is not filtering
                // - user is filtering and there are folders to display, to separate them
                // - user is on page 1 since folders won't appear on any other page than the first one (no need to visually separate them)
                (!isFiltering || isFiltering && folderCount > 0) && ((_d = assetsData == null ? void 0 : assetsData.pagination) == null ? void 0 : _d.page) === 1 && formatMessage(
                  {
                    id: getTrad("list.assets.title"),
                    defaultMessage: "Assets ({count})"
                  },
                  { count: totalAssetCount }
                ) || ""
              )
            }
          )
        ] }),
        (0, import_jsx_runtime9.jsxs)(Pagination.Root, { ...assetsData == null ? void 0 : assetsData.pagination, children: [
          (0, import_jsx_runtime9.jsx)(Pagination.PageSize, {}),
          (0, import_jsx_runtime9.jsx)(Pagination.Links, {})
        ] })
      ] })
    ] }),
    showUploadAssetDialog && (0, import_jsx_runtime9.jsx)(
      UploadAssetDialog,
      {
        open: showUploadAssetDialog,
        onClose: toggleUploadAssetDialog,
        trackedLocation: "upload",
        folderId: query == null ? void 0 : query.folder
      }
    ),
    showEditFolderDialog && (0, import_jsx_runtime9.jsx)(
      EditFolderDialog,
      {
        open: showEditFolderDialog,
        onClose: () => handleEditFolderClose(),
        folder: folderToEdit,
        parentFolderId: query == null ? void 0 : query.folder,
        location: "upload"
      }
    ),
    assetToEdit && (0, import_jsx_runtime9.jsx)(
      EditAssetDialog,
      {
        onClose: (editedAsset) => {
          if (editedAsset === null) {
            handleAssetDeleted(1);
          }
          setAssetToEdit(void 0);
        },
        open: !!assetToEdit,
        asset: assetToEdit,
        canUpdate,
        canCopyLink,
        canDownload,
        trackedLocation: "upload"
      }
    )
  ] });
};

// ../packages/core/upload/admin/src/pages/App/App.tsx
var import_jsx_runtime10 = __toESM(require_jsx_runtime());
var ConfigureTheView = React4.lazy(
  async () => import("./ConfigureTheView-RFBFD3PI.js").then((mod) => ({ default: mod.ConfigureTheView }))
);
var Upload = () => {
  const {
    config: { isLoading, isError, data: config }
  } = useConfig();
  const [{ rawQuery }, setQuery] = useQueryParams();
  const { formatMessage } = useIntl();
  const title = formatMessage({ id: getTrad("plugin.name"), defaultMessage: "Media Library" });
  React4.useEffect(() => {
    if (isLoading || isError || rawQuery) {
      return;
    }
    setQuery({
      sort: config.sort,
      page: 1,
      pageSize: config.pageSize
    });
  }, [isLoading, isError, config, rawQuery, setQuery]);
  if (isLoading) {
    return (0, import_jsx_runtime10.jsx)(Page.Loading, {});
  }
  return (0, import_jsx_runtime10.jsxs)(Page.Main, { children: [
    (0, import_jsx_runtime10.jsx)(Page.Title, { children: title }),
    rawQuery ? (0, import_jsx_runtime10.jsx)(React4.Suspense, { fallback: (0, import_jsx_runtime10.jsx)(Page.Loading, {}), children: (0, import_jsx_runtime10.jsxs)(Routes, { children: [
      (0, import_jsx_runtime10.jsx)(Route, { index: true, element: (0, import_jsx_runtime10.jsx)(MediaLibrary, {}) }),
      (0, import_jsx_runtime10.jsx)(
        Route,
        {
          path: "configuration",
          element: (0, import_jsx_runtime10.jsx)(ConfigureTheView, { config })
        }
      )
    ] }) }) : null
  ] });
};
export {
  Upload
};
//# sourceMappingURL=App-OQLXNOY2.js.map
