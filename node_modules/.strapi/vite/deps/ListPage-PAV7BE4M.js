import {
  getDisplayName
} from "./chunk-XRZ2NRBI.js";
import {
  Filters
} from "./chunk-Y6F2Z2AQ.js";
import {
  Pagination
} from "./chunk-HSX2BZF6.js";
import {
  Table
} from "./chunk-L5ESVDCC.js";
import "./chunk-5TWNRMNB.js";
import {
  useField
} from "./chunk-ZRXSF5PI.js";
import {
  useRBAC
} from "./chunk-PJGZMO5F.js";
import {
  parseISO
} from "./chunk-JTVP57KZ.js";
import "./chunk-BR5DWYPY.js";
import {
  useAdminUsers
} from "./chunk-LVVND4TK.js";
import {
  Layouts
} from "./chunk-O6JJIRK6.js";
import "./chunk-54PZNGL6.js";
import {
  Page,
  useAPIErrorHandler
} from "./chunk-OUTHPJ5W.js";
import {
  useQueryParams
} from "./chunk-YQN4TQZU.js";
import {
  useTypedSelector
} from "./chunk-ITUTZMO4.js";
import {
  useNotification
} from "./chunk-S4GSJQUH.js";
import {
  adminApi
} from "./chunk-3CYOA7RQ.js";
import "./chunk-3Y3HZKRY.js";
import "./chunk-PR5W4YOM.js";
import "./chunk-QOSJGLB6.js";
import "./chunk-XNLL4XTY.js";
import "./chunk-VJHHRLHY.js";
import "./chunk-HWWDZF4D.js";
import "./chunk-Z7WXACEM.js";
import "./chunk-PZKJYQOP.js";
import "./chunk-KTCYCI5X.js";
import "./chunk-4S6CO3NF.js";
import "./chunk-WZMMABOO.js";
import "./chunk-KU6R7J3L.js";
import "./chunk-ALOZZQWE.js";
import "./chunk-3XH2Q2B6.js";
import "./chunk-SM5ZDAVK.js";
import "./chunk-AAOWBC4P.js";
import "./chunk-AVUVASSG.js";
import "./chunk-DEZRKVMG.js";
import "./chunk-LDTLLP4K.js";
import "./chunk-CFOYKXNH.js";
import "./chunk-DWNGFC4T.js";
import "./chunk-SKI2TI5D.js";
import "./chunk-3KMG3VFU.js";
import "./chunk-UTVXCYRG.js";
import {
  Box,
  Breadcrumbs,
  Combobox,
  Crumb,
  Field,
  Flex,
  Grid,
  IconButton,
  JSONInput,
  Loader,
  Modal,
  Option,
  Typography
} from "./chunk-3AUSDG4O.js";
import {
  ForwardRef$3L
} from "./chunk-F5I3ZVMF.js";
import {
  dt
} from "./chunk-FJZ2NJT6.js";
import "./chunk-VH7UJDNP.js";
import "./chunk-HG4QJCZT.js";
import "./chunk-I7DIJEXN.js";
import {
  useIntl
} from "./chunk-2BDXRWHF.js";
import "./chunk-SBRVGDJ6.js";
import "./chunk-YUZK7WZ2.js";
import "./chunk-NSR7OH4Q.js";
import "./chunk-ZCDXR5JO.js";
import "./chunk-47RN6QNY.js";
import "./chunk-IMHIZKPC.js";
import "./chunk-URNLJJFR.js";
import "./chunk-JHXWLAQ5.js";
import "./chunk-PWXBRFBA.js";
import "./chunk-MZAWSZWW.js";
import "./chunk-QIQU42WJ.js";
import "./chunk-XVBZSUZI.js";
import "./chunk-2NWCSGSS.js";
import {
  require_jsx_runtime
} from "./chunk-GAPF2DTI.js";
import {
  require_react
} from "./chunk-2ZN62OJX.js";
import "./chunk-IV5CMKTD.js";
import "./chunk-ENGB2K3X.js";
import "./chunk-ISIKDMAB.js";
import "./chunk-X5DDYWPV.js";
import "./chunk-TUHVKLNT.js";
import "./chunk-3POB64WN.js";
import "./chunk-63YMLYWU.js";
import "./chunk-YIY4KI6G.js";
import "./chunk-7CLWPW6Q.js";
import "./chunk-IVGYXB4P.js";
import "./chunk-H3WCXLKE.js";
import "./chunk-NDGNZ36Q.js";
import "./chunk-MNGCFISN.js";
import {
  __toESM
} from "./chunk-X6GFWOGJ.js";

// ../packages/core/admin/ee/admin/src/pages/SettingsPage/pages/AuditLogs/components/Modal.tsx
var React = __toESM(require_react());

// ../packages/core/admin/ee/admin/src/services/auditLogs.ts
var auditLogsService = adminApi.injectEndpoints({
  endpoints: (builder) => ({
    getAuditLogs: builder.query({
      query: (params) => ({
        url: `/admin/audit-logs`,
        config: {
          params
        }
      })
    }),
    getAuditLog: builder.query({
      query: (id) => `/admin/audit-logs/${id}`
    })
  }),
  overrideExisting: false
});
var { useGetAuditLogsQuery, useGetAuditLogQuery } = auditLogsService;

// ../packages/core/admin/ee/admin/src/pages/SettingsPage/pages/AuditLogs/hooks/useFormatTimeStamp.ts
var useFormatTimeStamp = () => {
  const { formatDate } = useIntl();
  const formatTimeStamp = (value) => {
    const date = parseISO(value);
    const formattedDate = formatDate(date, {
      dateStyle: "long"
    });
    const formattedTime = formatDate(date, {
      timeStyle: "medium",
      hourCycle: "h24"
    });
    return `${formattedDate}, ${formattedTime}`;
  };
  return formatTimeStamp;
};

// ../packages/core/admin/ee/admin/src/pages/SettingsPage/pages/AuditLogs/utils/getActionTypesDefaultMessages.ts
var actionTypes = {
  "entry.create": "Create entry{model, select, undefined {} other { ({model})}}",
  "entry.update": "Update entry{model, select, undefined {} other { ({model})}}",
  "entry.delete": "Delete entry{model, select, undefined {} other { ({model})}}",
  "entry.publish": "Publish entry{model, select, undefined {} other { ({model})}}",
  "entry.unpublish": "Unpublish entry{model, select, undefined {} other { ({model})}}",
  "media.create": "Create media",
  "media.update": "Update media",
  "media.delete": "Delete media",
  "media-folder.create": "Create media folder",
  "media-folder.update": "Update media folder",
  "media-folder.delete": "Delete media folder",
  "user.create": "Create user",
  "user.update": "Update user",
  "user.delete": "Delete user",
  "admin.auth.success": "Admin login",
  "admin.logout": "Admin logout",
  "content-type.create": "Create content type",
  "content-type.update": "Update content type",
  "content-type.delete": "Delete content type",
  "component.create": "Create component",
  "component.update": "Update component",
  "component.delete": "Delete component",
  "role.create": "Create role",
  "role.update": "Update role",
  "role.delete": "Delete role",
  "permission.create": "Create permission",
  "permission.update": "Update permission",
  "permission.delete": "Delete permission"
};
var getDefaultMessage = (value) => {
  return actionTypes[value] || value;
};

// ../packages/core/admin/ee/admin/src/pages/SettingsPage/pages/AuditLogs/components/Modal.tsx
var import_jsx_runtime = __toESM(require_jsx_runtime());
var Modal2 = ({ handleClose, logId }) => {
  const { toggleNotification } = useNotification();
  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();
  const { data, error, isLoading } = useGetAuditLogQuery(logId);
  React.useEffect(() => {
    if (error) {
      toggleNotification({
        type: "danger",
        message: formatAPIError(error)
      });
      handleClose();
    }
  }, [error, formatAPIError, handleClose, toggleNotification]);
  const formatTimeStamp = useFormatTimeStamp();
  const formattedDate = data && "date" in data ? formatTimeStamp(data.date) : "";
  return (0, import_jsx_runtime.jsx)(Modal.Root, { defaultOpen: true, onOpenChange: handleClose, children: (0, import_jsx_runtime.jsxs)(Modal.Content, { children: [
    (0, import_jsx_runtime.jsx)(Modal.Header, { children: (0, import_jsx_runtime.jsx)(Breadcrumbs, { label: formattedDate, id: "title", children: (0, import_jsx_runtime.jsx)(Crumb, { isCurrent: true, children: formattedDate }) }) }),
    (0, import_jsx_runtime.jsx)(Modal.Body, { children: (0, import_jsx_runtime.jsx)(ActionBody, { isLoading, data, formattedDate }) })
  ] }) });
};
var ActionBody = ({ isLoading, data, formattedDate }) => {
  const { formatMessage } = useIntl();
  if (isLoading) {
    return (0, import_jsx_runtime.jsx)(Flex, { padding: 7, justifyContent: "center", alignItems: "center", children: (0, import_jsx_runtime.jsx)(Loader, { children: "Loading content..." }) });
  }
  const { action, user, payload } = data;
  return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
    (0, import_jsx_runtime.jsx)(Box, { marginBottom: 3, children: (0, import_jsx_runtime.jsx)(Typography, { variant: "delta", id: "title", children: formatMessage({
      id: "Settings.permissions.auditLogs.details",
      defaultMessage: "Log Details"
    }) }) }),
    (0, import_jsx_runtime.jsxs)(
      Grid.Root,
      {
        gap: 4,
        gridCols: 2,
        paddingTop: 4,
        paddingBottom: 4,
        paddingLeft: 6,
        paddingRight: 6,
        marginBottom: 4,
        background: "neutral100",
        hasRadius: true,
        children: [
          (0, import_jsx_runtime.jsx)(
            ActionItem,
            {
              actionLabel: formatMessage({
                id: "Settings.permissions.auditLogs.action",
                defaultMessage: "Action"
              }),
              actionName: formatMessage(
                {
                  id: `Settings.permissions.auditLogs.${action}`,
                  defaultMessage: getDefaultMessage(action)
                },
                // @ts-expect-error - any
                { model: payload == null ? void 0 : payload.model }
              )
            }
          ),
          (0, import_jsx_runtime.jsx)(
            ActionItem,
            {
              actionLabel: formatMessage({
                id: "Settings.permissions.auditLogs.date",
                defaultMessage: "Date"
              }),
              actionName: formattedDate
            }
          ),
          (0, import_jsx_runtime.jsx)(
            ActionItem,
            {
              actionLabel: formatMessage({
                id: "Settings.permissions.auditLogs.user",
                defaultMessage: "User"
              }),
              actionName: (user == null ? void 0 : user.displayName) || "-"
            }
          ),
          (0, import_jsx_runtime.jsx)(
            ActionItem,
            {
              actionLabel: formatMessage({
                id: "Settings.permissions.auditLogs.userId",
                defaultMessage: "User ID"
              }),
              actionName: (user == null ? void 0 : user.id.toString()) || "-"
            }
          )
        ]
      }
    ),
    (0, import_jsx_runtime.jsxs)(Field.Root, { children: [
      (0, import_jsx_runtime.jsx)(Field.Label, { children: formatMessage({
        id: "Settings.permissions.auditLogs.payload",
        defaultMessage: "Payload"
      }) }),
      (0, import_jsx_runtime.jsx)(Payload, { value: JSON.stringify(payload, null, 2), disabled: true })
    ] })
  ] });
};
var Payload = dt(JSONInput)`
  max-width: 100%;
  overflow: scroll;
`;
var ActionItem = ({ actionLabel, actionName }) => {
  return (0, import_jsx_runtime.jsxs)(Flex, { direction: "column", alignItems: "baseline", gap: 1, children: [
    (0, import_jsx_runtime.jsx)(Typography, { textColor: "neutral600", variant: "sigma", children: actionLabel }),
    (0, import_jsx_runtime.jsx)(Typography, { textColor: "neutral600", children: actionName })
  ] });
};

// ../packages/core/admin/ee/admin/src/pages/SettingsPage/pages/AuditLogs/hooks/useAuditLogsData.ts
var React2 = __toESM(require_react());
var useAuditLogsData = ({
  canReadAuditLogs,
  canReadUsers
}) => {
  const { toggleNotification } = useNotification();
  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();
  const [{ query }] = useQueryParams();
  const {
    data,
    error,
    isError: isUsersError,
    isLoading: isLoadingUsers
  } = useAdminUsers(
    {},
    {
      skip: !canReadUsers,
      refetchOnMountOrArgChange: true
    }
  );
  React2.useEffect(() => {
    if (error) {
      toggleNotification({ type: "danger", message: formatAPIError(error) });
    }
  }, [error, toggleNotification, formatAPIError]);
  const {
    data: auditLogs,
    isLoading: isLoadingAuditLogs,
    isError: isAuditLogsError,
    error: auditLogsError
  } = useGetAuditLogsQuery(query, {
    refetchOnMountOrArgChange: true,
    skip: !canReadAuditLogs
  });
  React2.useEffect(() => {
    if (auditLogsError) {
      toggleNotification({ type: "danger", message: formatAPIError(auditLogsError) });
    }
  }, [auditLogsError, toggleNotification, formatAPIError]);
  return {
    auditLogs,
    users: (data == null ? void 0 : data.users) ?? [],
    isLoading: isLoadingUsers || isLoadingAuditLogs,
    hasError: isAuditLogsError || isUsersError
  };
};

// ../packages/core/admin/ee/admin/src/pages/SettingsPage/pages/AuditLogs/components/ComboboxFilter.tsx
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var ComboboxFilter = (props) => {
  var _a;
  const { formatMessage } = useIntl();
  const field = useField(props.name);
  const ariaLabel = formatMessage({
    id: "Settings.permissions.auditLogs.filter.aria-label",
    defaultMessage: "Search and select an option to filter"
  });
  const handleChange = (value) => {
    field.onChange(props.name, value);
  };
  return (0, import_jsx_runtime2.jsx)(Combobox, { "aria-label": ariaLabel, value: field.value, onChange: handleChange, children: (_a = props.options) == null ? void 0 : _a.map((opt) => {
    const value = typeof opt === "string" ? opt : opt.value;
    const label = typeof opt === "string" ? opt : opt.label;
    return (0, import_jsx_runtime2.jsx)(Option, { value, children: label }, value);
  }) });
};

// ../packages/core/admin/ee/admin/src/pages/SettingsPage/pages/AuditLogs/utils/getDisplayedFilters.ts
var getDisplayedFilters = ({
  formatMessage,
  users,
  canReadUsers
}) => {
  const operators = [
    {
      label: formatMessage({
        id: "components.FilterOptions.FILTER_TYPES.$eq",
        defaultMessage: "is"
      }),
      value: "$eq"
    },
    {
      label: formatMessage({
        id: "components.FilterOptions.FILTER_TYPES.$ne",
        defaultMessage: "is not"
      }),
      value: "$ne"
    }
  ];
  const filters = [
    {
      input: ComboboxFilter,
      label: formatMessage({
        id: "Settings.permissions.auditLogs.action",
        defaultMessage: "Action"
      }),
      name: "action",
      operators,
      options: Object.keys(actionTypes).map((action) => ({
        label: formatMessage(
          {
            id: `Settings.permissions.auditLogs.${action}`,
            defaultMessage: getDefaultMessage(action)
          },
          { model: void 0 }
        ),
        value: action
      })),
      type: "enumeration"
    },
    {
      label: formatMessage({
        id: "Settings.permissions.auditLogs.date",
        defaultMessage: "Date"
      }),
      name: "date",
      type: "datetime"
    }
  ];
  if (canReadUsers && users) {
    return [
      ...filters,
      {
        input: ComboboxFilter,
        label: formatMessage({
          id: "Settings.permissions.auditLogs.user",
          defaultMessage: "User"
        }),
        mainField: { name: "id", type: "integer" },
        name: "user",
        operators,
        options: users.map((user) => ({
          label: getDisplayName(user),
          value: user.id.toString()
        })),
        type: "relation"
      }
    ];
  }
  return filters;
};

// ../packages/core/admin/ee/admin/src/pages/SettingsPage/pages/AuditLogs/ListPage.tsx
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
var ListPage = () => {
  const { formatMessage } = useIntl();
  const permissions = useTypedSelector((state) => state.admin_app.permissions.settings);
  const {
    allowedActions: { canRead: canReadAuditLogs, canReadUsers },
    isLoading: isLoadingRBAC
  } = useRBAC({
    ...permissions == null ? void 0 : permissions.auditLogs,
    readUsers: (permissions == null ? void 0 : permissions.users.read) || []
  });
  const [{ query }, setQuery] = useQueryParams();
  const {
    auditLogs,
    users,
    isLoading: isLoadingData,
    hasError
  } = useAuditLogsData({
    canReadAuditLogs,
    canReadUsers
  });
  const formatTimeStamp = useFormatTimeStamp();
  const displayedFilters = getDisplayedFilters({ formatMessage, users, canReadUsers });
  const headers = [
    {
      name: "action",
      label: formatMessage({
        id: "Settings.permissions.auditLogs.action",
        defaultMessage: "Action"
      }),
      sortable: true
    },
    {
      name: "date",
      label: formatMessage({
        id: "Settings.permissions.auditLogs.date",
        defaultMessage: "Date"
      }),
      sortable: true
    },
    {
      name: "user",
      label: formatMessage({
        id: "Settings.permissions.auditLogs.user",
        defaultMessage: "User"
      }),
      sortable: false,
      // In this case, the passed parameter cannot and shouldn't be something else than User
      cellFormatter: ({ user }) => user ? user.displayName : ""
    }
  ];
  if (hasError) {
    return (0, import_jsx_runtime3.jsx)(Page.Error, {});
  }
  const isLoading = isLoadingData || isLoadingRBAC;
  const { results = [] } = auditLogs ?? {};
  return (0, import_jsx_runtime3.jsxs)(Page.Main, { "aria-busy": isLoading, children: [
    (0, import_jsx_runtime3.jsx)(Page.Title, { children: formatMessage(
      { id: "Settings.PageTitle", defaultMessage: "Settings - {name}" },
      {
        name: formatMessage({
          id: "global.auditLogs",
          defaultMessage: "Audit Logs"
        })
      }
    ) }),
    (0, import_jsx_runtime3.jsx)(
      Layouts.Header,
      {
        title: formatMessage({
          id: "global.auditLogs",
          defaultMessage: "Audit Logs"
        }),
        subtitle: formatMessage({
          id: "Settings.permissions.auditLogs.listview.header.subtitle",
          defaultMessage: "Logs of all the activities that happened in your environment"
        })
      }
    ),
    (0, import_jsx_runtime3.jsx)(
      Layouts.Action,
      {
        startActions: (0, import_jsx_runtime3.jsxs)(Filters.Root, { options: displayedFilters, children: [
          (0, import_jsx_runtime3.jsx)(Filters.Trigger, {}),
          (0, import_jsx_runtime3.jsx)(Filters.Popover, {}),
          (0, import_jsx_runtime3.jsx)(Filters.List, {})
        ] })
      }
    ),
    (0, import_jsx_runtime3.jsxs)(Layouts.Content, { children: [
      (0, import_jsx_runtime3.jsx)(Table.Root, { rows: results, headers, isLoading, children: (0, import_jsx_runtime3.jsxs)(Table.Content, { children: [
        (0, import_jsx_runtime3.jsx)(Table.Head, { children: headers.map((header) => (0, import_jsx_runtime3.jsx)(Table.HeaderCell, { ...header }, header.name)) }),
        (0, import_jsx_runtime3.jsx)(Table.Empty, {}),
        (0, import_jsx_runtime3.jsx)(Table.Loading, {}),
        (0, import_jsx_runtime3.jsx)(Table.Body, { children: results.map((log) => (0, import_jsx_runtime3.jsxs)(Table.Row, { onClick: () => setQuery({ id: log.id }), children: [
          headers.map((header) => {
            var _a;
            const { name, cellFormatter } = header;
            switch (name) {
              case "action":
                return (0, import_jsx_runtime3.jsx)(Table.Cell, { children: (0, import_jsx_runtime3.jsx)(Typography, { textColor: "neutral800", children: formatMessage(
                  {
                    id: `Settings.permissions.auditLogs.${log.action}`,
                    // @ts-expect-error – getDefaultMessage probably doesn't benefit from being so strongly typed unless we just add string at the end.
                    defaultMessage: getDefaultMessage(log.action)
                  },
                  { model: ((_a = log.payload) == null ? void 0 : _a.model) ?? "" }
                ) }) }, name);
              case "date":
                return (0, import_jsx_runtime3.jsx)(Table.Cell, { children: (0, import_jsx_runtime3.jsx)(Typography, { textColor: "neutral800", children: formatTimeStamp(log.date) }) }, name);
              case "user":
                return (0, import_jsx_runtime3.jsx)(Table.Cell, { children: (0, import_jsx_runtime3.jsx)(Typography, { textColor: "neutral800", children: cellFormatter ? cellFormatter(log, header) : "-" }) }, name);
              default:
                return (0, import_jsx_runtime3.jsx)(Table.Cell, { children: (0, import_jsx_runtime3.jsx)(Typography, { textColor: "neutral800", children: log[name] || "-" }) }, name);
            }
          }),
          (0, import_jsx_runtime3.jsx)(Table.Cell, { onClick: (e) => e.stopPropagation(), children: (0, import_jsx_runtime3.jsx)(Flex, { justifyContent: "end", children: (0, import_jsx_runtime3.jsx)(
            IconButton,
            {
              onClick: () => setQuery({ id: log.id }),
              withTooltip: false,
              label: formatMessage(
                { id: "app.component.table.view", defaultMessage: "{target} details" },
                { target: `${log.action} action` }
              ),
              variant: "ghost",
              children: (0, import_jsx_runtime3.jsx)(ForwardRef$3L, {})
            }
          ) }) })
        ] }, log.id)) })
      ] }) }),
      (0, import_jsx_runtime3.jsxs)(Pagination.Root, { ...auditLogs == null ? void 0 : auditLogs.pagination, children: [
        (0, import_jsx_runtime3.jsx)(Pagination.PageSize, {}),
        (0, import_jsx_runtime3.jsx)(Pagination.Links, {})
      ] })
    ] }),
    (query == null ? void 0 : query.id) && (0, import_jsx_runtime3.jsx)(Modal2, { handleClose: () => setQuery({ id: "" }, "remove"), logId: query.id.toString() })
  ] });
};
var ProtectedListPage = () => {
  const permissions = useTypedSelector(
    (state) => {
      var _a, _b;
      return (_b = (_a = state.admin_app.permissions.settings) == null ? void 0 : _a.auditLogs) == null ? void 0 : _b.main;
    }
  );
  return (0, import_jsx_runtime3.jsx)(Page.Protect, { permissions, children: (0, import_jsx_runtime3.jsx)(ListPage, {}) });
};
export {
  ListPage,
  ProtectedListPage
};
//# sourceMappingURL=ListPage-PAV7BE4M.js.map
