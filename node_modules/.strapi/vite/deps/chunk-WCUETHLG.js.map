{
  "version": 3,
  "sources": ["../../../../../packages/core/admin/ee/admin/src/hooks/useLicenseLimits.ts"],
  "sourcesContent": ["import * as React from 'react';\r\n\r\nimport { useGetLicenseLimitsQuery } from '../../../../admin/src/services/admin';\r\nimport { GetLicenseLimitInformation } from '../../../../shared/contracts/admin';\r\n\r\ninterface UseLicenseLimitsArgs {\r\n  enabled?: boolean;\r\n}\r\n\r\nfunction useLicenseLimits({ enabled }: UseLicenseLimitsArgs = { enabled: true }) {\r\n  const { data, isError, isLoading } = useGetLicenseLimitsQuery(undefined, {\r\n    skip: !enabled,\r\n  });\r\n\r\n  type FeatureNames = GetLicenseLimitInformation.Response['data']['features'][number]['name'];\r\n\r\n  type GetFeatureType = <T>(name: FeatureNames) => Record<string, T> | undefined;\r\n\r\n  const getFeature = React.useCallback<GetFeatureType>(\r\n    (name) => {\r\n      const feature = data?.data?.features.find((feature) => feature.name === name);\r\n\r\n      if (feature && 'options' in feature) {\r\n        return feature.options;\r\n      } else {\r\n        return {};\r\n      }\r\n    },\r\n    [data]\r\n  );\r\n\r\n  return {\r\n    license: data?.data,\r\n    getFeature,\r\n    isError,\r\n    isLoading,\r\n    isTrial: data?.data?.isTrial ?? false,\r\n  };\r\n}\r\n\r\nexport { useLicenseLimits };\r\nexport type { UseLicenseLimitsArgs };\r\n"],
  "mappings": ";;;;;;;;;;;AAAA,YAAuB;AASvB,SAAS,iBAAiB,EAAE,QAAQ,IAA0B,EAAE,SAAS,KAAK,GAAG;AATjF;AAUE,QAAM,EAAE,MAAM,SAAS,UAAU,IAAI,yBAAyB,QAAW;AAAA,IACvE,MAAM,CAAC;AAAA,EACT,CAAC;AAMD,QAAM,aAAmB;AAAA,IACvB,CAAC,SAAS;AAnBd,UAAAA;AAoBM,YAAM,WAAUA,MAAA,6BAAM,SAAN,gBAAAA,IAAY,SAAS,KAAK,CAACC,aAAYA,SAAQ,SAAS;AAExE,UAAI,WAAW,aAAa,SAAS;AACnC,eAAO,QAAQ;AAAA,MACjB,OAAO;AACL,eAAO,CAAC;AAAA,MACV;AAAA,IACF;AAAA,IACA,CAAC,IAAI;AAAA,EACP;AAEA,SAAO;AAAA,IACL,SAAS,6BAAM;AAAA,IACf;AAAA,IACA;AAAA,IACA;AAAA,IACA,WAAS,kCAAM,SAAN,mBAAY,YAAW;AAAA,EAClC;AACF;",
  "names": ["_a", "feature"]
}
