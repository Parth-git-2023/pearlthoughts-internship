{
  "version": 3,
  "sources": ["../../../../../packages/core/admin/admin/src/hooks/useOnce.ts", "../../../../../packages/core/admin/admin/src/components/RelativeTime.tsx", "../../../../../packages/core/admin/admin/src/pages/Settings/components/Tokens/Table.tsx"],
  "sourcesContent": ["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport * as React from 'react';\r\n\r\nexport const useOnce = (effect: React.EffectCallback) => React.useEffect(effect, emptyDeps);\r\n\r\nconst emptyDeps: React.DependencyList = [];\r\n", "import * as React from 'react';\r\n\r\nimport { Duration, intervalToDuration, isPast } from 'date-fns';\r\nimport { useIntl } from 'react-intl';\r\n\r\nconst intervals: Array<keyof Duration> = ['years', 'months', 'days', 'hours', 'minutes', 'seconds'];\r\n\r\ninterface CustomInterval {\r\n  unit: keyof Duration;\r\n  text: string;\r\n  threshold: number;\r\n}\r\n\r\ninterface RelativeTimeProps extends React.ComponentPropsWithoutRef<'time'> {\r\n  timestamp: Date;\r\n  customIntervals?: CustomInterval[];\r\n}\r\n\r\n/**\r\n * Displays the relative time between a given timestamp and the current time.\r\n * You can display a custom message for given time intervals by passing an array of custom intervals.\r\n *\r\n * @example\r\n * ```jsx\r\n * <caption>Display \"last hour\" if the timestamp is less than an hour ago</caption>\r\n * <RelativeTime\r\n *  timestamp={new Date('2021-01-01')}\r\n *  customIntervals={[\r\n *   { unit: 'hours', threshold: 1, text: 'last hour' },\r\n *  ]}\r\n * ```\r\n */\r\nconst RelativeTime = React.forwardRef<HTMLTimeElement, RelativeTimeProps>(\r\n  ({ timestamp, customIntervals = [], ...restProps }, forwardedRef) => {\r\n    const { formatRelativeTime, formatDate, formatTime } = useIntl();\r\n\r\n    /**\r\n     * TODO: make this auto-update, like a clock.\r\n     */\r\n    const interval = intervalToDuration({\r\n      start: timestamp,\r\n      end: Date.now(),\r\n      // see https://github.com/date-fns/date-fns/issues/2891 â€“ No idea why it's all partial it returns it every time.\r\n    }) as Required<Duration>;\r\n\r\n    const unit = intervals.find((intervalUnit) => {\r\n      return interval[intervalUnit] > 0 && Object.keys(interval).includes(intervalUnit);\r\n    })!;\r\n\r\n    const relativeTime = isPast(timestamp) ? -interval[unit] : interval[unit];\r\n\r\n    // Display custom text if interval is less than the threshold\r\n    const customInterval = customIntervals.find(\r\n      (custom) => interval[custom.unit] < custom.threshold\r\n    );\r\n\r\n    const displayText = customInterval\r\n      ? customInterval.text\r\n      : formatRelativeTime(relativeTime, unit, { numeric: 'auto' });\r\n\r\n    return (\r\n      <time\r\n        ref={forwardedRef}\r\n        dateTime={timestamp.toISOString()}\r\n        role=\"time\"\r\n        title={`${formatDate(timestamp)} ${formatTime(timestamp)}`}\r\n        {...restProps}\r\n      >\r\n        {displayText}\r\n      </time>\r\n    );\r\n  }\r\n);\r\n\r\nexport { RelativeTime };\r\nexport type { CustomInterval, RelativeTimeProps };\r\n", "import * as React from 'react';\r\n\r\nimport {\r\n  Box,\r\n  Flex,\r\n  IconButton,\r\n  Typography,\r\n  useCollator,\r\n  Dialog,\r\n  LinkButton,\r\n} from '@strapi/design-system';\r\nimport { Pencil, Trash } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\nimport { NavLink, useNavigate } from 'react-router-dom';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { ApiToken } from '../../../../../../shared/contracts/api-token';\r\nimport { SanitizedTransferToken } from '../../../../../../shared/contracts/transfer';\r\nimport { ConfirmDialog } from '../../../../components/ConfirmDialog';\r\nimport { RelativeTime } from '../../../../components/RelativeTime';\r\nimport { Table as TableImpl } from '../../../../components/Table';\r\nimport { useTracking } from '../../../../features/Tracking';\r\nimport { useQueryParams } from '../../../../hooks/useQueryParams';\r\n\r\nimport type { Data } from '@strapi/types';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Table\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface TableProps\r\n  extends Pick<TableImpl.Props<SanitizedTransferToken | ApiToken>, 'headers' | 'isLoading'> {\r\n  onConfirmDelete: (id: Data.ID) => void;\r\n  permissions: {\r\n    canRead: boolean;\r\n    canDelete: boolean;\r\n    canUpdate: boolean;\r\n  };\r\n  tokens: SanitizedTransferToken[] | ApiToken[];\r\n  tokenType: 'api-token' | 'transfer-token';\r\n}\r\n\r\nconst Table = ({\r\n  permissions,\r\n  headers = [],\r\n  isLoading = false,\r\n  tokens = [],\r\n  onConfirmDelete,\r\n  tokenType,\r\n}: TableProps) => {\r\n  const [{ query }] = useQueryParams<{ sort?: string }>();\r\n  const { formatMessage, locale } = useIntl();\r\n  const [, sortOrder] = query && query.sort ? query.sort.split(':') : [undefined, 'ASC'];\r\n  const navigate = useNavigate();\r\n  const { trackUsage } = useTracking();\r\n  const formatter = useCollator(locale);\r\n\r\n  const sortedTokens = [...tokens].sort((a, b) => {\r\n    return sortOrder === 'DESC'\r\n      ? formatter.compare(b.name, a.name)\r\n      : formatter.compare(a.name, b.name);\r\n  });\r\n\r\n  const { canDelete, canUpdate, canRead } = permissions;\r\n\r\n  const handleRowClick = (id: Data.ID) => () => {\r\n    if (canRead) {\r\n      trackUsage('willEditTokenFromList', {\r\n        tokenType,\r\n      });\r\n      navigate(id.toString());\r\n    }\r\n  };\r\n\r\n  return (\r\n    <TableImpl.Root headers={headers} rows={sortedTokens} isLoading={isLoading}>\r\n      <TableImpl.Content>\r\n        <TableImpl.Head>\r\n          {headers.map((header) => (\r\n            <TableImpl.HeaderCell key={header.name} {...header} />\r\n          ))}\r\n        </TableImpl.Head>\r\n        <TableImpl.Empty />\r\n        <TableImpl.Loading />\r\n        <TableImpl.Body>\r\n          {sortedTokens.map((token) => (\r\n            <TableImpl.Row key={token.id} onClick={handleRowClick(token.id)}>\r\n              <TableImpl.Cell maxWidth=\"25rem\">\r\n                <Typography textColor=\"neutral800\" fontWeight=\"bold\" ellipsis>\r\n                  {token.name}\r\n                </Typography>\r\n              </TableImpl.Cell>\r\n              <TableImpl.Cell maxWidth=\"25rem\">\r\n                <Typography textColor=\"neutral800\" ellipsis>\r\n                  {token.description}\r\n                </Typography>\r\n              </TableImpl.Cell>\r\n              <TableImpl.Cell>\r\n                <Typography textColor=\"neutral800\">\r\n                  {/* @ts-expect-error One of the tokens doesn't have createdAt */}\r\n                  <RelativeTime timestamp={new Date(token.createdAt)} />\r\n                </Typography>\r\n              </TableImpl.Cell>\r\n              <TableImpl.Cell>\r\n                {token.lastUsedAt && (\r\n                  <Typography textColor=\"neutral800\">\r\n                    <RelativeTime\r\n                      timestamp={new Date(token.lastUsedAt)}\r\n                      customIntervals={[\r\n                        {\r\n                          unit: 'hours',\r\n                          threshold: 1,\r\n                          text: formatMessage({\r\n                            id: 'Settings.apiTokens.lastHour',\r\n                            defaultMessage: 'last hour',\r\n                          }),\r\n                        },\r\n                      ]}\r\n                    />\r\n                  </Typography>\r\n                )}\r\n              </TableImpl.Cell>\r\n              {canUpdate || canRead || canDelete ? (\r\n                <TableImpl.Cell>\r\n                  <Flex justifyContent=\"end\">\r\n                    {canUpdate && <UpdateButton tokenName={token.name} tokenId={token.id} />}\r\n                    {canDelete && (\r\n                      <DeleteButton\r\n                        tokenName={token.name}\r\n                        onClickDelete={() => onConfirmDelete?.(token.id)}\r\n                        tokenType={tokenType}\r\n                      />\r\n                    )}\r\n                  </Flex>\r\n                </TableImpl.Cell>\r\n              ) : null}\r\n            </TableImpl.Row>\r\n          ))}\r\n        </TableImpl.Body>\r\n      </TableImpl.Content>\r\n    </TableImpl.Root>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * CRUD Buttons\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst MESSAGES_MAP = {\r\n  edit: {\r\n    id: 'app.component.table.edit',\r\n    defaultMessage: 'Edit {target}',\r\n  },\r\n  read: {\r\n    id: 'app.component.table.read',\r\n    defaultMessage: 'Read {target}',\r\n  },\r\n};\r\n\r\ninterface DefaultButtonProps {\r\n  tokenName: string;\r\n  tokenId: Data.ID;\r\n  buttonType?: 'edit' | 'read';\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst DefaultButton = ({\r\n  tokenName,\r\n  tokenId,\r\n  buttonType = 'edit',\r\n  children,\r\n}: DefaultButtonProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  return (\r\n    <LinkButtonStyled\r\n      tag={NavLink}\r\n      to={tokenId.toString()}\r\n      onClick={(e: React.MouseEvent) => e.stopPropagation()}\r\n      title={formatMessage(MESSAGES_MAP[buttonType], { target: tokenName })}\r\n      variant=\"ghost\"\r\n      size=\"S\"\r\n    >\r\n      {children}\r\n    </LinkButtonStyled>\r\n  );\r\n};\r\n\r\nconst LinkButtonStyled = styled(LinkButton)`\r\n  padding: 0.7rem;\r\n\r\n  & > span {\r\n    display: flex;\r\n  }\r\n`;\r\n\r\ninterface DeleteButtonProps extends Pick<ButtonProps, 'tokenName'>, Pick<TableProps, 'tokenType'> {\r\n  onClickDelete: () => void;\r\n}\r\n\r\nconst DeleteButton = ({ tokenName, onClickDelete, tokenType }: DeleteButtonProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const { trackUsage } = useTracking();\r\n  const handleClickDelete = () => {\r\n    trackUsage('willDeleteToken', {\r\n      tokenType,\r\n    });\r\n    onClickDelete();\r\n  };\r\n\r\n  return (\r\n    <Dialog.Root>\r\n      <Box<'div'> paddingLeft={1} onClick={(e) => e.stopPropagation()}>\r\n        <Dialog.Trigger>\r\n          <IconButton\r\n            label={formatMessage(\r\n              {\r\n                id: 'global.delete-target',\r\n                defaultMessage: 'Delete {target}',\r\n              },\r\n              { target: `${tokenName}` }\r\n            )}\r\n            name=\"delete\"\r\n            variant=\"ghost\"\r\n          >\r\n            <Trash />\r\n          </IconButton>\r\n        </Dialog.Trigger>\r\n        <ConfirmDialog onConfirm={handleClickDelete} />\r\n      </Box>\r\n    </Dialog.Root>\r\n  );\r\n};\r\n\r\ninterface ButtonProps {\r\n  tokenName: string;\r\n  tokenId: Data.ID;\r\n}\r\n\r\nconst UpdateButton = ({ tokenName, tokenId }: ButtonProps) => {\r\n  return (\r\n    <DefaultButton tokenName={tokenName} tokenId={tokenId}>\r\n      <Pencil />\r\n    </DefaultButton>\r\n  );\r\n};\r\n\r\nexport { Table };\r\nexport type { TableProps };\r\n"],
  "mappings": "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",
  "names": ["React", "import_jsx_runtime", "Table"]
}
