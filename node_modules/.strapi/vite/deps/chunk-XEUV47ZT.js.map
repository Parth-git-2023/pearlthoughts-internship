{
  "version": 3,
  "sources": ["../../../../../packages/core/admin/admin/src/components/GuidedTour/Provider.tsx"],
  "sourcesContent": ["import * as React from 'react';\r\n\r\nimport { produce } from 'immer';\r\nimport get from 'lodash/get';\r\nimport set from 'lodash/set';\r\n\r\nconst GUIDED_TOUR_COMPLETED_STEPS = 'GUIDED_TOUR_COMPLETED_STEPS';\r\nconst GUIDED_TOUR_CURRENT_STEP = 'GUIDED_TOUR_CURRENT_STEP';\r\nconst GUIDED_TOUR_SKIPPED = 'GUIDED_TOUR_SKIPPED';\r\n\r\nconst GUIDED_TOUR_KEYS = {\r\n  GUIDED_TOUR_COMPLETED_STEPS,\r\n  GUIDED_TOUR_CURRENT_STEP,\r\n  GUIDED_TOUR_SKIPPED,\r\n} as const;\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * GuidedTourProvider\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nimport { createContext } from '../Context';\r\n\r\ntype SectionKey = keyof GuidedTourContextValue['guidedTourState'];\r\ntype StepKey = keyof GuidedTourContextValue['guidedTourState'][SectionKey];\r\ntype Step = `${SectionKey}.${StepKey}`;\r\ninterface GuidedTourContextValue {\r\n  currentStep: Step | null;\r\n  guidedTourState: {\r\n    contentTypeBuilder: {\r\n      create: boolean;\r\n      success: boolean;\r\n    };\r\n    contentManager: {\r\n      create: boolean;\r\n      success: boolean;\r\n    };\r\n    apiTokens: {\r\n      create: boolean;\r\n      success: boolean;\r\n    };\r\n  };\r\n  isGuidedTourVisible: boolean;\r\n  isSkipped: boolean;\r\n  setCurrentStep: (step: Step | null) => void | null;\r\n  setGuidedTourVisibility: (isVisible: boolean) => void;\r\n  setSkipped: (isSkipped: boolean) => void;\r\n  setStepState: (step: Step, state: boolean) => void;\r\n  startSection: (section: SectionKey) => void;\r\n}\r\n\r\nconst [GuidedTourProviderImpl, useGuidedTour] = createContext<GuidedTourContextValue>('GuidedTour');\r\n\r\ninterface GuidedTourProviderProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst GuidedTourProvider = ({ children }: GuidedTourProviderProps) => {\r\n  const [{ currentStep, guidedTourState, isGuidedTourVisible, isSkipped }, dispatch] =\r\n    React.useReducer(reducer, initialState, initialiseState);\r\n\r\n  const setCurrentStep = (step: SetCurrentStepAction['step']) => {\r\n    // if step is null it is intentional, we need to dispatch it\r\n    if (step !== null) {\r\n      const isStepAlreadyDone = get(guidedTourState, step);\r\n      const [sectionName, stepName] = step.split('.') as [SectionKey, StepKey];\r\n      const sectionArray = Object.entries(guidedTourState[sectionName]);\r\n\r\n      const currentStepIndex = sectionArray.findIndex(([key]) => key === stepName);\r\n      const previousSteps = sectionArray.slice(0, currentStepIndex);\r\n\r\n      const isStepToShow = previousSteps.every(([, sectionValue]) => sectionValue);\r\n\r\n      if (isStepAlreadyDone || isSkipped || !isStepToShow) {\r\n        return null;\r\n      }\r\n    }\r\n\r\n    window.localStorage.setItem(GUIDED_TOUR_CURRENT_STEP, JSON.stringify(null));\r\n\r\n    return dispatch({\r\n      type: 'SET_CURRENT_STEP',\r\n      step,\r\n    });\r\n  };\r\n\r\n  const setGuidedTourVisibility = (value: SetGuidedTourVisibilityAction['value']) => {\r\n    dispatch({\r\n      type: 'SET_GUIDED_TOUR_VISIBILITY',\r\n      value,\r\n    });\r\n  };\r\n\r\n  const setStepState = (currentStep: Step, value: SetStepStateAction['value']) => {\r\n    addCompletedStep(currentStep);\r\n\r\n    dispatch({\r\n      type: 'SET_STEP_STATE',\r\n      currentStep,\r\n      value,\r\n    });\r\n  };\r\n\r\n  const startSection = (sectionName: SectionKey) => {\r\n    const sectionSteps = guidedTourState[sectionName];\r\n\r\n    if (sectionSteps) {\r\n      const guidedTourArray = Object.entries(guidedTourState);\r\n\r\n      // Find current section position in the guidedTourArray\r\n      // Get only previous sections based on current section position\r\n      const currentSectionIndex = guidedTourArray.findIndex(([key]) => key === sectionName);\r\n      const previousSections = guidedTourArray.slice(0, currentSectionIndex);\r\n\r\n      // Check if every steps from previous section are done\r\n      const isSectionToShow = previousSections.every(([, sectionValue]) =>\r\n        Object.values(sectionValue).every(Boolean)\r\n      );\r\n\r\n      const [firstStep] = Object.keys(sectionSteps) as [StepKey];\r\n      const isFirstStepDone = sectionSteps[firstStep];\r\n\r\n      if (isSectionToShow && !currentStep && !isFirstStepDone) {\r\n        setCurrentStep(`${sectionName}.${firstStep}`);\r\n      }\r\n    }\r\n  };\r\n\r\n  const setSkipped = (value: SetSkippedAction['value']) => {\r\n    window.localStorage.setItem(GUIDED_TOUR_SKIPPED, JSON.stringify(value));\r\n\r\n    dispatch({\r\n      type: 'SET_SKIPPED',\r\n      value,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <GuidedTourProviderImpl\r\n      guidedTourState={guidedTourState}\r\n      currentStep={currentStep}\r\n      setCurrentStep={setCurrentStep}\r\n      setGuidedTourVisibility={setGuidedTourVisibility}\r\n      setSkipped={setSkipped}\r\n      setStepState={setStepState}\r\n      startSection={startSection}\r\n      // TODO: remove the future condition when the unstable guided tour will be released\r\n      isGuidedTourVisible={\r\n        isGuidedTourVisible && !window.strapi.future.isEnabled('unstableGuidedTour')\r\n      }\r\n      isSkipped={isSkipped}\r\n    >\r\n      {children}\r\n    </GuidedTourProviderImpl>\r\n  );\r\n};\r\n\r\ntype State = Pick<\r\n  GuidedTourContextValue,\r\n  'guidedTourState' | 'currentStep' | 'isGuidedTourVisible' | 'isSkipped'\r\n>;\r\n\r\nconst initialState = {\r\n  currentStep: null,\r\n  guidedTourState: {\r\n    contentTypeBuilder: {\r\n      create: false,\r\n      success: false,\r\n    },\r\n    contentManager: {\r\n      create: false,\r\n      success: false,\r\n    },\r\n    apiTokens: {\r\n      create: false,\r\n      success: false,\r\n    },\r\n  },\r\n  isGuidedTourVisible: false,\r\n  isSkipped: false,\r\n} satisfies State;\r\n\r\ninterface SetCurrentStepAction {\r\n  type: 'SET_CURRENT_STEP';\r\n  step: Step | null;\r\n}\r\n\r\ninterface SetStepStateAction {\r\n  type: 'SET_STEP_STATE';\r\n  currentStep: Step;\r\n  value: boolean;\r\n}\r\n\r\ninterface SetSkippedAction {\r\n  type: 'SET_SKIPPED';\r\n  value: boolean;\r\n}\r\n\r\ninterface SetGuidedTourVisibilityAction {\r\n  type: 'SET_GUIDED_TOUR_VISIBILITY';\r\n  value: boolean;\r\n}\r\n\r\ntype Action =\r\n  | SetCurrentStepAction\r\n  | SetStepStateAction\r\n  | SetSkippedAction\r\n  | SetGuidedTourVisibilityAction;\r\n\r\nconst reducer: React.Reducer<State, Action> = (state: State = initialState, action: Action) =>\r\n  produce(state, (draftState) => {\r\n    switch (action.type) {\r\n      case 'SET_CURRENT_STEP': {\r\n        draftState.currentStep = action.step;\r\n        break;\r\n      }\r\n      case 'SET_STEP_STATE': {\r\n        const [section, step] = action.currentStep.split('.') as [SectionKey, StepKey];\r\n        draftState.guidedTourState[section][step] = action.value;\r\n        break;\r\n      }\r\n      case 'SET_SKIPPED': {\r\n        draftState.isSkipped = action.value;\r\n        break;\r\n      }\r\n      case 'SET_GUIDED_TOUR_VISIBILITY': {\r\n        draftState.isGuidedTourVisible = action.value;\r\n        break;\r\n      }\r\n      default: {\r\n        return draftState;\r\n      }\r\n    }\r\n  });\r\n\r\nconst initialiseState = (initialState: State) => {\r\n  const copyInitialState = { ...initialState };\r\n  const guidedTourLocaleStorage = JSON.parse(\r\n    window.localStorage.getItem(GUIDED_TOUR_COMPLETED_STEPS) ?? '[]'\r\n  );\r\n  const currentStepLocaleStorage = JSON.parse(\r\n    window.localStorage.getItem(GUIDED_TOUR_CURRENT_STEP) ?? 'null'\r\n  );\r\n  const skippedLocaleStorage = JSON.parse(\r\n    window.localStorage.getItem(GUIDED_TOUR_SKIPPED) ?? 'null'\r\n  );\r\n\r\n  if (Array.isArray(guidedTourLocaleStorage)) {\r\n    guidedTourLocaleStorage.forEach((step) => {\r\n      const [sectionName, stepName] = step.split('.');\r\n      set(copyInitialState, ['guidedTourState', sectionName, stepName], true);\r\n    });\r\n  }\r\n\r\n  // if current step when initializing mark it as done\r\n  if (currentStepLocaleStorage) {\r\n    const [sectionName, stepName] = currentStepLocaleStorage.split('.') as [SectionKey, StepKey];\r\n    set(copyInitialState, ['guidedTourState', sectionName, stepName], true);\r\n\r\n    addCompletedStep(currentStepLocaleStorage as Step);\r\n\r\n    window.localStorage.setItem(GUIDED_TOUR_CURRENT_STEP, JSON.stringify(null));\r\n  }\r\n\r\n  if (skippedLocaleStorage !== null) {\r\n    set(copyInitialState, 'isSkipped', skippedLocaleStorage);\r\n  }\r\n\r\n  return copyInitialState;\r\n};\r\n\r\n/**\r\n * @description Add a completed step to the local storage if it does not already exist.\r\n */\r\nconst addCompletedStep = (completedStep: Step) => {\r\n  const currentSteps = JSON.parse(window.localStorage.getItem(GUIDED_TOUR_COMPLETED_STEPS) ?? '[]');\r\n\r\n  if (!Array.isArray(currentSteps)) {\r\n    return;\r\n  }\r\n\r\n  const isAlreadyStored = currentSteps.includes(completedStep);\r\n\r\n  if (isAlreadyStored) {\r\n    return;\r\n  }\r\n\r\n  window.localStorage.setItem(\r\n    GUIDED_TOUR_COMPLETED_STEPS,\r\n    JSON.stringify([...currentSteps, completedStep])\r\n  );\r\n};\r\n\r\nexport { GuidedTourProvider, useGuidedTour, GuidedTourContextValue, GUIDED_TOUR_KEYS };\r\n"],
  "mappings": "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",
  "names": ["get", "currentStep", "initialState", "set"]
}
