{
  "version": 3,
  "sources": ["../../../../../packages/core/admin/admin/src/hooks/useElementOnScreen.ts", "../../../../../packages/core/admin/admin/src/components/Layouts/ActionLayout.tsx", "../../../../../packages/core/admin/admin/src/components/Layouts/ContentLayout.tsx", "../../../../../packages/core/admin/admin/src/components/Layouts/GridLayout.tsx", "../../../../../packages/core/admin/admin/src/components/Layouts/HeaderLayout.tsx", "../../../../../packages/core/admin/admin/src/components/Layouts/Layout.tsx"],
  "sourcesContent": ["import * as React from 'react';\r\n\r\n/**\r\n * Hook that returns a ref to an element and a boolean indicating if the element is in the viewport\r\n * or in the element specified in `options.root`.\r\n */\r\nconst useElementOnScreen = <TElement extends HTMLElement = HTMLElement>(\r\n  onVisiblityChange: (isVisible: boolean) => void,\r\n  options?: IntersectionObserverInit\r\n): React.RefObject<TElement> => {\r\n  const containerRef = React.useRef<TElement>(null);\r\n\r\n  React.useEffect(() => {\r\n    const containerEl = containerRef.current;\r\n    const observer = new IntersectionObserver(([entry]) => {\r\n      onVisiblityChange(entry.isIntersecting);\r\n    }, options);\r\n\r\n    if (containerEl) {\r\n      observer.observe(containerRef.current);\r\n    }\r\n\r\n    return () => {\r\n      if (containerEl) {\r\n        observer.disconnect();\r\n      }\r\n    };\r\n  }, [containerRef, options, onVisiblityChange]);\r\n\r\n  return containerRef;\r\n};\r\n\r\nexport { useElementOnScreen };\r\n", "import * as React from 'react';\r\n\r\nimport { Flex } from '@strapi/design-system';\r\n\r\ninterface ActionLayoutProps {\r\n  endActions?: React.ReactNode;\r\n  startActions?: React.ReactNode;\r\n}\r\n\r\nconst ActionLayout = ({ startActions, endActions }: ActionLayoutProps) => {\r\n  if (!startActions && !endActions) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Flex\r\n      justifyContent=\"space-between\"\r\n      alignItems=\"flex-start\"\r\n      paddingBottom={4}\r\n      paddingLeft={10}\r\n      paddingRight={10}\r\n    >\r\n      <Flex gap={2} wrap=\"wrap\">\r\n        {startActions}\r\n      </Flex>\r\n\r\n      <Flex gap={2} shrink={0} wrap=\"wrap\">\r\n        {endActions}\r\n      </Flex>\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport { ActionLayout, type ActionLayoutProps };\r\n", "import * as React from 'react';\r\n\r\nimport { Box } from '@strapi/design-system';\r\n\r\ninterface ContentLayoutProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst ContentLayout = ({ children }: ContentLayoutProps) => {\r\n  return (\r\n    <Box paddingLeft={10} paddingRight={10}>\r\n      {children}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport { ContentLayout, type ContentLayoutProps };\r\n", "import * as React from 'react';\r\n\r\nimport { Box } from '@strapi/design-system';\r\nimport { styled } from 'styled-components';\r\n\r\ninterface GridColSize {\r\n  S: number;\r\n  M: number;\r\n}\r\n\r\nconst GridColSize = {\r\n  S: 180,\r\n  M: 250,\r\n};\r\n\r\ntype Size = keyof GridColSize;\r\n\r\nconst StyledGrid = styled(Box)<{ $size: Size }>`\r\n  display: grid;\r\n  grid-template-columns: repeat(\r\n    auto-fit,\r\n    minmax(${({ $size }: { $size: Size }) => `${GridColSize[$size]}px`}, 1fr)\r\n  );\r\n  grid-gap: ${({ theme }) => theme.spaces[4]};\r\n`;\r\n\r\ninterface GridLayoutProps {\r\n  size: Size;\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst GridLayout = ({ size, children }: GridLayoutProps) => {\r\n  return <StyledGrid $size={size}>{children}</StyledGrid>;\r\n};\r\n\r\nexport { GridLayout };\r\nexport type { GridLayoutProps, GridColSize };\r\n", "import * as React from 'react';\r\n\r\nimport { Box, Flex, Typography, TypographyProps, useCallbackRef } from '@strapi/design-system';\r\n\r\nimport { useElementOnScreen } from '../../hooks/useElementOnScreen';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * BaseHeaderLayout\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface BaseHeaderLayoutProps extends Omit<TypographyProps<'div'>, 'tag'> {\r\n  navigationAction?: React.ReactNode;\r\n  primaryAction?: React.ReactNode;\r\n  secondaryAction?: React.ReactNode;\r\n  subtitle?: React.ReactNode;\r\n  sticky?: boolean;\r\n  width?: number;\r\n}\r\n\r\nconst BaseHeaderLayout = React.forwardRef<HTMLDivElement, BaseHeaderLayoutProps>(\r\n  (\r\n    { navigationAction, primaryAction, secondaryAction, subtitle, title, sticky, width, ...props },\r\n    ref\r\n  ) => {\r\n    const isSubtitleString = typeof subtitle === 'string';\r\n\r\n    if (sticky) {\r\n      return (\r\n        <Box\r\n          paddingLeft={6}\r\n          paddingRight={6}\r\n          paddingTop={3}\r\n          paddingBottom={3}\r\n          position=\"fixed\"\r\n          top={0}\r\n          right={0}\r\n          background=\"neutral0\"\r\n          shadow=\"tableShadow\"\r\n          width={`${width}px`}\r\n          zIndex={3}\r\n          data-strapi-header-sticky\r\n        >\r\n          <Flex justifyContent=\"space-between\">\r\n            <Flex>\r\n              {navigationAction && <Box paddingRight={3}>{navigationAction}</Box>}\r\n              <Box>\r\n                <Typography variant=\"beta\" tag=\"h1\" {...props}>\r\n                  {title}\r\n                </Typography>\r\n                {isSubtitleString ? (\r\n                  <Typography variant=\"pi\" textColor=\"neutral600\">\r\n                    {subtitle}\r\n                  </Typography>\r\n                ) : (\r\n                  subtitle\r\n                )}\r\n              </Box>\r\n              {secondaryAction ? <Box paddingLeft={4}>{secondaryAction}</Box> : null}\r\n            </Flex>\r\n            <Flex>{primaryAction ? <Box paddingLeft={2}>{primaryAction}</Box> : undefined}</Flex>\r\n          </Flex>\r\n        </Box>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <Box\r\n        ref={ref}\r\n        paddingLeft={10}\r\n        paddingRight={10}\r\n        paddingBottom={8}\r\n        paddingTop={navigationAction ? 6 : 8}\r\n        background=\"neutral100\"\r\n        data-strapi-header\r\n      >\r\n        {navigationAction ? <Box paddingBottom={2}>{navigationAction}</Box> : null}\r\n        <Flex justifyContent=\"space-between\">\r\n          <Flex minWidth={0}>\r\n            <Typography tag=\"h1\" variant=\"alpha\" {...props}>\r\n              {title}\r\n            </Typography>\r\n            {secondaryAction ? <Box paddingLeft={4}>{secondaryAction}</Box> : null}\r\n          </Flex>\r\n          {primaryAction}\r\n        </Flex>\r\n        {isSubtitleString ? (\r\n          <Typography variant=\"epsilon\" textColor=\"neutral600\" tag=\"p\">\r\n            {subtitle}\r\n          </Typography>\r\n        ) : (\r\n          subtitle\r\n        )}\r\n      </Box>\r\n    );\r\n  }\r\n);\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * HeaderLayout\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface HeaderLayoutProps extends BaseHeaderLayoutProps {}\r\n\r\nconst HeaderLayout = (props: HeaderLayoutProps) => {\r\n  const baseHeaderLayoutRef = React.useRef<HTMLDivElement>(null);\r\n  const [headerSize, setHeaderSize] = React.useState<DOMRect | null>(null);\r\n  const [isVisible, setIsVisible] = React.useState(true);\r\n\r\n  const containerRef = useElementOnScreen<HTMLDivElement>(setIsVisible, {\r\n    root: null,\r\n    rootMargin: '0px',\r\n    threshold: 0,\r\n  });\r\n\r\n  useResizeObserver(containerRef, () => {\r\n    if (containerRef.current) {\r\n      setHeaderSize(containerRef.current.getBoundingClientRect());\r\n    }\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    if (baseHeaderLayoutRef.current) {\r\n      setHeaderSize(baseHeaderLayoutRef.current.getBoundingClientRect());\r\n    }\r\n  }, [baseHeaderLayoutRef]);\r\n\r\n  return (\r\n    <>\r\n      <div style={{ height: headerSize?.height }} ref={containerRef}>\r\n        {isVisible && <BaseHeaderLayout ref={baseHeaderLayoutRef} {...props} />}\r\n      </div>\r\n\r\n      {!isVisible && <BaseHeaderLayout {...props} sticky width={headerSize?.width} />}\r\n    </>\r\n  );\r\n};\r\n\r\nHeaderLayout.displayName = 'HeaderLayout';\r\n\r\n/**\r\n * useResizeObserver: hook that observes the size of an element and calls a callback when it changes.\r\n */\r\nconst useResizeObserver = (\r\n  sources: React.RefObject<HTMLElement> | React.RefObject<HTMLElement>[],\r\n  onResize: ResizeObserverCallback\r\n) => {\r\n  const handleResize = useCallbackRef(onResize);\r\n\r\n  React.useLayoutEffect(() => {\r\n    const resizeObs = new ResizeObserver(handleResize);\r\n\r\n    if (Array.isArray(sources)) {\r\n      sources.forEach((source) => {\r\n        if (source.current) {\r\n          resizeObs.observe(source.current);\r\n        }\r\n      });\r\n    } else if (sources.current) {\r\n      resizeObs.observe(sources.current);\r\n    }\r\n\r\n    return () => {\r\n      resizeObs.disconnect();\r\n    };\r\n  }, [sources, handleResize]);\r\n};\r\n\r\nexport type { HeaderLayoutProps, BaseHeaderLayoutProps };\r\nexport { HeaderLayout, BaseHeaderLayout };\r\n", "import * as React from 'react';\r\n\r\nimport { Box } from '@strapi/design-system';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { ActionLayout } from './ActionLayout';\r\nimport { ContentLayout } from './ContentLayout';\r\nimport { GridLayout, GridLayoutProps } from './GridLayout';\r\nimport { HeaderLayout, BaseHeaderLayout } from './HeaderLayout';\r\n\r\ninterface LayoutProps {\r\n  children: React.ReactNode;\r\n  sideNav?: React.ReactNode;\r\n}\r\n\r\nconst GridContainer = styled(Box)<{ $hasSideNav: boolean }>`\r\n  display: grid;\r\n  grid-template-columns: ${({ $hasSideNav }) => ($hasSideNav ? `auto 1fr` : '1fr')};\r\n`;\r\n\r\nconst OverflowingItem = styled(Box)`\r\n  overflow-x: hidden;\r\n`;\r\n\r\nconst RootLayout = ({ sideNav, children }: LayoutProps) => {\r\n  return (\r\n    <GridContainer $hasSideNav={Boolean(sideNav)}>\r\n      {sideNav}\r\n      <OverflowingItem paddingBottom={10}>{children}</OverflowingItem>\r\n    </GridContainer>\r\n  );\r\n};\r\n\r\nconst Layouts = {\r\n  Root: RootLayout,\r\n  Header: HeaderLayout,\r\n  BaseHeader: BaseHeaderLayout,\r\n  Grid: GridLayout,\r\n  Action: ActionLayout,\r\n  Content: ContentLayout,\r\n};\r\n\r\nexport { Layouts, type LayoutProps, type GridLayoutProps };\r\n"],
  "mappings": "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",
  "names": ["import_jsx_runtime", "import_jsx_runtime", "React", "import_jsx_runtime", "import_jsx_runtime"]
}
