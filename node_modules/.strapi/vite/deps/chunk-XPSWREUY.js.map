{
  "version": 3,
  "sources": ["../../../../../packages/core/content-manager/admin/src/components/ConfigurationForm/Fields.tsx", "../../../../../packages/core/content-manager/admin/src/components/ConfigurationForm/EditFieldForm.tsx", "../../../../../packages/core/content-manager/admin/src/components/ConfigurationForm/Form.tsx"],
  "sourcesContent": ["import * as React from 'react';\r\n\r\nimport { useDroppable, DndContext, UniqueIdentifier, DragOverlay } from '@dnd-kit/core';\r\nimport { arrayMove, SortableContext, useSortable } from '@dnd-kit/sortable';\r\nimport { CSS } from '@dnd-kit/utilities';\r\nimport { useField, useForm } from '@strapi/admin/strapi-admin';\r\nimport {\r\n  Modal,\r\n  Box,\r\n  Flex,\r\n  Grid,\r\n  IconButton,\r\n  IconButtonComponent,\r\n  Typography,\r\n  Link,\r\n  Menu,\r\n} from '@strapi/design-system';\r\nimport { Cog, Cross, Drag, Pencil, Plus } from '@strapi/icons';\r\nimport { generateNKeysBetween as generateNKeysBetweenImpl } from 'fractional-indexing';\r\nimport { produce } from 'immer';\r\nimport { useIntl } from 'react-intl';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { getTranslation } from '../../utils/translations';\r\nimport { ComponentIcon } from '../ComponentIcon';\r\n\r\nimport { EditFieldForm, EditFieldFormProps } from './EditFieldForm';\r\n\r\nimport type { ConfigurationFormData, EditFieldSpacerLayout } from './Form';\r\nimport type { EditLayout } from '../../hooks/useDocumentLayout';\r\n\r\ntype FormField = ConfigurationFormData['layout'][number]['children'][number];\r\ntype Field = Omit<ConfigurationFormData['layout'][number]['children'][number], '__temp_key__'>;\r\n\r\nconst GRID_COLUMNS = 12;\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Drag and Drop\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst DroppableContainer = ({\r\n  id,\r\n  children,\r\n}: {\r\n  id: string;\r\n  children: (props: ReturnType<typeof useDroppable>) => React.ReactNode;\r\n}) => {\r\n  const droppable = useDroppable({\r\n    id,\r\n  });\r\n\r\n  return children(droppable);\r\n};\r\n\r\nexport const SortableItem = ({ id, children }: { id: string; children: React.ReactNode }) => {\r\n  const { attributes, setNodeRef, transform, transition } = useSortable({\r\n    id,\r\n  });\r\n\r\n  const style = {\r\n    transform: CSS.Transform.toString(transform),\r\n    transition,\r\n    height: '100%',\r\n  };\r\n\r\n  return (\r\n    <div ref={setNodeRef} style={style} {...attributes}>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Fields\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface FieldsProps extends Pick<EditLayout, 'metadatas'>, Pick<FieldProps, 'components'> {\r\n  attributes: {\r\n    [key: string]: FieldProps['attribute'];\r\n  };\r\n  fieldSizes: Record<string, number>;\r\n  components: EditLayout['components'];\r\n}\r\n\r\n/**\r\n * Compute uids and formName for drag and drop items for the incoming layout\r\n */\r\nconst createDragAndDropContainersFromLayout = (layout: ConfigurationFormData['layout']) => {\r\n  return layout.map((row, containerIndex) => ({\r\n    ...row,\r\n    // Use unique ids for drag and drop items\r\n    dndId: `container-${containerIndex}`,\r\n    children: row.children.map((child, childIndex) => ({\r\n      ...child,\r\n      dndId: `container-${containerIndex}-child-${childIndex}`,\r\n\r\n      // The formName must be recomputed each time an item is moved\r\n      formName: `layout.${containerIndex}.children.${childIndex}`,\r\n    })),\r\n  }));\r\n};\r\n\r\nconst Fields = ({ attributes, fieldSizes, components, metadatas = {} }: FieldsProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  const layout = useForm<ConfigurationFormData['layout']>(\r\n    'Fields',\r\n    (state) => state.values.layout ?? []\r\n  );\r\n\r\n  const onChange = useForm('Fields', (state) => state.onChange);\r\n  const addFieldRow = useForm('Fields', (state) => state.addFieldRow);\r\n  const removeFieldRow = useForm('Fields', (state) => state.removeFieldRow);\r\n\r\n  const existingFields = layout.map((row) => row.children.map((field) => field.name)).flat();\r\n\r\n  /**\r\n   * Get the fields that are not already in the layout\r\n   * But also check that they are visible before we give users\r\n   * the option to display them. e.g. `id` is not visible.\r\n   */\r\n  const remainingFields = Object.entries(metadatas).reduce<Field[]>((acc, current) => {\r\n    const [name, { visible, ...field }] = current;\r\n\r\n    if (!existingFields.includes(name) && visible === true) {\r\n      const type = attributes[name]?.type;\r\n      const size = type ? fieldSizes[type] : GRID_COLUMNS;\r\n\r\n      acc.push({\r\n        ...field,\r\n        label: field.label ?? name,\r\n        name,\r\n        size,\r\n      });\r\n    }\r\n\r\n    return acc;\r\n  }, []);\r\n\r\n  const handleRemoveField =\r\n    (rowIndex: number, fieldIndex: number): FieldProps['onRemoveField'] =>\r\n    () => {\r\n      if (layout[rowIndex].children.length === 1) {\r\n        removeFieldRow(`layout`, rowIndex);\r\n      } else {\r\n        onChange(`layout.${rowIndex}.children`, [\r\n          ...layout[rowIndex].children.slice(0, fieldIndex),\r\n          ...layout[rowIndex].children.slice(fieldIndex + 1),\r\n        ]);\r\n      }\r\n    };\r\n\r\n  const handleAddField = (field: Field) => () => {\r\n    addFieldRow('layout', { children: [field] });\r\n  };\r\n\r\n  const [containers, setContainers] = React.useState(() =>\r\n    createDragAndDropContainersFromLayout(layout)\r\n  );\r\n  type Container = (typeof containers)[number];\r\n  const [activeDragItem, setActiveDragItem] = React.useState<Container['children'][number] | null>(\r\n    null\r\n  );\r\n\r\n  /**\r\n   * Finds either the parent container id or the child id within a container\r\n   */\r\n  function findContainer(id: UniqueIdentifier, containersAsDictionary: Record<string, Container>) {\r\n    // If the id is a key, then it is the parent container\r\n    if (id in containersAsDictionary) {\r\n      return id;\r\n    }\r\n\r\n    // Otherwise, it is a child inside a container\r\n    return Object.keys(containersAsDictionary).find((key) =>\r\n      containersAsDictionary[key].children.find((child) => child.dndId === id)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Gets an item from a container based on its id\r\n   */\r\n  const getItemFromContainer = (id: UniqueIdentifier, container: Container) => {\r\n    return container.children.find((item) => id === item.dndId);\r\n  };\r\n\r\n  /**\r\n   * Gets the containers as dictionary for quick lookup\r\n   */\r\n  const getContainersAsDictionary = () => {\r\n    return Object.fromEntries(containers.map((container) => [container.dndId, container]));\r\n  };\r\n\r\n  /**\r\n   * Recomputes the empty space in the grid\r\n   */\r\n  const createContainersWithSpacers = (layout: typeof containers) => {\r\n    return layout\r\n      .map((row) => ({\r\n        ...row,\r\n        children: row.children.filter((field) => field.name !== TEMP_FIELD_NAME),\r\n      }))\r\n      .filter((row) => row.children.length > 0)\r\n      .map((row) => {\r\n        const totalSpaceTaken = row.children.reduce((acc, curr) => acc + curr.size, 0);\r\n\r\n        if (totalSpaceTaken < GRID_COLUMNS) {\r\n          const [spacerKey] = generateNKeysBetweenImpl(\r\n            row.children.at(-1)?.__temp_key__,\r\n            undefined,\r\n            1\r\n          );\r\n\r\n          return {\r\n            ...row,\r\n            children: [\r\n              ...row.children,\r\n              {\r\n                name: TEMP_FIELD_NAME,\r\n                size: GRID_COLUMNS - totalSpaceTaken,\r\n                __temp_key__: spacerKey,\r\n              } satisfies EditFieldSpacerLayout,\r\n            ],\r\n          };\r\n        }\r\n\r\n        return row;\r\n      });\r\n  };\r\n\r\n  /**\r\n   * When layout changes (e.g. when a field size is changed or the containers are reordered)\r\n   * we need to update the ids and form names\r\n   */\r\n  React.useEffect(() => {\r\n    const containers = createDragAndDropContainersFromLayout(layout);\r\n    setContainers(containers);\r\n  }, [layout, setContainers]);\r\n\r\n  return (\r\n    <DndContext\r\n      onDragStart={(event) => {\r\n        const containersAsDictionary = getContainersAsDictionary();\r\n\r\n        const activeContainer = findContainer(event.active.id, containersAsDictionary);\r\n\r\n        if (!activeContainer) return;\r\n\r\n        const activeItem = getItemFromContainer(\r\n          event.active.id,\r\n          containersAsDictionary[activeContainer]\r\n        );\r\n\r\n        if (activeItem) {\r\n          setActiveDragItem(activeItem);\r\n        }\r\n      }}\r\n      onDragOver={({ active, over }) => {\r\n        const containersAsDictionary = getContainersAsDictionary();\r\n        const activeContainer = findContainer(active.id, containersAsDictionary);\r\n        const overContainer = findContainer(over?.id ?? '', containersAsDictionary);\r\n        const activeContainerIndex = containers.findIndex(\r\n          (container) => container.dndId === activeContainer\r\n        );\r\n        const overContainerIndex = containers.findIndex(\r\n          (container) => container.dndId === overContainer\r\n        );\r\n\r\n        if (!activeContainer || !overContainer) {\r\n          return;\r\n        }\r\n\r\n        const draggedItem = getItemFromContainer(\r\n          active.id,\r\n          containersAsDictionary[activeContainer]\r\n        );\r\n        const overItem = getItemFromContainer(\r\n          over?.id ?? '',\r\n          containersAsDictionary[overContainer]\r\n        );\r\n        const overIndex = containersAsDictionary[overContainer].children.findIndex(\r\n          (item) => item.dndId === over?.id\r\n        );\r\n\r\n        if (!draggedItem) return;\r\n\r\n        // Handle a full width field being dragged\r\n        if (draggedItem?.size === GRID_COLUMNS) {\r\n          // Swap the items in the containers\r\n          const update = produce(containers, (draft) => {\r\n            draft[activeContainerIndex].children = containers[overContainerIndex].children;\r\n            draft[overContainerIndex].children = containers[activeContainerIndex].children;\r\n          });\r\n          setContainers(update);\r\n          return;\r\n        }\r\n\r\n        /**\r\n         * Handle an item being dragged from one container to another,\r\n         * the item is removed from its current container, and then added to its new container\r\n         * An item can only be added in a container if there is enough space.\r\n         */\r\n        const update = produce(containers, (draft) => {\r\n          draft[activeContainerIndex].children = draft[activeContainerIndex].children.filter(\r\n            (item) => item.dndId !== active.id\r\n          );\r\n          const spaceTaken = draft[overContainerIndex].children.reduce((acc, curr) => {\r\n            if (curr.name === TEMP_FIELD_NAME) {\r\n              return acc;\r\n            }\r\n\r\n            return acc + curr.size;\r\n          }, 0);\r\n\r\n          // Check the sizes of the children, if there is no room, exit\r\n          if (spaceTaken + draggedItem.size > GRID_COLUMNS) {\r\n            // Leave the item where it started\r\n            draft[activeContainerIndex].children = containers[activeContainerIndex].children;\r\n            return;\r\n          }\r\n\r\n          if (overItem?.name === TEMP_FIELD_NAME) {\r\n            // We are over an invisible spacer, replace it with the dragged item\r\n            draft[overContainerIndex].children.splice(overIndex, 1, draggedItem);\r\n            return;\r\n          }\r\n\r\n          // There is room for the item in the container, drop it\r\n          draft[overContainerIndex].children.splice(overIndex, 0, draggedItem);\r\n        });\r\n\r\n        setContainers(update);\r\n      }}\r\n      onDragEnd={(event) => {\r\n        const { active, over } = event;\r\n        const { id } = active;\r\n        const overId = over?.id;\r\n        const containersAsDictionary = getContainersAsDictionary();\r\n        const activeContainer = findContainer(id, containersAsDictionary);\r\n        const overContainer = findContainer(overId!, containersAsDictionary);\r\n\r\n        if (!activeContainer || !overContainer) {\r\n          return;\r\n        }\r\n\r\n        const activeIndex = containersAsDictionary[activeContainer].children.findIndex(\r\n          (children) => children.dndId === id\r\n        );\r\n        const overIndex = containersAsDictionary[overContainer].children.findIndex(\r\n          (children) => children.dndId === overId\r\n        );\r\n\r\n        const movedContainerItems = produce(containersAsDictionary, (draft) => {\r\n          if (activeIndex !== overIndex && activeContainer === overContainer) {\r\n            // Move items around inside their own container\r\n            draft[activeContainer].children = arrayMove(\r\n              draft[activeContainer].children,\r\n              activeIndex,\r\n              overIndex\r\n            );\r\n          }\r\n        });\r\n\r\n        // Remove properties the server does not expect before updating the form\r\n        const updatedContainers = Object.values(movedContainerItems);\r\n        const updatedContainersWithSpacers = createContainersWithSpacers(\r\n          updatedContainers\r\n        ) as typeof containers;\r\n        const updatedLayout = updatedContainersWithSpacers.map(\r\n          ({ dndId: _dndId, children, ...container }) => ({\r\n            ...container,\r\n            children: children.map(({ dndId: _dndId, formName: _formName, ...child }) => child),\r\n          })\r\n        );\r\n\r\n        // Update the layout\r\n        onChange('layout', updatedLayout);\r\n        setActiveDragItem(null);\r\n      }}\r\n    >\r\n      <Flex paddingTop={6} direction=\"column\" alignItems=\"stretch\" gap={4}>\r\n        <Flex alignItems=\"flex-start\" direction=\"column\" justifyContent=\"space-between\">\r\n          <Typography fontWeight=\"bold\">\r\n            {formatMessage({\r\n              id: getTranslation('containers.list.displayedFields'),\r\n              defaultMessage: 'Displayed fields',\r\n            })}\r\n          </Typography>\r\n          <Typography variant=\"pi\" textColor=\"neutral600\">\r\n            {formatMessage({\r\n              id: 'containers.SettingPage.editSettings.description',\r\n              defaultMessage: 'Drag & drop the fields to build the layout',\r\n            })}\r\n          </Typography>\r\n        </Flex>\r\n        <Box padding={4} hasRadius borderStyle=\"dashed\" borderWidth=\"1px\" borderColor=\"neutral300\">\r\n          <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\r\n            {containers.map((container, containerIndex) => (\r\n              <SortableContext\r\n                key={container.dndId}\r\n                id={container.dndId}\r\n                items={container.children.map((child) => ({ id: child.dndId }))}\r\n              >\r\n                <DroppableContainer id={container.dndId}>\r\n                  {({ setNodeRef }) => (\r\n                    <Grid.Root key={container.dndId} ref={setNodeRef} gap={2}>\r\n                      {container.children.map((child, childIndex) => (\r\n                        <Grid.Item\r\n                          col={child.size}\r\n                          key={child.dndId}\r\n                          direction=\"column\"\r\n                          alignItems=\"stretch\"\r\n                        >\r\n                          <SortableItem id={child.dndId}>\r\n                            <Field\r\n                              attribute={attributes[child.name]}\r\n                              components={components}\r\n                              name={child.formName}\r\n                              onRemoveField={handleRemoveField(containerIndex, childIndex)}\r\n                              dndId={child.dndId}\r\n                            />\r\n                          </SortableItem>\r\n                        </Grid.Item>\r\n                      ))}\r\n                    </Grid.Root>\r\n                  )}\r\n                </DroppableContainer>\r\n              </SortableContext>\r\n            ))}\r\n            <DragOverlay>\r\n              {activeDragItem ? (\r\n                <Field\r\n                  attribute={attributes[activeDragItem.name]}\r\n                  components={components}\r\n                  name={activeDragItem.formName}\r\n                  dndId={activeDragItem.dndId}\r\n                />\r\n              ) : null}\r\n            </DragOverlay>\r\n            <Menu.Root>\r\n              <Menu.Trigger\r\n                startIcon={<Plus />}\r\n                endIcon={null}\r\n                disabled={remainingFields.length === 0}\r\n                fullWidth\r\n                variant=\"secondary\"\r\n              >\r\n                {formatMessage({\r\n                  id: getTranslation('containers.SettingPage.add.field'),\r\n                  defaultMessage: 'Insert another field',\r\n                })}\r\n              </Menu.Trigger>\r\n              <Menu.Content>\r\n                {remainingFields.map((field) => (\r\n                  <Menu.Item key={field.name} onSelect={handleAddField(field)}>\r\n                    {field.label}\r\n                  </Menu.Item>\r\n                ))}\r\n              </Menu.Content>\r\n            </Menu.Root>\r\n          </Flex>\r\n        </Box>\r\n      </Flex>\r\n    </DndContext>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Field\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface FieldProps extends Pick<EditFieldFormProps, 'name' | 'attribute'> {\r\n  components: EditLayout['components'];\r\n  dndId: string;\r\n  onRemoveField?: React.MouseEventHandler<HTMLButtonElement>;\r\n}\r\n\r\nconst TEMP_FIELD_NAME = '_TEMP_';\r\n\r\n/**\r\n * Displays a field in the layout with drag options, also\r\n * opens a modal  to edit the details of said field.\r\n */\r\nconst Field = ({ attribute, components, name, onRemoveField, dndId }: FieldProps) => {\r\n  const [isModalOpen, setIsModalOpen] = React.useState(false);\r\n  const { formatMessage } = useIntl();\r\n  const { value } = useField<FormField>(name);\r\n  const { listeners, setActivatorNodeRef } = useSortable({\r\n    id: dndId,\r\n  });\r\n\r\n  const handleRemoveField: React.MouseEventHandler<HTMLButtonElement> = (e) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    if (onRemoveField) {\r\n      onRemoveField?.(e);\r\n    }\r\n  };\r\n\r\n  const onEditFieldMeta: React.MouseEventHandler<HTMLButtonElement> = (e) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  if (!value) {\r\n    return null;\r\n  }\r\n\r\n  if (value.name === TEMP_FIELD_NAME) {\r\n    return <Flex tag=\"span\" height=\"100%\" style={{ opacity: 0 }} />;\r\n  }\r\n\r\n  if (!attribute) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Modal.Root open={isModalOpen} onOpenChange={setIsModalOpen}>\r\n      <Flex\r\n        borderColor=\"neutral150\"\r\n        background=\"neutral100\"\r\n        hasRadius\r\n        gap={3}\r\n        cursor=\"pointer\"\r\n        onClick={() => {\r\n          setIsModalOpen(true);\r\n        }}\r\n      >\r\n        <DragButton\r\n          ref={setActivatorNodeRef}\r\n          tag=\"span\"\r\n          withTooltip={false}\r\n          label={formatMessage(\r\n            {\r\n              id: getTranslation('components.DraggableCard.move.field'),\r\n              defaultMessage: 'Move {item}',\r\n            },\r\n            { item: value.label }\r\n          )}\r\n          {...listeners}\r\n        >\r\n          <Drag />\r\n        </DragButton>\r\n        <Flex direction=\"column\" alignItems=\"flex-start\" grow={1} overflow=\"hidden\">\r\n          <Flex gap={3} justifyContent=\"space-between\" width=\"100%\">\r\n            <Typography ellipsis fontWeight=\"bold\">\r\n              {value.label}\r\n            </Typography>\r\n            <Flex>\r\n              <IconButton\r\n                type=\"button\"\r\n                variant=\"ghost\"\r\n                background=\"transparent\"\r\n                onClick={onEditFieldMeta}\r\n                withTooltip={false}\r\n                label={formatMessage(\r\n                  {\r\n                    id: getTranslation('components.DraggableCard.edit.field'),\r\n                    defaultMessage: 'Edit {item}',\r\n                  },\r\n                  { item: value.label }\r\n                )}\r\n              >\r\n                <Pencil />\r\n              </IconButton>\r\n              <IconButton\r\n                type=\"button\"\r\n                variant=\"ghost\"\r\n                onClick={handleRemoveField}\r\n                background=\"transparent\"\r\n                withTooltip={false}\r\n                label={formatMessage(\r\n                  {\r\n                    id: getTranslation('components.DraggableCard.delete.field'),\r\n                    defaultMessage: 'Delete {item}',\r\n                  },\r\n                  { item: value.label }\r\n                )}\r\n              >\r\n                <Cross />\r\n              </IconButton>\r\n            </Flex>\r\n          </Flex>\r\n          {attribute?.type === 'component' ? (\r\n            <Flex\r\n              paddingTop={3}\r\n              paddingRight={3}\r\n              paddingBottom={3}\r\n              paddingLeft={0}\r\n              alignItems=\"flex-start\"\r\n              direction=\"column\"\r\n              gap={2}\r\n              width=\"100%\"\r\n            >\r\n              <Grid.Root gap={4} width=\"100%\">\r\n                {components[attribute.component].layout.map((row) =>\r\n                  row.map(({ size, ...field }) => (\r\n                    <Grid.Item key={field.name} col={size} direction=\"column\" alignItems=\"stretch\">\r\n                      <Flex\r\n                        alignItems=\"center\"\r\n                        background=\"neutral0\"\r\n                        paddingTop={2}\r\n                        paddingBottom={2}\r\n                        paddingLeft={3}\r\n                        paddingRight={3}\r\n                        hasRadius\r\n                        borderColor=\"neutral200\"\r\n                      >\r\n                        <Typography textColor=\"neutral800\">{field.name}</Typography>\r\n                      </Flex>\r\n                    </Grid.Item>\r\n                  ))\r\n                )}\r\n              </Grid.Root>\r\n              <Link\r\n                // used to stop the edit form from appearing when we click here.\r\n                onClick={(e) => e.stopPropagation()}\r\n                startIcon={<Cog />}\r\n                tag={NavLink}\r\n                to={`../components/${attribute.component}/configurations/edit`}\r\n              >\r\n                {formatMessage({\r\n                  id: getTranslation('components.FieldItem.linkToComponentLayout'),\r\n                  defaultMessage: \"Set the component's layout\",\r\n                })}\r\n              </Link>\r\n            </Flex>\r\n          ) : null}\r\n          {attribute?.type === 'dynamiczone' ? (\r\n            <Flex\r\n              paddingTop={3}\r\n              paddingRight={3}\r\n              paddingBottom={3}\r\n              paddingLeft={0}\r\n              alignItems=\"flex-start\"\r\n              gap={2}\r\n              width=\"100%\"\r\n              wrap=\"wrap\"\r\n            >\r\n              {attribute?.components.map((uid) => (\r\n                <ComponentLink\r\n                  // used to stop the edit form from appearing when we click here.\r\n                  onClick={(e) => e.stopPropagation()}\r\n                  key={uid}\r\n                  to={`../components/${uid}/configurations/edit`}\r\n                >\r\n                  <ComponentIcon icon={components[uid].settings.icon} />\r\n                  <Typography fontSize={1} textColor=\"neutral600\" fontWeight=\"bold\">\r\n                    {components[uid].settings.displayName}\r\n                  </Typography>\r\n                </ComponentLink>\r\n              ))}\r\n            </Flex>\r\n          ) : null}\r\n        </Flex>\r\n      </Flex>\r\n      {value.name !== TEMP_FIELD_NAME && (\r\n        <EditFieldForm attribute={attribute} name={name} onClose={() => setIsModalOpen(false)} />\r\n      )}\r\n    </Modal.Root>\r\n  );\r\n};\r\n\r\nconst DragButton = styled<IconButtonComponent<'span'>>(IconButton)`\r\n  height: unset;\r\n  align-self: stretch;\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 0;\r\n  border: none;\r\n  background-color: transparent;\r\n  border-radius: 0px;\r\n  border-right: 1px solid ${({ theme }) => theme.colors.neutral150};\r\n  cursor: all-scroll;\r\n\r\n  svg {\r\n    width: 1.2rem;\r\n    height: 1.2rem;\r\n  }\r\n`;\r\n\r\nconst ComponentLink = styled(NavLink)`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: ${({ theme }) => theme.spaces[1]};\r\n  padding: ${(props) => props.theme.spaces[2]};\r\n  border: 1px solid ${({ theme }) => theme.colors.neutral200};\r\n  background: ${({ theme }) => theme.colors.neutral0};\r\n  width: 14rem;\r\n  border-radius: ${({ theme }) => theme.borderRadius};\r\n  text-decoration: none;\r\n\r\n  &:focus,\r\n  &:hover {\r\n    ${({ theme }) => `\r\n      background-color: ${theme.colors.primary100};\r\n      border-color: ${theme.colors.primary200};\r\n\r\n      ${Typography} {\r\n          color: ${theme.colors.primary600};\r\n      }\r\n    `}\r\n\r\n    /* > ComponentIcon */\r\n    > div:first-child {\r\n      background: ${({ theme }) => theme.colors.primary200};\r\n      color: ${({ theme }) => theme.colors.primary600};\r\n\r\n      svg {\r\n        path {\r\n          fill: ${({ theme }) => theme.colors.primary600};\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport { Fields, TEMP_FIELD_NAME };\r\nexport type { FieldsProps };\r\n", "import {\r\n  useNotification,\r\n  InputRenderer,\r\n  Form,\r\n  InputProps,\r\n  useField,\r\n} from '@strapi/admin/strapi-admin';\r\nimport { Button, Flex, Grid, Modal } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\nimport * as yup from 'yup';\r\n\r\nimport { ATTRIBUTE_TYPES_THAT_CANNOT_BE_MAIN_FIELD } from '../../constants/attributes';\r\nimport { useGetInitialDataQuery } from '../../services/init';\r\nimport { capitalise } from '../../utils/strings';\r\nimport { getTranslation } from '../../utils/translations';\r\nimport { FieldTypeIcon } from '../FieldTypeIcon';\r\n\r\nimport { TEMP_FIELD_NAME } from './Fields';\r\n\r\nimport type { ConfigurationFormData } from './Form';\r\nimport type { Schema } from '@strapi/types';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Constants\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst FIELD_SCHEMA = yup.object().shape({\r\n  label: yup.string().required().nullable(),\r\n  description: yup.string(),\r\n  editable: yup.boolean(),\r\n  size: yup.number().required(),\r\n});\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * EditFieldForm\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface EditFieldFormProps {\r\n  attribute?: Schema.Attribute.AnyAttribute;\r\n  name: string;\r\n  onClose: () => void;\r\n}\r\n\r\nconst EditFieldForm = ({ attribute, name, onClose }: EditFieldFormProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const { toggleNotification } = useNotification();\r\n\r\n  const { value, onChange } =\r\n    useField<ConfigurationFormData['layout'][number]['children'][number]>(name);\r\n\r\n  const { data: mainFieldOptions } = useGetInitialDataQuery(undefined, {\r\n    selectFromResult: (res) => {\r\n      if (attribute?.type !== 'relation' || !res.data) {\r\n        return { data: [] };\r\n      }\r\n\r\n      if ('targetModel' in attribute && typeof attribute.targetModel === 'string') {\r\n        const targetSchema = res.data.contentTypes.find(\r\n          (schema) => schema.uid === attribute.targetModel\r\n        );\r\n\r\n        if (targetSchema) {\r\n          return {\r\n            data: Object.entries(targetSchema.attributes).reduce<\r\n              Array<{ label: string; value: string }>\r\n            >((acc, [key, attribute]) => {\r\n              /**\r\n               * Create the list of attributes from the schema as to which can\r\n               * be our `mainField` and dictate the display name of the schema\r\n               * we're editing.\r\n               */\r\n              if (!ATTRIBUTE_TYPES_THAT_CANNOT_BE_MAIN_FIELD.includes(attribute.type)) {\r\n                acc.push({\r\n                  label: key,\r\n                  value: key,\r\n                });\r\n              }\r\n\r\n              return acc;\r\n            }, []),\r\n          };\r\n        }\r\n      }\r\n\r\n      return { data: [] };\r\n    },\r\n    skip: attribute?.type !== 'relation',\r\n  });\r\n\r\n  if (!value || value.name === TEMP_FIELD_NAME || !attribute) {\r\n    // This is very unlikely to happen, but it ensures the form is not opened without a value.\r\n    console.error(\r\n      \"You've opened a field to edit without it being part of the form, this is likely a bug with Strapi. Please open an issue.\"\r\n    );\r\n\r\n    toggleNotification({\r\n      message: formatMessage({\r\n        id: 'content-manager.containers.edit-settings.modal-form.error',\r\n        defaultMessage: 'An error occurred while trying to open the form.',\r\n      }),\r\n      type: 'danger',\r\n    });\r\n\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Modal.Content>\r\n      <Form\r\n        method=\"PUT\"\r\n        initialValues={value}\r\n        validationSchema={FIELD_SCHEMA}\r\n        onSubmit={(data) => {\r\n          onChange(name, data);\r\n          onClose();\r\n        }}\r\n      >\r\n        <Modal.Header>\r\n          <Flex gap={3}>\r\n            <FieldTypeIcon type={attribute.type} />\r\n            <Modal.Title>\r\n              {formatMessage(\r\n                {\r\n                  id: 'content-manager.containers.edit-settings.modal-form.label',\r\n                  defaultMessage: 'Edit {fieldName}',\r\n                },\r\n                { fieldName: capitalise(value.name) }\r\n              )}\r\n            </Modal.Title>\r\n          </Flex>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Grid.Root gap={4}>\r\n            {[\r\n              {\r\n                name: 'label',\r\n                label: formatMessage({\r\n                  id: getTranslation('containers.edit-settings.modal-form.label'),\r\n                  defaultMessage: 'Label',\r\n                }),\r\n                size: 6,\r\n                type: 'string' as const,\r\n              },\r\n              {\r\n                name: 'description',\r\n                label: formatMessage({\r\n                  id: getTranslation('containers.edit-settings.modal-form.description'),\r\n                  defaultMessage: 'Description',\r\n                }),\r\n                size: 6,\r\n                type: 'string' as const,\r\n              },\r\n              {\r\n                name: 'placeholder',\r\n                label: formatMessage({\r\n                  id: getTranslation('containers.edit-settings.modal-form.placeholder'),\r\n                  defaultMessage: 'Placeholder',\r\n                }),\r\n                size: 6,\r\n                type: 'string' as const,\r\n              },\r\n              {\r\n                name: 'editable',\r\n                label: formatMessage({\r\n                  id: getTranslation('containers.edit-settings.modal-form.editable'),\r\n                  defaultMessage: 'Editable',\r\n                }),\r\n                size: 6,\r\n                type: 'boolean' as const,\r\n              },\r\n              {\r\n                name: 'mainField',\r\n                label: formatMessage({\r\n                  id: getTranslation('containers.edit-settings.modal-form.mainField'),\r\n                  defaultMessage: 'Entry title',\r\n                }),\r\n                hint: formatMessage({\r\n                  id: getTranslation(\r\n                    'containers.SettingPage.edit-settings.modal-form.mainField.hint'\r\n                  ),\r\n                  defaultMessage: 'Set the displayed field',\r\n                }),\r\n                size: 6,\r\n                options: mainFieldOptions,\r\n                type: 'enumeration' as const,\r\n              },\r\n              {\r\n                name: 'size',\r\n                label: formatMessage({\r\n                  id: getTranslation('containers.ListSettingsView.modal-form.size'),\r\n                  defaultMessage: 'Size',\r\n                }),\r\n                size: 6,\r\n                options: [\r\n                  { value: '4', label: '33%' },\r\n                  { value: '6', label: '50%' },\r\n                  { value: '8', label: '66%' },\r\n                  { value: '12', label: '100%' },\r\n                ],\r\n                type: 'enumeration' as const,\r\n              },\r\n            ]\r\n              .filter(filterFieldsBasedOnAttributeType(attribute.type))\r\n              .map(({ size, ...field }) => (\r\n                <Grid.Item key={field.name} col={size} direction=\"column\" alignItems=\"stretch\">\r\n                  <InputRenderer {...field} />\r\n                </Grid.Item>\r\n              ))}\r\n          </Grid.Root>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Modal.Close>\r\n            <Button variant=\"tertiary\">\r\n              {formatMessage({ id: 'app.components.Button.cancel', defaultMessage: 'Cancel' })}\r\n            </Button>\r\n          </Modal.Close>\r\n          <Button type=\"submit\">\r\n            {formatMessage({ id: 'global.finish', defaultMessage: 'Finish' })}\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Form>\r\n    </Modal.Content>\r\n  );\r\n};\r\n\r\n/**\r\n * @internal\r\n * @description not all edit fields have the same editable properties, it depends on the type\r\n * e.g. a dynamic zone can only change it's label.\r\n */\r\nconst filterFieldsBasedOnAttributeType = (type: Schema.Attribute.Kind) => (field: InputProps) => {\r\n  switch (type) {\r\n    case 'blocks':\r\n    case 'richtext':\r\n      return field.name !== 'size' && field.name !== 'mainField';\r\n    case 'boolean':\r\n    case 'media':\r\n      return field.name !== 'placeholder' && field.name !== 'mainField';\r\n    case 'component':\r\n    case 'dynamiczone':\r\n      return field.name === 'label' || field.name === 'editable';\r\n    case 'json':\r\n      return field.name !== 'placeholder' && field.name !== 'mainField' && field.name !== 'size';\r\n    case 'relation':\r\n      return true;\r\n    default:\r\n      return field.name !== 'mainField';\r\n  }\r\n};\r\n\r\nexport { EditFieldForm };\r\nexport type { EditFieldFormProps };\r\n", "import * as React from 'react';\r\n\r\nimport {\r\n  Form,\r\n  FormProps,\r\n  useForm,\r\n  InputRenderer,\r\n  BackButton,\r\n  Layouts,\r\n} from '@strapi/admin/strapi-admin';\r\nimport { Button, Divider, Flex, Grid, Main, Typography } from '@strapi/design-system';\r\nimport { generateNKeysBetween } from 'fractional-indexing';\r\nimport pipe from 'lodash/fp/pipe';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { ATTRIBUTE_TYPES_THAT_CANNOT_BE_MAIN_FIELD } from '../../constants/attributes';\r\nimport { capitalise } from '../../utils/strings';\r\nimport { getTranslation } from '../../utils/translations';\r\n\r\nimport { Fields, FieldsProps, TEMP_FIELD_NAME } from './Fields';\r\n\r\nimport type { EditFieldLayout, EditLayout } from '../../hooks/useDocumentLayout';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ConfigurationForm\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface ConfigurationFormProps extends Pick<FieldsProps, 'attributes' | 'fieldSizes'> {\r\n  layout: EditLayout;\r\n  onSubmit: FormProps<ConfigurationFormData>['onSubmit'];\r\n}\r\n\r\n/**\r\n * Every key in EditFieldLayout is turned to optional never and then we overwrite the ones we are using.\r\n */\r\n\r\ntype EditFieldSpacerLayout = {\r\n  [key in keyof Omit<EditFieldLayout, 'name' | 'size'>]?: never;\r\n} & {\r\n  description?: never;\r\n  editable?: never;\r\n  name: '_TEMP_';\r\n  size: number;\r\n  __temp_key__: string;\r\n};\r\n\r\ninterface ConfigurationFormData extends Pick<EditLayout, 'settings'> {\r\n  layout: Array<{\r\n    __temp_key__: string;\r\n    children: Array<\r\n      | (Pick<EditFieldLayout, 'label' | 'size' | 'name' | 'placeholder' | 'mainField'> & {\r\n          description: EditFieldLayout['hint'];\r\n          editable: EditFieldLayout['disabled'];\r\n          __temp_key__: string;\r\n        })\r\n      | EditFieldSpacerLayout\r\n    >;\r\n  }>;\r\n}\r\n\r\nconst ConfigurationForm = ({\r\n  attributes,\r\n  fieldSizes,\r\n  layout: editLayout,\r\n  onSubmit,\r\n}: ConfigurationFormProps) => {\r\n  const { components, settings, layout, metadatas } = editLayout;\r\n\r\n  const { formatMessage } = useIntl();\r\n\r\n  const initialValues: ConfigurationFormData = React.useMemo(() => {\r\n    const transformations = pipe(\r\n      flattenPanels,\r\n      replaceMainFieldWithNameOnly,\r\n      extractMetadata,\r\n      addTmpSpaceToLayout,\r\n      addTmpKeysToLayout\r\n    );\r\n\r\n    return {\r\n      layout: transformations(layout),\r\n      settings,\r\n    };\r\n  }, [layout, settings]);\r\n\r\n  return (\r\n    <Layouts.Root>\r\n      <Main>\r\n        <Form initialValues={initialValues} onSubmit={onSubmit} method=\"PUT\">\r\n          <Header name={settings.displayName ?? ''} />\r\n          <Layouts.Content>\r\n            <Flex\r\n              alignItems=\"stretch\"\r\n              background=\"neutral0\"\r\n              direction=\"column\"\r\n              gap={6}\r\n              hasRadius\r\n              shadow=\"tableShadow\"\r\n              paddingTop={6}\r\n              paddingBottom={6}\r\n              paddingLeft={7}\r\n              paddingRight={7}\r\n            >\r\n              <Typography variant=\"delta\" tag=\"h2\">\r\n                {formatMessage({\r\n                  id: getTranslation('containers.SettingPage.settings'),\r\n                  defaultMessage: 'Settings',\r\n                })}\r\n              </Typography>\r\n              <Grid.Root>\r\n                <Grid.Item col={6} s={12} direction=\"column\" alignItems=\"stretch\">\r\n                  <InputRenderer\r\n                    type=\"enumeration\"\r\n                    label={formatMessage({\r\n                      id: getTranslation('containers.SettingPage.editSettings.entry.title'),\r\n                      defaultMessage: 'Entry title',\r\n                    })}\r\n                    hint={formatMessage({\r\n                      id: getTranslation(\r\n                        'containers.SettingPage.editSettings.entry.title.description'\r\n                      ),\r\n                      defaultMessage: 'Set the display field of your entry',\r\n                    })}\r\n                    name=\"settings.mainField\"\r\n                    options={Object.entries(attributes).reduce<\r\n                      Array<{ label: string; value: string }>\r\n                    >((acc, [key, attribute]) => {\r\n                      if (!attribute) {\r\n                        return acc;\r\n                      }\r\n\r\n                      /**\r\n                       * Create the list of attributes from the schema as to which can\r\n                       * be our `mainField` and dictate the display name of the schema\r\n                       * we're editing.\r\n                       */\r\n                      if (!ATTRIBUTE_TYPES_THAT_CANNOT_BE_MAIN_FIELD.includes(attribute.type)) {\r\n                        acc.push({\r\n                          label: key,\r\n                          value: key,\r\n                        });\r\n                      }\r\n\r\n                      return acc;\r\n                    }, [])}\r\n                  />\r\n                </Grid.Item>\r\n                <Grid.Item\r\n                  paddingTop={6}\r\n                  paddingBottom={6}\r\n                  col={12}\r\n                  s={12}\r\n                  direction=\"column\"\r\n                  alignItems=\"stretch\"\r\n                >\r\n                  <Divider />\r\n                </Grid.Item>\r\n                <Grid.Item col={12} s={12} direction=\"column\" alignItems=\"stretch\">\r\n                  <Typography variant=\"delta\" tag=\"h3\">\r\n                    {formatMessage({\r\n                      id: getTranslation('containers.SettingPage.view'),\r\n                      defaultMessage: 'View',\r\n                    })}\r\n                  </Typography>\r\n                </Grid.Item>\r\n                <Grid.Item col={12} s={12} direction=\"column\" alignItems=\"stretch\">\r\n                  <Fields\r\n                    attributes={attributes}\r\n                    components={components}\r\n                    fieldSizes={fieldSizes}\r\n                    metadatas={metadatas}\r\n                  />\r\n                </Grid.Item>\r\n              </Grid.Root>\r\n            </Flex>\r\n          </Layouts.Content>\r\n        </Form>\r\n      </Main>\r\n    </Layouts.Root>\r\n  );\r\n};\r\n\r\n/**\r\n * @internal\r\n * @description Panels don't exist in the layout, so we flatten by one.\r\n */\r\nconst flattenPanels = (layout: EditLayout['layout']): EditLayout['layout'][number] =>\r\n  layout.flat(1);\r\n\r\n/**\r\n * @internal\r\n * @description We don't need the mainField object in the layout, we only need the name.\r\n */\r\nconst replaceMainFieldWithNameOnly = (layout: EditLayout['layout'][number]) =>\r\n  layout.map((row) =>\r\n    row.map((field) => ({\r\n      ...field,\r\n      mainField: field.mainField?.name,\r\n    }))\r\n  );\r\n\r\n/**\r\n * @internal\r\n * @description We extract the metadata values from the field layout, because these are editable by the user.\r\n */\r\nconst extractMetadata = (\r\n  layout: EditLayout['layout'][number]\r\n): Array<Exclude<ConfigurationFormData['layout'], { name: '_TEMP_' }>[number]['children']> => {\r\n  return layout.map((row) =>\r\n    row.map(({ label, disabled, hint, placeholder, size, name, mainField }) => ({\r\n      label,\r\n      editable: !disabled,\r\n      description: hint,\r\n      mainField,\r\n      placeholder,\r\n      size,\r\n      name,\r\n      __temp_key__: '',\r\n    }))\r\n  );\r\n};\r\n\r\n/**\r\n * @internal\r\n * @description Each row of the layout has a max size of 12 (based on bootstrap grid system)\r\n * So in order to offer a better drop zone we add the _TEMP_ div to complete the remaining substract (12 - existing)\r\n */\r\nconst addTmpSpaceToLayout = (\r\n  layout: ReturnType<typeof extractMetadata>\r\n): Array<ConfigurationFormData['layout'][number]['children']> => [\r\n  ...layout.map((row) => {\r\n    const totalSpaceTaken = row.reduce((acc, field) => acc + field.size, 0);\r\n\r\n    if (totalSpaceTaken < 12) {\r\n      return [\r\n        ...row,\r\n        {\r\n          name: TEMP_FIELD_NAME,\r\n          size: 12 - totalSpaceTaken,\r\n          __temp_key__: '',\r\n        } satisfies EditFieldSpacerLayout,\r\n      ];\r\n    }\r\n\r\n    return row;\r\n  }),\r\n];\r\n\r\n/**\r\n * @internal\r\n * @description At this point of the transformations we have Field[][], but each row for the form should have a __temp_key__\r\n * applied. This means we need to change it so `Field` is nested under the children property.\r\n */\r\nconst addTmpKeysToLayout = (\r\n  layout: ReturnType<typeof addTmpSpaceToLayout>\r\n): ConfigurationFormData['layout'] => {\r\n  const keys = generateNKeysBetween(undefined, undefined, layout.length);\r\n\r\n  return layout.map((row, rowIndex) => {\r\n    const fieldKeys = generateNKeysBetween(undefined, undefined, row.length);\r\n\r\n    return {\r\n      __temp_key__: keys[rowIndex],\r\n      children: row.map((field, fieldIndex) => {\r\n        return {\r\n          ...field,\r\n          __temp_key__: fieldKeys[fieldIndex],\r\n        };\r\n      }),\r\n    };\r\n  });\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Header\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface HeaderProps {\r\n  name: string;\r\n}\r\n\r\nconst Header = ({ name }: HeaderProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const modified = useForm('Header', (state) => state.modified);\r\n  const isSubmitting = useForm('Header', (state) => state.isSubmitting);\r\n\r\n  return (\r\n    <Layouts.Header\r\n      title={formatMessage(\r\n        {\r\n          id: getTranslation('components.SettingsViewWrapper.pluginHeader.title'),\r\n          defaultMessage: `Configure the view - {name}`,\r\n        },\r\n        { name: capitalise(name) }\r\n      )}\r\n      subtitle={formatMessage({\r\n        id: getTranslation('components.SettingsViewWrapper.pluginHeader.description.edit-settings'),\r\n        defaultMessage: 'Customize how the edit view will look like.',\r\n      })}\r\n      navigationAction={<BackButton />}\r\n      primaryAction={\r\n        <Button disabled={!modified} loading={isSubmitting} type=\"submit\">\r\n          {formatMessage({ id: 'global.save', defaultMessage: 'Save' })}\r\n        </Button>\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport { ConfigurationForm };\r\nexport type { ConfigurationFormProps, ConfigurationFormData, EditFieldSpacerLayout };\r\n"],
  "mappings": "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",
  "names": ["create", "attribute", "import_jsx_runtime", "layout", "containers", "update", "_dndId", "React", "import_jsx_runtime", "pipe"]
}
