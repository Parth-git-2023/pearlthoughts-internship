import {
  useAdminRoles
} from "./chunk-J72EEJVE.js";
import {
  Permissions
} from "./chunk-46DYSJM5.js";
import "./chunk-3HP2AJLL.js";
import "./chunk-BLK5K7NI.js";
import "./chunk-WNTEWYDG.js";
import "./chunk-BUBZ6R5Z.js";
import {
  BackButton
} from "./chunk-6MHIA2XQ.js";
import {
  errorsTrads
} from "./chunk-X5YFDRMS.js";
import {
  useGetRolePermissionLayoutQuery,
  useGetRolePermissionsQuery,
  useUpdateRoleMutation,
  useUpdateRolePermissionsMutation
} from "./chunk-LVVND4TK.js";
import {
  Layouts
} from "./chunk-O6JJIRK6.js";
import {
  useTracking
} from "./chunk-DHQERSO6.js";
import "./chunk-GLPT7RON.js";
import "./chunk-54PZNGL6.js";
import {
  Page,
  useAPIErrorHandler
} from "./chunk-OUTHPJ5W.js";
import "./chunk-YQN4TQZU.js";
import {
  useTypedSelector
} from "./chunk-ITUTZMO4.js";
import {
  useNotification
} from "./chunk-S4GSJQUH.js";
import {
  isBaseQueryError
} from "./chunk-3CYOA7RQ.js";
import "./chunk-3Y3HZKRY.js";
import "./chunk-PR5W4YOM.js";
import {
  Navigate,
  useMatch
} from "./chunk-QOSJGLB6.js";
import {
  create4 as create,
  create7 as create2
} from "./chunk-WA6BWN3W.js";
import "./chunk-UCDGERJK.js";
import "./chunk-I7675365.js";
import "./chunk-EHBUXG3W.js";
import {
  Formik
} from "./chunk-5KTEVKJL.js";
import "./chunk-RYHDJ43U.js";
import "./chunk-GARU6WOT.js";
import "./chunk-2T3F2FEA.js";
import "./chunk-FBKW3ZX5.js";
import "./chunk-6XMPWYL4.js";
import "./chunk-4PYOUU3W.js";
import "./chunk-JNCTODJD.js";
import "./chunk-2VOUQL7N.js";
import "./chunk-XNLL4XTY.js";
import "./chunk-VJHHRLHY.js";
import "./chunk-HWWDZF4D.js";
import "./chunk-Z7WXACEM.js";
import "./chunk-PZKJYQOP.js";
import "./chunk-KTCYCI5X.js";
import "./chunk-4S6CO3NF.js";
import "./chunk-WZMMABOO.js";
import "./chunk-KU6R7J3L.js";
import "./chunk-ALOZZQWE.js";
import "./chunk-3XH2Q2B6.js";
import "./chunk-SM5ZDAVK.js";
import "./chunk-AAOWBC4P.js";
import "./chunk-AVUVASSG.js";
import "./chunk-DEZRKVMG.js";
import "./chunk-LDTLLP4K.js";
import "./chunk-CFOYKXNH.js";
import "./chunk-DWNGFC4T.js";
import "./chunk-PQYVQDZP.js";
import "./chunk-ZGAXZ2TY.js";
import "./chunk-6EUDYBNR.js";
import "./chunk-3KMG3VFU.js";
import "./chunk-UTVXCYRG.js";
import {
  Box,
  Button,
  Field,
  Flex,
  Grid,
  Main,
  TextInput,
  Textarea,
  Typography
} from "./chunk-3AUSDG4O.js";
import {
  ForwardRef$4N
} from "./chunk-F5I3ZVMF.js";
import "./chunk-FJZ2NJT6.js";
import "./chunk-VH7UJDNP.js";
import "./chunk-HG4QJCZT.js";
import "./chunk-I7DIJEXN.js";
import {
  useIntl
} from "./chunk-2BDXRWHF.js";
import "./chunk-SBRVGDJ6.js";
import "./chunk-YUZK7WZ2.js";
import "./chunk-NSR7OH4Q.js";
import "./chunk-ZCDXR5JO.js";
import "./chunk-47RN6QNY.js";
import "./chunk-IMHIZKPC.js";
import "./chunk-URNLJJFR.js";
import "./chunk-JHXWLAQ5.js";
import "./chunk-PWXBRFBA.js";
import "./chunk-MZAWSZWW.js";
import "./chunk-QIQU42WJ.js";
import "./chunk-XVBZSUZI.js";
import "./chunk-2NWCSGSS.js";
import {
  require_jsx_runtime
} from "./chunk-GAPF2DTI.js";
import {
  require_react
} from "./chunk-2ZN62OJX.js";
import "./chunk-IV5CMKTD.js";
import "./chunk-ENGB2K3X.js";
import "./chunk-ISIKDMAB.js";
import "./chunk-X5DDYWPV.js";
import "./chunk-TUHVKLNT.js";
import "./chunk-3POB64WN.js";
import "./chunk-63YMLYWU.js";
import "./chunk-YIY4KI6G.js";
import "./chunk-7CLWPW6Q.js";
import "./chunk-IVGYXB4P.js";
import "./chunk-H3WCXLKE.js";
import "./chunk-NDGNZ36Q.js";
import "./chunk-MNGCFISN.js";
import {
  __toESM
} from "./chunk-X6GFWOGJ.js";

// ../packages/core/admin/admin/src/pages/Settings/pages/Roles/EditPage.tsx
var React = __toESM(require_react());

// ../packages/core/admin/admin/src/pages/Settings/pages/Roles/components/RoleForm.tsx
var import_jsx_runtime = __toESM(require_jsx_runtime());
var RoleForm = ({ disabled, role, values, errors, onChange, onBlur }) => {
  const { formatMessage } = useIntl();
  return (0, import_jsx_runtime.jsx)(Box, { background: "neutral0", padding: 6, shadow: "filterShadow", hasRadius: true, children: (0, import_jsx_runtime.jsxs)(Flex, { direction: "column", alignItems: "stretch", gap: 4, children: [
    (0, import_jsx_runtime.jsxs)(Flex, { justifyContent: "space-between", children: [
      (0, import_jsx_runtime.jsxs)(Box, { children: [
        (0, import_jsx_runtime.jsx)(Box, { children: (0, import_jsx_runtime.jsx)(Typography, { fontWeight: "bold", children: role ? role.name : formatMessage({
          id: "global.details",
          defaultMessage: "Details"
        }) }) }),
        (0, import_jsx_runtime.jsx)(Box, { children: (0, import_jsx_runtime.jsx)(Typography, { textColor: "neutral500", variant: "pi", children: role ? role.description : formatMessage({
          id: "Settings.roles.form.description",
          defaultMessage: "Name and description of the role"
        }) }) })
      ] }),
      (0, import_jsx_runtime.jsx)(Button, { disabled: true, variant: "secondary", children: formatMessage(
        {
          id: "Settings.roles.form.button.users-with-role",
          defaultMessage: "{number, plural, =0 {# users} one {# user} other {# users}} with this role"
        },
        { number: role.usersCount }
      ) })
    ] }),
    (0, import_jsx_runtime.jsxs)(Grid.Root, { gap: 4, children: [
      (0, import_jsx_runtime.jsx)(Grid.Item, { col: 6, direction: "column", alignItems: "stretch", children: (0, import_jsx_runtime.jsxs)(
        Field.Root,
        {
          name: "name",
          error: errors.name && formatMessage({ id: errors.name }),
          required: true,
          children: [
            (0, import_jsx_runtime.jsx)(Field.Label, { children: formatMessage({
              id: "global.name",
              defaultMessage: "Name"
            }) }),
            (0, import_jsx_runtime.jsx)(
              TextInput,
              {
                disabled,
                onChange,
                onBlur,
                value: values.name || ""
              }
            ),
            (0, import_jsx_runtime.jsx)(Field.Error, {})
          ]
        }
      ) }),
      (0, import_jsx_runtime.jsx)(Grid.Item, { col: 6, direction: "column", alignItems: "stretch", children: (0, import_jsx_runtime.jsxs)(
        Field.Root,
        {
          name: "description",
          error: errors.description && formatMessage({ id: errors.description }),
          children: [
            (0, import_jsx_runtime.jsx)(Field.Label, { children: formatMessage({
              id: "global.description",
              defaultMessage: "Description"
            }) }),
            (0, import_jsx_runtime.jsx)(
              Textarea,
              {
                disabled,
                onChange,
                onBlur,
                value: values.description
              }
            ),
            (0, import_jsx_runtime.jsx)(Field.Error, {})
          ]
        }
      ) })
    ] })
  ] }) });
};

// ../packages/core/admin/admin/src/pages/Settings/pages/Roles/EditPage.tsx
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var EDIT_ROLE_SCHEMA = create2().shape({
  name: create().required(errorsTrads.required.id),
  description: create().optional()
});
var EditPage = () => {
  const { toggleNotification } = useNotification();
  const { formatMessage } = useIntl();
  const match = useMatch("/settings/roles/:id");
  const id = match == null ? void 0 : match.params.id;
  const permissionsRef = React.useRef(null);
  const { trackUsage } = useTracking();
  const {
    _unstableFormatAPIError: formatAPIError,
    _unstableFormatValidationErrors: formatValidationErrors
  } = useAPIErrorHandler();
  const { isLoading: isLoadingPermissionsLayout, data: permissionsLayout } = useGetRolePermissionLayoutQuery({
    /**
     * Role here is a query param so if there's no role we pass an empty string
     * which returns us a default layout.
     */
    role: id ?? ""
  });
  const {
    roles,
    isLoading: isRoleLoading,
    refetch: refetchRole
  } = useAdminRoles(
    { id },
    {
      refetchOnMountOrArgChange: true
    }
  );
  const role = roles[0] ?? {};
  const { data: permissions, isLoading: isLoadingPermissions } = useGetRolePermissionsQuery(
    {
      id
    },
    {
      skip: !id,
      refetchOnMountOrArgChange: true
    }
  );
  const [updateRole] = useUpdateRoleMutation();
  const [updateRolePermissions] = useUpdateRolePermissionsMutation();
  if (!id) {
    return (0, import_jsx_runtime2.jsx)(Navigate, { to: "/settings/roles" });
  }
  const handleEditRoleSubmit = async (data, formik) => {
    var _a, _b;
    try {
      const { permissionsToSend, didUpdateConditions } = ((_a = permissionsRef.current) == null ? void 0 : _a.getPermissions()) ?? {};
      const res = await updateRole({
        id,
        ...data
      });
      if ("error" in res) {
        if (isBaseQueryError(res.error) && res.error.name === "ValidationError") {
          formik.setErrors(formatValidationErrors(res.error));
        } else {
          toggleNotification({
            type: "danger",
            message: formatAPIError(res.error)
          });
        }
        return;
      }
      if (role.code !== "strapi-super-admin" && permissionsToSend) {
        const updateRes = await updateRolePermissions({
          id: res.data.id,
          permissions: permissionsToSend
        });
        if ("error" in updateRes) {
          if (isBaseQueryError(updateRes.error) && updateRes.error.name === "ValidationError") {
            formik.setErrors(formatValidationErrors(updateRes.error));
          } else {
            toggleNotification({
              type: "danger",
              message: formatAPIError(updateRes.error)
            });
          }
          return;
        }
        if (didUpdateConditions) {
          trackUsage("didUpdateConditions");
        }
      }
      (_b = permissionsRef.current) == null ? void 0 : _b.setFormAfterSubmit();
      await refetchRole();
      toggleNotification({
        type: "success",
        message: formatMessage({ id: "notification.success.saved" })
      });
    } catch (error) {
      toggleNotification({
        type: "danger",
        message: formatMessage({ id: "notification.error", defaultMessage: "An error occurred" })
      });
    }
  };
  const isFormDisabled = !isRoleLoading && role.code === "strapi-super-admin";
  if (isLoadingPermissionsLayout || isRoleLoading || isLoadingPermissions || !permissionsLayout) {
    return (0, import_jsx_runtime2.jsx)(Page.Loading, {});
  }
  return (0, import_jsx_runtime2.jsxs)(Main, { children: [
    (0, import_jsx_runtime2.jsx)(Page.Title, { children: formatMessage(
      { id: "Settings.PageTitle", defaultMessage: "Settings - {name}" },
      {
        name: "Roles"
      }
    ) }),
    (0, import_jsx_runtime2.jsx)(
      Formik,
      {
        enableReinitialize: true,
        initialValues: {
          name: role.name ?? "",
          description: role.description ?? ""
        },
        onSubmit: handleEditRoleSubmit,
        validationSchema: EDIT_ROLE_SCHEMA,
        validateOnChange: false,
        children: ({ handleSubmit, values, errors, handleChange, handleBlur, isSubmitting }) => (0, import_jsx_runtime2.jsxs)("form", { onSubmit: handleSubmit, children: [
          (0, import_jsx_runtime2.jsx)(
            Layouts.Header,
            {
              primaryAction: (0, import_jsx_runtime2.jsx)(Flex, { gap: 2, children: (0, import_jsx_runtime2.jsx)(
                Button,
                {
                  type: "submit",
                  startIcon: (0, import_jsx_runtime2.jsx)(ForwardRef$4N, {}),
                  disabled: role.code === "strapi-super-admin",
                  loading: isSubmitting,
                  children: formatMessage({
                    id: "global.save",
                    defaultMessage: "Save"
                  })
                }
              ) }),
              title: formatMessage({
                id: "Settings.roles.edit.title",
                defaultMessage: "Edit a role"
              }),
              subtitle: formatMessage({
                id: "Settings.roles.create.description",
                defaultMessage: "Define the rights given to the role"
              }),
              navigationAction: (0, import_jsx_runtime2.jsx)(BackButton, { fallback: "../roles" })
            }
          ),
          (0, import_jsx_runtime2.jsx)(Layouts.Content, { children: (0, import_jsx_runtime2.jsxs)(Flex, { direction: "column", alignItems: "stretch", gap: 6, children: [
            (0, import_jsx_runtime2.jsx)(
              RoleForm,
              {
                disabled: isFormDisabled,
                errors,
                values,
                onChange: handleChange,
                onBlur: handleBlur,
                role
              }
            ),
            (0, import_jsx_runtime2.jsx)(Box, { shadow: "filterShadow", hasRadius: true, children: (0, import_jsx_runtime2.jsx)(
              Permissions,
              {
                isFormDisabled,
                permissions,
                ref: permissionsRef,
                layout: permissionsLayout
              }
            ) })
          ] }) })
        ] })
      }
    )
  ] });
};
var ProtectedEditPage = () => {
  const permissions = useTypedSelector(
    (state) => {
      var _a;
      return (_a = state.admin_app.permissions.settings) == null ? void 0 : _a.roles.update;
    }
  );
  return (0, import_jsx_runtime2.jsx)(Page.Protect, { permissions, children: (0, import_jsx_runtime2.jsx)(EditPage, {}) });
};
export {
  EditPage,
  ProtectedEditPage
};
//# sourceMappingURL=EditPage-SOVQIVIL.js.map
