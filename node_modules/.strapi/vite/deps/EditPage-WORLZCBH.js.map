{
  "version": 3,
  "sources": ["../../../../../packages/core/admin/admin/src/pages/Settings/pages/Users/EditPage.tsx"],
  "sourcesContent": ["import * as React from 'react';\r\n\r\nimport { Box, Button, Flex, Grid, Typography } from '@strapi/design-system';\r\nimport { Check } from '@strapi/icons';\r\nimport pick from 'lodash/pick';\r\nimport { useIntl } from 'react-intl';\r\nimport { useMatch, useNavigate } from 'react-router-dom';\r\nimport * as yup from 'yup';\r\n\r\nimport { Update } from '../../../../../../shared/contracts/user';\r\nimport { Form, FormHelpers } from '../../../../components/Form';\r\nimport { InputRenderer } from '../../../../components/FormInputs/Renderer';\r\nimport { Layouts } from '../../../../components/Layouts/Layout';\r\nimport { Page } from '../../../../components/PageHelpers';\r\nimport { useTypedSelector } from '../../../../core/store/hooks';\r\nimport { BackButton } from '../../../../features/BackButton';\r\nimport { useNotification } from '../../../../features/Notifications';\r\nimport { useAPIErrorHandler } from '../../../../hooks/useAPIErrorHandler';\r\nimport { useEnterprise } from '../../../../hooks/useEnterprise';\r\nimport { useRBAC } from '../../../../hooks/useRBAC';\r\nimport { selectAdminPermissions } from '../../../../selectors';\r\nimport { useAdminUsers, useUpdateUserMutation } from '../../../../services/users';\r\nimport { isBaseQueryError } from '../../../../utils/baseQuery';\r\nimport { translatedErrors } from '../../../../utils/translatedErrors';\r\nimport { getDisplayName } from '../../../../utils/users';\r\n\r\nimport { MagicLinkCE } from './components/MagicLinkCE';\r\nimport { SelectRoles } from './components/SelectRoles';\r\nimport { COMMON_USER_SCHEMA } from './utils/validation';\r\n\r\nconst EDIT_VALIDATION_SCHEMA = yup.object().shape({\r\n  ...COMMON_USER_SCHEMA,\r\n  isActive: yup.bool(),\r\n  roles: yup\r\n    .array()\r\n    .min(1, {\r\n      id: translatedErrors.required.id,\r\n      defaultMessage: 'This field is required',\r\n    })\r\n    .required({\r\n      id: translatedErrors.required.id,\r\n      defaultMessage: 'This field is required',\r\n    }),\r\n});\r\n\r\nconst fieldsToPick = ['email', 'firstname', 'lastname', 'username', 'isActive', 'roles'] as const;\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * EditPage\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst EditPage = () => {\r\n  const { formatMessage } = useIntl();\r\n  const match = useMatch('/settings/users/:id');\r\n  const id = match?.params?.id ?? '';\r\n  const navigate = useNavigate();\r\n  const { toggleNotification } = useNotification();\r\n  const MagicLink = useEnterprise(\r\n    MagicLinkCE,\r\n    async () =>\r\n      (\r\n        await import(\r\n          '../../../../../../ee/admin/src/pages/SettingsPage/pages/Users/components/MagicLinkEE'\r\n        )\r\n      ).MagicLinkEE\r\n  );\r\n  const {\r\n    _unstableFormatAPIError: formatAPIError,\r\n    _unstableFormatValidationErrors: formatValidationErrors,\r\n  } = useAPIErrorHandler();\r\n\r\n  const permissions = useTypedSelector(selectAdminPermissions);\r\n\r\n  const {\r\n    isLoading: isLoadingRBAC,\r\n    allowedActions: { canUpdate },\r\n  } = useRBAC({\r\n    read: permissions.settings?.users.read ?? [],\r\n    update: permissions.settings?.users.update ?? [],\r\n  });\r\n\r\n  const [updateUser] = useUpdateUserMutation();\r\n\r\n  const {\r\n    data,\r\n    error,\r\n    isLoading: isLoadingAdminUsers,\r\n  } = useAdminUsers(\r\n    { id },\r\n    {\r\n      refetchOnMountOrArgChange: true,\r\n    }\r\n  );\r\n\r\n  const [user] = data?.users ?? [];\r\n\r\n  React.useEffect(() => {\r\n    if (error) {\r\n      // Redirect the user to the homepage if is not allowed to read\r\n      if (error.name === 'UnauthorizedError') {\r\n        toggleNotification({\r\n          type: 'info',\r\n          message: formatMessage({\r\n            id: 'notification.permission.not-allowed-read',\r\n            defaultMessage: 'You are not allowed to see this document',\r\n          }),\r\n        });\r\n\r\n        navigate('/');\r\n      } else {\r\n        toggleNotification({\r\n          type: 'danger',\r\n          message: formatAPIError(error),\r\n        });\r\n      }\r\n    }\r\n  }, [error, formatAPIError, formatMessage, navigate, toggleNotification]);\r\n\r\n  const isLoading = isLoadingAdminUsers || !MagicLink || isLoadingRBAC;\r\n\r\n  if (isLoading) {\r\n    return <Page.Loading />;\r\n  }\r\n\r\n  type InitialData = Pick<Update.Request['body'], (typeof fieldsToPick)[number]> & {\r\n    confirmPassword: string;\r\n    password: string;\r\n  };\r\n\r\n  const initialData = {\r\n    ...pick(user, fieldsToPick),\r\n    roles: user.roles.map(({ id }) => id),\r\n    password: '',\r\n    confirmPassword: '',\r\n  } satisfies InitialData;\r\n\r\n  const handleSubmit = async (body: InitialData, actions: FormHelpers<InitialData>) => {\r\n    const { confirmPassword: _confirmPassword, ...bodyRest } = body;\r\n\r\n    const res = await updateUser({\r\n      id,\r\n      ...bodyRest,\r\n    });\r\n\r\n    if ('error' in res && isBaseQueryError(res.error)) {\r\n      if (res.error.name === 'ValidationError') {\r\n        actions.setErrors(formatValidationErrors(res.error));\r\n      }\r\n\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatAPIError(res.error),\r\n      });\r\n    } else {\r\n      toggleNotification({\r\n        type: 'success',\r\n        message: formatMessage({ id: 'notification.success.saved', defaultMessage: 'Saved' }),\r\n      });\r\n\r\n      actions.setValues({\r\n        ...pick(body, fieldsToPick),\r\n        password: '',\r\n        confirmPassword: '',\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Page.Main>\r\n      <Page.Title>\r\n        {formatMessage(\r\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\r\n          {\r\n            name: 'Users',\r\n          }\r\n        )}\r\n      </Page.Title>\r\n      <Form\r\n        method=\"PUT\"\r\n        onSubmit={handleSubmit}\r\n        initialValues={initialData}\r\n        validationSchema={EDIT_VALIDATION_SCHEMA}\r\n      >\r\n        {({ isSubmitting, modified }) => {\r\n          return (\r\n            <>\r\n              <Layouts.Header\r\n                primaryAction={\r\n                  <Button\r\n                    disabled={isSubmitting || !canUpdate || !modified}\r\n                    startIcon={<Check />}\r\n                    loading={isSubmitting}\r\n                    type=\"submit\"\r\n                  >\r\n                    {formatMessage({ id: 'global.save', defaultMessage: 'Save' })}\r\n                  </Button>\r\n                }\r\n                title={formatMessage(\r\n                  {\r\n                    id: 'app.containers.Users.EditPage.header.label',\r\n                    defaultMessage: 'Edit {name}',\r\n                  },\r\n                  {\r\n                    // @ts-expect-error â€“ issues with the Entity ID type, still.\r\n                    name: getDisplayName(initialData),\r\n                  }\r\n                )}\r\n                navigationAction={<BackButton fallback=\"../users\" />}\r\n              />\r\n              <Layouts.Content>\r\n                {user?.registrationToken && (\r\n                  <Box paddingBottom={6}>\r\n                    <MagicLink registrationToken={user.registrationToken} />\r\n                  </Box>\r\n                )}\r\n                <Flex direction=\"column\" alignItems=\"stretch\" gap={7}>\r\n                  <Box\r\n                    background=\"neutral0\"\r\n                    hasRadius\r\n                    shadow=\"filterShadow\"\r\n                    paddingTop={6}\r\n                    paddingBottom={6}\r\n                    paddingLeft={7}\r\n                    paddingRight={7}\r\n                  >\r\n                    <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\r\n                      <Typography variant=\"delta\" tag=\"h2\">\r\n                        {formatMessage({\r\n                          id: 'app.components.Users.ModalCreateBody.block-title.details',\r\n                          defaultMessage: 'Details',\r\n                        })}\r\n                      </Typography>\r\n                      <Grid.Root gap={5}>\r\n                        {LAYOUT.map((row) =>\r\n                          row.map(({ size, label, ...field }) => {\r\n                            return (\r\n                              <Grid.Item\r\n                                key={field.name}\r\n                                col={size}\r\n                                direction=\"column\"\r\n                                alignItems=\"stretch\"\r\n                              >\r\n                                <InputRenderer\r\n                                  {...field}\r\n                                  disabled={!canUpdate}\r\n                                  label={formatMessage(label)}\r\n                                  placeholder={\r\n                                    'placeholder' in field\r\n                                      ? formatMessage(field.placeholder)\r\n                                      : undefined\r\n                                  }\r\n                                />\r\n                              </Grid.Item>\r\n                            );\r\n                          })\r\n                        )}\r\n                      </Grid.Root>\r\n                    </Flex>\r\n                  </Box>\r\n                  <Box\r\n                    background=\"neutral0\"\r\n                    hasRadius\r\n                    shadow=\"filterShadow\"\r\n                    paddingTop={6}\r\n                    paddingBottom={6}\r\n                    paddingLeft={7}\r\n                    paddingRight={7}\r\n                  >\r\n                    <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\r\n                      <Typography variant=\"delta\" tag=\"h2\">\r\n                        {formatMessage({\r\n                          id: 'global.roles',\r\n                          defaultMessage: \"User's role\",\r\n                        })}\r\n                      </Typography>\r\n                      <Grid.Root gap={5}>\r\n                        <Grid.Item col={6} xs={12} direction=\"column\" alignItems=\"stretch\">\r\n                          <SelectRoles disabled={!canUpdate} />\r\n                        </Grid.Item>\r\n                      </Grid.Root>\r\n                    </Flex>\r\n                  </Box>\r\n                </Flex>\r\n              </Layouts.Content>\r\n            </>\r\n          );\r\n        }}\r\n      </Form>\r\n    </Page.Main>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * EditPage LAYOUT\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst LAYOUT = [\r\n  [\r\n    {\r\n      label: {\r\n        id: 'Auth.form.firstname.label',\r\n        defaultMessage: 'First name',\r\n      },\r\n      name: 'firstname',\r\n      placeholder: {\r\n        id: 'Auth.form.firstname.placeholder',\r\n        defaultMessage: 'e.g. Kai',\r\n      },\r\n      type: 'string' as const,\r\n      size: 6,\r\n      required: true,\r\n    },\r\n    {\r\n      label: {\r\n        id: 'Auth.form.lastname.label',\r\n        defaultMessage: 'Last name',\r\n      },\r\n      name: 'lastname',\r\n      placeholder: {\r\n        id: 'Auth.form.lastname.placeholder',\r\n        defaultMessage: 'e.g. Doe',\r\n      },\r\n      type: 'string' as const,\r\n      size: 6,\r\n    },\r\n  ],\r\n  [\r\n    {\r\n      label: {\r\n        id: 'Auth.form.email.label',\r\n        defaultMessage: 'Email',\r\n      },\r\n      name: 'email',\r\n      placeholder: {\r\n        id: 'Auth.form.email.placeholder',\r\n        defaultMessage: 'e.g. kai.doe@strapi.io',\r\n      },\r\n      type: 'email' as const,\r\n      size: 6,\r\n      required: true,\r\n    },\r\n    {\r\n      label: {\r\n        id: 'Auth.form.username.label',\r\n        defaultMessage: 'Username',\r\n      },\r\n      name: 'username',\r\n      placeholder: {\r\n        id: 'Auth.form.username.placeholder',\r\n        defaultMessage: 'e.g. Kai_Doe',\r\n      },\r\n      type: 'string' as const,\r\n      size: 6,\r\n    },\r\n  ],\r\n  [\r\n    {\r\n      autoComplete: 'new-password',\r\n      label: {\r\n        id: 'global.password',\r\n        defaultMessage: 'Password',\r\n      },\r\n      name: 'password',\r\n      type: 'password' as const,\r\n      size: 6,\r\n    },\r\n    {\r\n      autoComplete: 'new-password',\r\n      label: {\r\n        id: 'Auth.form.confirmPassword.label',\r\n        defaultMessage: 'Password confirmation',\r\n      },\r\n      name: 'confirmPassword',\r\n      type: 'password' as const,\r\n      size: 6,\r\n    },\r\n  ],\r\n  [\r\n    {\r\n      label: {\r\n        id: 'Auth.form.active.label',\r\n        defaultMessage: 'Active',\r\n      },\r\n      name: 'isActive',\r\n      type: 'boolean' as const,\r\n      size: 6,\r\n    },\r\n  ],\r\n];\r\n\r\nconst ProtectedEditPage = () => {\r\n  const permissions = useTypedSelector((state) => state.admin_app.permissions.settings?.users.read);\r\n\r\n  return (\r\n    <Page.Protect permissions={permissions}>\r\n      <EditPage />\r\n    </Page.Protect>\r\n  );\r\n};\r\n\r\nexport { EditPage, ProtectedEditPage };\r\n"],
  "mappings": "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",
  "names": ["create", "pick", "id"]
}
