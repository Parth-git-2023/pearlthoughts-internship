{
  "version": 3,
  "sources": ["../../../../../packages/core/admin/admin/src/features/Configuration.tsx"],
  "sourcesContent": ["import * as React from 'react';\r\n\r\nimport { createContext } from '@radix-ui/react-context';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { UpdateProjectSettings } from '../../../shared/contracts/admin';\r\nimport { Page } from '../components/PageHelpers';\r\nimport { useTypedSelector } from '../core/store/hooks';\r\nimport { useAPIErrorHandler } from '../hooks/useAPIErrorHandler';\r\nimport { useRBAC } from '../hooks/useRBAC';\r\nimport {\r\n  ConfigurationLogo,\r\n  useInitQuery,\r\n  useProjectSettingsQuery,\r\n  useUpdateProjectSettingsMutation,\r\n} from '../services/admin';\r\n\r\nimport { useAuth } from './Auth';\r\nimport { useNotification } from './Notifications';\r\nimport { useTracking } from './Tracking';\r\n\r\nimport type { StrapiApp } from '../StrapiApp';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Configuration Context\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface UpdateProjectSettingsBody {\r\n  authLogo:\r\n    | ((UpdateProjectSettings.Request['body']['authLogo'] | ConfigurationLogo['custom']) & {\r\n        rawFile?: File;\r\n      })\r\n    | null;\r\n  menuLogo:\r\n    | ((UpdateProjectSettings.Request['body']['menuLogo'] | ConfigurationLogo['custom']) & {\r\n        rawFile?: File;\r\n      })\r\n    | null;\r\n}\r\n\r\ninterface ConfigurationContextValue {\r\n  logos: {\r\n    auth: ConfigurationLogo;\r\n    menu: ConfigurationLogo;\r\n  };\r\n  showReleaseNotification: boolean;\r\n  updateProjectSettings: (body: UpdateProjectSettingsBody) => Promise<void>;\r\n}\r\n\r\nconst [ConfigurationContextProvider, useConfiguration] =\r\n  createContext<ConfigurationContextValue>('ConfigurationContext');\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ConfigurationProvider\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface ConfigurationProviderProps {\r\n  children: React.ReactNode;\r\n  defaultAuthLogo: StrapiApp['configurations']['authLogo'];\r\n  defaultMenuLogo: StrapiApp['configurations']['menuLogo'];\r\n  showReleaseNotification?: boolean;\r\n}\r\n\r\nconst ConfigurationProvider = ({\r\n  children,\r\n  defaultAuthLogo,\r\n  defaultMenuLogo,\r\n  showReleaseNotification = false,\r\n}: ConfigurationProviderProps) => {\r\n  const { trackUsage } = useTracking();\r\n  const { formatMessage } = useIntl();\r\n  const { toggleNotification } = useNotification();\r\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\r\n  const permissions = useTypedSelector(\r\n    (state) => state.admin_app.permissions.settings?.['project-settings']\r\n  );\r\n  const token = useAuth('ConfigurationProvider', (state) => state.token);\r\n\r\n  const {\r\n    allowedActions: { canRead },\r\n  } = useRBAC(permissions);\r\n\r\n  const {\r\n    data: { authLogo: customAuthLogo, menuLogo: customMenuLogo } = {},\r\n    error,\r\n    isLoading,\r\n  } = useInitQuery();\r\n\r\n  React.useEffect(() => {\r\n    if (error) {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatMessage({ id: 'app.containers.App.notification.error.init' }),\r\n      });\r\n    }\r\n  }, [error, formatMessage, toggleNotification]);\r\n\r\n  const { data, isSuccess } = useProjectSettingsQuery(undefined, {\r\n    skip: !token || !canRead,\r\n  });\r\n\r\n  const [updateProjectSettingsMutation] = useUpdateProjectSettingsMutation();\r\n\r\n  const updateProjectSettings = React.useCallback(\r\n    async (body: UpdateProjectSettingsBody) => {\r\n      const formData = new FormData();\r\n\r\n      /**\r\n       * We either only send files or we send null values.\r\n       * Null removes the logo. If you don't want to effect\r\n       * an existing logo, don't send anything.\r\n       */\r\n      Object.entries(body).forEach(([key, value]) => {\r\n        if (value?.rawFile) {\r\n          formData.append(key, value.rawFile);\r\n        } else if (value === null) {\r\n          formData.append(key, JSON.stringify(value));\r\n        }\r\n      });\r\n\r\n      const res = await updateProjectSettingsMutation(formData);\r\n\r\n      if ('data' in res) {\r\n        const updatedMenuLogo = !!res.data.menuLogo && !!body.menuLogo?.rawFile;\r\n        const updatedAuthLogo = !!res.data.authLogo && !!body.authLogo?.rawFile;\r\n\r\n        if (updatedMenuLogo) {\r\n          trackUsage('didChangeLogo', {\r\n            logo: 'menu',\r\n          });\r\n        }\r\n\r\n        if (updatedAuthLogo) {\r\n          trackUsage('didChangeLogo', {\r\n            logo: 'auth',\r\n          });\r\n        }\r\n\r\n        toggleNotification({\r\n          type: 'success',\r\n          message: formatMessage({ id: 'app', defaultMessage: 'Saved' }),\r\n        });\r\n      } else {\r\n        toggleNotification({\r\n          type: 'danger',\r\n          message: formatAPIError(res.error),\r\n        });\r\n      }\r\n    },\r\n    [formatAPIError, formatMessage, toggleNotification, trackUsage, updateProjectSettingsMutation]\r\n  );\r\n\r\n  if (isLoading) {\r\n    return <Page.Loading />;\r\n  }\r\n\r\n  return (\r\n    <ConfigurationContextProvider\r\n      showReleaseNotification={showReleaseNotification}\r\n      logos={{\r\n        menu: {\r\n          custom: isSuccess\r\n            ? data?.menuLogo\r\n            : {\r\n                url: customMenuLogo ?? '',\r\n              },\r\n          default: defaultMenuLogo,\r\n        },\r\n        auth: {\r\n          custom: isSuccess\r\n            ? data?.authLogo\r\n            : {\r\n                url: customAuthLogo ?? '',\r\n              },\r\n          default: defaultAuthLogo,\r\n        },\r\n      }}\r\n      updateProjectSettings={updateProjectSettings}\r\n    >\r\n      {children}\r\n    </ConfigurationContextProvider>\r\n  );\r\n};\r\n\r\nexport {\r\n  ConfigurationContextProvider as _internalConfigurationContextProvider,\r\n  ConfigurationProvider,\r\n  useConfiguration,\r\n};\r\nexport type {\r\n  ConfigurationProviderProps,\r\n  ConfigurationContextValue,\r\n  ConfigurationLogo,\r\n  UpdateProjectSettingsBody,\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
