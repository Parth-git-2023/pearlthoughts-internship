import {
  selectAdminPermissions
} from "./chunk-LXFYASOI.js";
import {
  useLicenseLimits
} from "./chunk-WCUETHLG.js";
import {
  useRBAC
} from "./chunk-PJGZMO5F.js";
import "./chunk-GLPT7RON.js";
import "./chunk-54PZNGL6.js";
import "./chunk-YQN4TQZU.js";
import "./chunk-ITUTZMO4.js";
import "./chunk-3CYOA7RQ.js";
import "./chunk-PR5W4YOM.js";
import "./chunk-QOSJGLB6.js";
import "./chunk-XNLL4XTY.js";
import "./chunk-VJHHRLHY.js";
import {
  useSelector
} from "./chunk-HWWDZF4D.js";
import "./chunk-Z7WXACEM.js";
import "./chunk-PZKJYQOP.js";
import "./chunk-KTCYCI5X.js";
import "./chunk-4S6CO3NF.js";
import "./chunk-WZMMABOO.js";
import "./chunk-KU6R7J3L.js";
import "./chunk-ALOZZQWE.js";
import "./chunk-3XH2Q2B6.js";
import "./chunk-SM5ZDAVK.js";
import "./chunk-AAOWBC4P.js";
import "./chunk-AVUVASSG.js";
import "./chunk-DEZRKVMG.js";
import "./chunk-LDTLLP4K.js";
import "./chunk-CFOYKXNH.js";
import "./chunk-DWNGFC4T.js";
import "./chunk-PQYVQDZP.js";
import "./chunk-ZGAXZ2TY.js";
import "./chunk-6EUDYBNR.js";
import "./chunk-3KMG3VFU.js";
import "./chunk-UTVXCYRG.js";
import {
  Flex,
  Grid,
  Link,
  TooltipImpl,
  Typography
} from "./chunk-3AUSDG4O.js";
import {
  ForwardRef$3N,
  ForwardRef$5
} from "./chunk-F5I3ZVMF.js";
import "./chunk-FJZ2NJT6.js";
import "./chunk-VH7UJDNP.js";
import "./chunk-HG4QJCZT.js";
import "./chunk-I7DIJEXN.js";
import {
  useIntl
} from "./chunk-2BDXRWHF.js";
import "./chunk-SBRVGDJ6.js";
import "./chunk-YUZK7WZ2.js";
import "./chunk-NSR7OH4Q.js";
import "./chunk-ZCDXR5JO.js";
import "./chunk-47RN6QNY.js";
import "./chunk-IMHIZKPC.js";
import "./chunk-URNLJJFR.js";
import "./chunk-JHXWLAQ5.js";
import "./chunk-PWXBRFBA.js";
import "./chunk-MZAWSZWW.js";
import "./chunk-QIQU42WJ.js";
import "./chunk-XVBZSUZI.js";
import {
  require_jsx_runtime
} from "./chunk-GAPF2DTI.js";
import "./chunk-2ZN62OJX.js";
import "./chunk-IV5CMKTD.js";
import "./chunk-ENGB2K3X.js";
import "./chunk-ISIKDMAB.js";
import "./chunk-X5DDYWPV.js";
import "./chunk-TUHVKLNT.js";
import "./chunk-3POB64WN.js";
import "./chunk-63YMLYWU.js";
import "./chunk-YIY4KI6G.js";
import "./chunk-7CLWPW6Q.js";
import "./chunk-IVGYXB4P.js";
import "./chunk-H3WCXLKE.js";
import "./chunk-NDGNZ36Q.js";
import "./chunk-MNGCFISN.js";
import {
  __toESM
} from "./chunk-X6GFWOGJ.js";

// ../packages/core/admin/ee/admin/src/pages/SettingsPage/pages/ApplicationInfoPage/components/AdminSeatInfo.tsx
var import_jsx_runtime = __toESM(require_jsx_runtime());
var BILLING_SELF_HOSTED_URL = "https://strapi.io/billing/request-seats";
var MANAGE_SEATS_URL = "https://strapi.io/billing/manage-seats";
var AdminSeatInfoEE = () => {
  const { formatMessage } = useIntl();
  const { settings } = useSelector(selectAdminPermissions);
  const {
    isLoading: isRBACLoading,
    allowedActions: { canRead, canCreate, canUpdate, canDelete }
  } = useRBAC((settings == null ? void 0 : settings.users) ?? {});
  const {
    license,
    isError,
    isLoading: isLicenseLoading
  } = useLicenseLimits({
    // TODO: this creates a waterfall which we should avoid to render earlier, but for that
    // we will have to move away from data-fetching hooks to query functions.
    // Short-term we could at least implement a loader, for the user to have visual feedback
    // in case the requests take a while
    enabled: !isRBACLoading && canRead && canCreate && canUpdate && canDelete
  });
  const isLoading = isRBACLoading || isLicenseLoading;
  if (isError || isLoading || !license) {
    return null;
  }
  const { licenseLimitStatus, enforcementUserCount, permittedSeats, type } = license;
  if (!permittedSeats) {
    return null;
  }
  return (0, import_jsx_runtime.jsxs)(Grid.Item, { col: 6, s: 12, direction: "column", alignItems: "stretch", children: [
    (0, import_jsx_runtime.jsx)(Typography, { variant: "sigma", textColor: "neutral600", children: formatMessage({
      id: "Settings.application.admin-seats",
      defaultMessage: "Admin seats"
    }) }),
    (0, import_jsx_runtime.jsxs)(Flex, { gap: 2, children: [
      (0, import_jsx_runtime.jsx)(Flex, { children: (0, import_jsx_runtime.jsx)(Typography, { tag: "p", children: formatMessage(
        {
          id: "Settings.application.ee.admin-seats.count",
          defaultMessage: "<text>{enforcementUserCount}</text>/{permittedSeats}"
        },
        {
          permittedSeats,
          enforcementUserCount,
          text: (chunks) => (0, import_jsx_runtime.jsx)(
            Typography,
            {
              fontWeight: "semiBold",
              textColor: enforcementUserCount > permittedSeats ? "danger500" : void 0,
              children: chunks
            }
          )
        }
      ) }) }),
      licenseLimitStatus === "OVER_LIMIT" && (0, import_jsx_runtime.jsx)(
        TooltipImpl,
        {
          label: formatMessage({
            id: "Settings.application.ee.admin-seats.at-limit-tooltip",
            defaultMessage: "At limit: add seats to invite more users"
          }),
          children: (0, import_jsx_runtime.jsx)(ForwardRef$5, { width: "1.4rem", height: "1.4rem", fill: "danger500" })
        }
      )
    ] }),
    type === "gold" ? (0, import_jsx_runtime.jsx)(Link, { href: BILLING_SELF_HOSTED_URL, endIcon: (0, import_jsx_runtime.jsx)(ForwardRef$3N, {}), children: formatMessage({
      id: "Settings.application.ee.admin-seats.support",
      defaultMessage: "Contact sales"
    }) }) : (0, import_jsx_runtime.jsx)(Link, { href: MANAGE_SEATS_URL, isExternal: true, endIcon: (0, import_jsx_runtime.jsx)(ForwardRef$3N, {}), children: formatMessage({
      id: "Settings.application.ee.admin-seats.add-seats",
      defaultMessage: "Manage seats"
    }) })
  ] });
};
export {
  AdminSeatInfoEE
};
//# sourceMappingURL=AdminSeatInfo-EC4UCIDE.js.map
