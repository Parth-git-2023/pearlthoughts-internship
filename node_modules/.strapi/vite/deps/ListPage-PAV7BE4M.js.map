{
  "version": 3,
  "sources": ["../../../../../packages/core/admin/ee/admin/src/pages/SettingsPage/pages/AuditLogs/components/Modal.tsx", "../../../../../packages/core/admin/ee/admin/src/services/auditLogs.ts", "../../../../../packages/core/admin/ee/admin/src/pages/SettingsPage/pages/AuditLogs/hooks/useFormatTimeStamp.ts", "../../../../../packages/core/admin/ee/admin/src/pages/SettingsPage/pages/AuditLogs/utils/getActionTypesDefaultMessages.ts", "../../../../../packages/core/admin/ee/admin/src/pages/SettingsPage/pages/AuditLogs/hooks/useAuditLogsData.ts", "../../../../../packages/core/admin/ee/admin/src/pages/SettingsPage/pages/AuditLogs/components/ComboboxFilter.tsx", "../../../../../packages/core/admin/ee/admin/src/pages/SettingsPage/pages/AuditLogs/utils/getDisplayedFilters.ts", "../../../../../packages/core/admin/ee/admin/src/pages/SettingsPage/pages/AuditLogs/ListPage.tsx"],
  "sourcesContent": ["import * as React from 'react';\r\n\r\nimport {\r\n  Box,\r\n  Flex,\r\n  Grid,\r\n  JSONInput,\r\n  Loader,\r\n  Modal as DSModal,\r\n  Typography,\r\n  Breadcrumbs,\r\n  Crumb,\r\n  Field,\r\n} from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { useNotification } from '../../../../../../../../admin/src/features/Notifications';\r\nimport { useAPIErrorHandler } from '../../../../../../../../admin/src/hooks/useAPIErrorHandler';\r\nimport { AuditLog } from '../../../../../../../../shared/contracts/audit-logs';\r\nimport { useGetAuditLogQuery } from '../../../../../services/auditLogs';\r\nimport { useFormatTimeStamp } from '../hooks/useFormatTimeStamp';\r\nimport { actionTypes, getDefaultMessage } from '../utils/getActionTypesDefaultMessages';\r\n\r\ninterface ModalProps {\r\n  handleClose: () => void;\r\n  logId: string;\r\n}\r\n\r\nexport const Modal = ({ handleClose, logId }: ModalProps) => {\r\n  const { toggleNotification } = useNotification();\r\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\r\n\r\n  const { data, error, isLoading } = useGetAuditLogQuery(logId);\r\n\r\n  React.useEffect(() => {\r\n    if (error) {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatAPIError(error),\r\n      });\r\n      handleClose();\r\n    }\r\n  }, [error, formatAPIError, handleClose, toggleNotification]);\r\n\r\n  const formatTimeStamp = useFormatTimeStamp();\r\n  const formattedDate = data && 'date' in data ? formatTimeStamp(data.date) : '';\r\n\r\n  return (\r\n    <DSModal.Root defaultOpen onOpenChange={handleClose}>\r\n      <DSModal.Content>\r\n        <DSModal.Header>\r\n          {/**\r\n           * TODO: this is not semantically correct and should be amended.\r\n           */}\r\n          <Breadcrumbs label={formattedDate} id=\"title\">\r\n            <Crumb isCurrent>{formattedDate}</Crumb>\r\n          </Breadcrumbs>\r\n        </DSModal.Header>\r\n        <DSModal.Body>\r\n          <ActionBody isLoading={isLoading} data={data as AuditLog} formattedDate={formattedDate} />\r\n        </DSModal.Body>\r\n      </DSModal.Content>\r\n    </DSModal.Root>\r\n  );\r\n};\r\n\r\ninterface ActionBodyProps {\r\n  isLoading?: boolean;\r\n  data: AuditLog;\r\n  formattedDate: string;\r\n}\r\n\r\nconst ActionBody = ({ isLoading, data, formattedDate }: ActionBodyProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <Flex padding={7} justifyContent=\"center\" alignItems=\"center\">\r\n        {/**\r\n         * TODO: this will need to be translated.\r\n         */}\r\n        <Loader>Loading content...</Loader>\r\n      </Flex>\r\n    );\r\n  }\r\n\r\n  const { action, user, payload } = data;\r\n\r\n  return (\r\n    <>\r\n      <Box marginBottom={3}>\r\n        <Typography variant=\"delta\" id=\"title\">\r\n          {formatMessage({\r\n            id: 'Settings.permissions.auditLogs.details',\r\n            defaultMessage: 'Log Details',\r\n          })}\r\n        </Typography>\r\n      </Box>\r\n      <Grid.Root\r\n        gap={4}\r\n        gridCols={2}\r\n        paddingTop={4}\r\n        paddingBottom={4}\r\n        paddingLeft={6}\r\n        paddingRight={6}\r\n        marginBottom={4}\r\n        background=\"neutral100\"\r\n        hasRadius\r\n      >\r\n        <ActionItem\r\n          actionLabel={formatMessage({\r\n            id: 'Settings.permissions.auditLogs.action',\r\n            defaultMessage: 'Action',\r\n          })}\r\n          actionName={formatMessage(\r\n            {\r\n              id: `Settings.permissions.auditLogs.${action}`,\r\n              defaultMessage: getDefaultMessage(action as keyof typeof actionTypes),\r\n            },\r\n            // @ts-expect-error - any\r\n            { model: payload?.model }\r\n          )}\r\n        />\r\n        <ActionItem\r\n          actionLabel={formatMessage({\r\n            id: 'Settings.permissions.auditLogs.date',\r\n            defaultMessage: 'Date',\r\n          })}\r\n          actionName={formattedDate}\r\n        />\r\n        <ActionItem\r\n          actionLabel={formatMessage({\r\n            id: 'Settings.permissions.auditLogs.user',\r\n            defaultMessage: 'User',\r\n          })}\r\n          actionName={user?.displayName || '-'}\r\n        />\r\n        <ActionItem\r\n          actionLabel={formatMessage({\r\n            id: 'Settings.permissions.auditLogs.userId',\r\n            defaultMessage: 'User ID',\r\n          })}\r\n          actionName={user?.id.toString() || '-'}\r\n        />\r\n      </Grid.Root>\r\n      <Field.Root>\r\n        <Field.Label>\r\n          {formatMessage({\r\n            id: 'Settings.permissions.auditLogs.payload',\r\n            defaultMessage: 'Payload',\r\n          })}\r\n        </Field.Label>\r\n        <Payload value={JSON.stringify(payload, null, 2)} disabled />\r\n      </Field.Root>\r\n    </>\r\n  );\r\n};\r\n\r\nconst Payload = styled(JSONInput)`\r\n  max-width: 100%;\r\n  overflow: scroll;\r\n`;\r\n\r\ninterface ActionItemProps {\r\n  actionLabel: string;\r\n  actionName: string;\r\n}\r\n\r\nconst ActionItem = ({ actionLabel, actionName }: ActionItemProps) => {\r\n  return (\r\n    <Flex direction=\"column\" alignItems=\"baseline\" gap={1}>\r\n      <Typography textColor=\"neutral600\" variant=\"sigma\">\r\n        {actionLabel}\r\n      </Typography>\r\n      <Typography textColor=\"neutral600\">{actionName}</Typography>\r\n    </Flex>\r\n  );\r\n};\r\n", "import { adminApi } from '../../../../admin/src/services/api';\r\nimport * as AuditLogs from '../../../../shared/contracts/audit-logs';\r\n\r\nconst auditLogsService = adminApi.injectEndpoints({\r\n  endpoints: (builder) => ({\r\n    getAuditLogs: builder.query<AuditLogs.GetAll.Response, AuditLogs.GetAll.Request['query']>({\r\n      query: (params) => ({\r\n        url: `/admin/audit-logs`,\r\n        config: {\r\n          params,\r\n        },\r\n      }),\r\n    }),\r\n    getAuditLog: builder.query<AuditLogs.Get.Response, AuditLogs.Get.Params['id']>({\r\n      query: (id) => `/admin/audit-logs/${id}`,\r\n    }),\r\n  }),\r\n  overrideExisting: false,\r\n});\r\n\r\nconst { useGetAuditLogsQuery, useGetAuditLogQuery } = auditLogsService;\r\n\r\nexport { useGetAuditLogsQuery, useGetAuditLogQuery };\r\n", "import parseISO from 'date-fns/parseISO';\r\nimport { useIntl } from 'react-intl';\r\n\r\nexport const useFormatTimeStamp = () => {\r\n  const { formatDate } = useIntl();\r\n\r\n  const formatTimeStamp = (value: string) => {\r\n    const date = parseISO(value);\r\n\r\n    const formattedDate = formatDate(date, {\r\n      dateStyle: 'long',\r\n    });\r\n    const formattedTime = formatDate(date, {\r\n      timeStyle: 'medium',\r\n      hourCycle: 'h24',\r\n    });\r\n\r\n    return `${formattedDate}, ${formattedTime}`;\r\n  };\r\n\r\n  return formatTimeStamp;\r\n};\r\n", "export const actionTypes = {\r\n  'entry.create': 'Create entry{model, select, undefined {} other { ({model})}}',\r\n  'entry.update': 'Update entry{model, select, undefined {} other { ({model})}}',\r\n  'entry.delete': 'Delete entry{model, select, undefined {} other { ({model})}}',\r\n  'entry.publish': 'Publish entry{model, select, undefined {} other { ({model})}}',\r\n  'entry.unpublish': 'Unpublish entry{model, select, undefined {} other { ({model})}}',\r\n  'media.create': 'Create media',\r\n  'media.update': 'Update media',\r\n  'media.delete': 'Delete media',\r\n  'media-folder.create': 'Create media folder',\r\n  'media-folder.update': 'Update media folder',\r\n  'media-folder.delete': 'Delete media folder',\r\n  'user.create': 'Create user',\r\n  'user.update': 'Update user',\r\n  'user.delete': 'Delete user',\r\n  'admin.auth.success': 'Admin login',\r\n  'admin.logout': 'Admin logout',\r\n  'content-type.create': 'Create content type',\r\n  'content-type.update': 'Update content type',\r\n  'content-type.delete': 'Delete content type',\r\n  'component.create': 'Create component',\r\n  'component.update': 'Update component',\r\n  'component.delete': 'Delete component',\r\n  'role.create': 'Create role',\r\n  'role.update': 'Update role',\r\n  'role.delete': 'Delete role',\r\n  'permission.create': 'Create permission',\r\n  'permission.update': 'Update permission',\r\n  'permission.delete': 'Delete permission',\r\n};\r\n\r\nexport const getDefaultMessage = (value: keyof typeof actionTypes) => {\r\n  return actionTypes[value] || value;\r\n};\r\n", "import * as React from 'react';\r\n\r\nimport { useNotification } from '../../../../../../../../admin/src/features/Notifications';\r\nimport { useAPIErrorHandler } from '../../../../../../../../admin/src/hooks/useAPIErrorHandler';\r\nimport { useQueryParams } from '../../../../../../../../admin/src/hooks/useQueryParams';\r\nimport { useAdminUsers } from '../../../../../../../../admin/src/services/users';\r\nimport { useGetAuditLogsQuery } from '../../../../../services/auditLogs';\r\n\r\nexport const useAuditLogsData = ({\r\n  canReadAuditLogs,\r\n  canReadUsers,\r\n}: {\r\n  canReadAuditLogs: boolean;\r\n  canReadUsers: boolean;\r\n}) => {\r\n  const { toggleNotification } = useNotification();\r\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\r\n  const [{ query }] = useQueryParams();\r\n\r\n  const {\r\n    data,\r\n    error,\r\n    isError: isUsersError,\r\n    isLoading: isLoadingUsers,\r\n  } = useAdminUsers(\r\n    {},\r\n    {\r\n      skip: !canReadUsers,\r\n      refetchOnMountOrArgChange: true,\r\n    }\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    if (error) {\r\n      toggleNotification({ type: 'danger', message: formatAPIError(error) });\r\n    }\r\n  }, [error, toggleNotification, formatAPIError]);\r\n\r\n  const {\r\n    data: auditLogs,\r\n    isLoading: isLoadingAuditLogs,\r\n    isError: isAuditLogsError,\r\n    error: auditLogsError,\r\n  } = useGetAuditLogsQuery(query, {\r\n    refetchOnMountOrArgChange: true,\r\n    skip: !canReadAuditLogs,\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    if (auditLogsError) {\r\n      toggleNotification({ type: 'danger', message: formatAPIError(auditLogsError) });\r\n    }\r\n  }, [auditLogsError, toggleNotification, formatAPIError]);\r\n\r\n  return {\r\n    auditLogs,\r\n    users: data?.users ?? [],\r\n    isLoading: isLoadingUsers || isLoadingAuditLogs,\r\n    hasError: isAuditLogsError || isUsersError,\r\n  };\r\n};\r\n", "import { Combobox, ComboboxOption } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { Filters } from '../../../../../../../../admin/src/components/Filters';\r\nimport { useField } from '../../../../../../../../admin/src/components/Form';\r\n\r\nexport const ComboboxFilter = (props: Filters.ValueInputProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const field = useField(props.name);\r\n  const ariaLabel = formatMessage({\r\n    id: 'Settings.permissions.auditLogs.filter.aria-label',\r\n    defaultMessage: 'Search and select an option to filter',\r\n  });\r\n\r\n  const handleChange = (value?: string) => {\r\n    field.onChange(props.name, value);\r\n  };\r\n\r\n  return (\r\n    <Combobox aria-label={ariaLabel} value={field.value} onChange={handleChange}>\r\n      {props.options?.map((opt) => {\r\n        const value = typeof opt === 'string' ? opt : opt.value;\r\n        const label = typeof opt === 'string' ? opt : opt.label;\r\n        return (\r\n          <ComboboxOption key={value} value={value}>\r\n            {label}\r\n          </ComboboxOption>\r\n        );\r\n      })}\r\n    </Combobox>\r\n  );\r\n};\r\n", "import { IntlShape } from 'react-intl';\r\n\r\nimport { Filters } from '../../../../../../../../admin/src/components/Filters';\r\nimport { getDisplayName } from '../../../../../../../../admin/src/utils/users';\r\nimport { SanitizedAdminUser } from '../../../../../../../../shared/contracts/shared';\r\nimport { ComboboxFilter } from '../components/ComboboxFilter';\r\n\r\nimport { actionTypes, getDefaultMessage } from './getActionTypesDefaultMessages';\r\n\r\nexport const getDisplayedFilters = ({\r\n  formatMessage,\r\n  users,\r\n  canReadUsers,\r\n}: {\r\n  formatMessage: IntlShape['formatMessage'];\r\n  users: SanitizedAdminUser[];\r\n  canReadUsers: boolean;\r\n}): Filters.Filter[] => {\r\n  const operators = [\r\n    {\r\n      label: formatMessage({\r\n        id: 'components.FilterOptions.FILTER_TYPES.$eq',\r\n        defaultMessage: 'is',\r\n      }),\r\n      value: '$eq',\r\n    },\r\n    {\r\n      label: formatMessage({\r\n        id: 'components.FilterOptions.FILTER_TYPES.$ne',\r\n        defaultMessage: 'is not',\r\n      }),\r\n      value: '$ne',\r\n    },\r\n  ] as NonNullable<Filters.Filter['operators']>;\r\n\r\n  const filters = [\r\n    {\r\n      input: ComboboxFilter,\r\n      label: formatMessage({\r\n        id: 'Settings.permissions.auditLogs.action',\r\n        defaultMessage: 'Action',\r\n      }),\r\n      name: 'action',\r\n      operators,\r\n      options: (Object.keys(actionTypes) as (keyof typeof actionTypes)[]).map((action) => ({\r\n        label: formatMessage(\r\n          {\r\n            id: `Settings.permissions.auditLogs.${action}`,\r\n            defaultMessage: getDefaultMessage(action),\r\n          },\r\n          { model: undefined }\r\n        ),\r\n        value: action,\r\n      })),\r\n      type: 'enumeration',\r\n    },\r\n    {\r\n      label: formatMessage({\r\n        id: 'Settings.permissions.auditLogs.date',\r\n        defaultMessage: 'Date',\r\n      }),\r\n      name: 'date',\r\n      type: 'datetime',\r\n    },\r\n  ] satisfies Filters.Filter[];\r\n\r\n  if (canReadUsers && users) {\r\n    return [\r\n      ...filters,\r\n      {\r\n        input: ComboboxFilter,\r\n        label: formatMessage({\r\n          id: 'Settings.permissions.auditLogs.user',\r\n          defaultMessage: 'User',\r\n        }),\r\n        mainField: { name: 'id', type: 'integer' },\r\n        name: 'user',\r\n        operators,\r\n        options: users.map((user) => ({\r\n          label: getDisplayName(user),\r\n          value: user.id.toString(),\r\n        })),\r\n        type: 'relation',\r\n      } satisfies Filters.Filter,\r\n    ];\r\n  }\r\n\r\n  return filters;\r\n};\r\n", "import { Flex, IconButton, Typography } from '@strapi/design-system';\r\nimport { Eye } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { Filters } from '../../../../../../../admin/src/components/Filters';\r\nimport { Layouts } from '../../../../../../../admin/src/components/Layouts/Layout';\r\nimport { Page } from '../../../../../../../admin/src/components/PageHelpers';\r\nimport { Pagination } from '../../../../../../../admin/src/components/Pagination';\r\nimport { Table } from '../../../../../../../admin/src/components/Table';\r\nimport { useTypedSelector } from '../../../../../../../admin/src/core/store/hooks';\r\nimport { useQueryParams } from '../../../../../../../admin/src/hooks/useQueryParams';\r\nimport { useRBAC } from '../../../../../../../admin/src/hooks/useRBAC';\r\nimport { AuditLog } from '../../../../../../../shared/contracts/audit-logs';\r\n\r\nimport { Modal } from './components/Modal';\r\nimport { useAuditLogsData } from './hooks/useAuditLogsData';\r\nimport { useFormatTimeStamp } from './hooks/useFormatTimeStamp';\r\nimport { getDefaultMessage } from './utils/getActionTypesDefaultMessages';\r\nimport { getDisplayedFilters } from './utils/getDisplayedFilters';\r\n\r\nconst ListPage = () => {\r\n  const { formatMessage } = useIntl();\r\n  const permissions = useTypedSelector((state) => state.admin_app.permissions.settings);\r\n\r\n  const {\r\n    allowedActions: { canRead: canReadAuditLogs, canReadUsers },\r\n    isLoading: isLoadingRBAC,\r\n  } = useRBAC({\r\n    ...permissions?.auditLogs,\r\n    readUsers: permissions?.users.read || [],\r\n  });\r\n\r\n  const [{ query }, setQuery] = useQueryParams<{ id?: AuditLog['id'] }>();\r\n  const {\r\n    auditLogs,\r\n    users,\r\n    isLoading: isLoadingData,\r\n    hasError,\r\n  } = useAuditLogsData({\r\n    canReadAuditLogs,\r\n    canReadUsers,\r\n  });\r\n\r\n  const formatTimeStamp = useFormatTimeStamp();\r\n\r\n  const displayedFilters = getDisplayedFilters({ formatMessage, users, canReadUsers });\r\n\r\n  const headers: Table.Header<AuditLog, object>[] = [\r\n    {\r\n      name: 'action',\r\n      label: formatMessage({\r\n        id: 'Settings.permissions.auditLogs.action',\r\n        defaultMessage: 'Action',\r\n      }),\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: 'date',\r\n      label: formatMessage({\r\n        id: 'Settings.permissions.auditLogs.date',\r\n        defaultMessage: 'Date',\r\n      }),\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: 'user',\r\n      label: formatMessage({\r\n        id: 'Settings.permissions.auditLogs.user',\r\n        defaultMessage: 'User',\r\n      }),\r\n      sortable: false,\r\n      // In this case, the passed parameter cannot and shouldn't be something else than User\r\n      cellFormatter: ({ user }) => (user ? user.displayName : ''),\r\n    },\r\n  ];\r\n\r\n  if (hasError) {\r\n    return <Page.Error />;\r\n  }\r\n\r\n  const isLoading = isLoadingData || isLoadingRBAC;\r\n\r\n  const { results = [] } = auditLogs ?? {};\r\n\r\n  return (\r\n    <Page.Main aria-busy={isLoading}>\r\n      <Page.Title>\r\n        {formatMessage(\r\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\r\n          {\r\n            name: formatMessage({\r\n              id: 'global.auditLogs',\r\n              defaultMessage: 'Audit Logs',\r\n            }),\r\n          }\r\n        )}\r\n      </Page.Title>\r\n      <Layouts.Header\r\n        title={formatMessage({\r\n          id: 'global.auditLogs',\r\n          defaultMessage: 'Audit Logs',\r\n        })}\r\n        subtitle={formatMessage({\r\n          id: 'Settings.permissions.auditLogs.listview.header.subtitle',\r\n          defaultMessage: 'Logs of all the activities that happened in your environment',\r\n        })}\r\n      />\r\n      <Layouts.Action\r\n        startActions={\r\n          <Filters.Root options={displayedFilters}>\r\n            <Filters.Trigger />\r\n            <Filters.Popover />\r\n            <Filters.List />\r\n          </Filters.Root>\r\n        }\r\n      />\r\n      <Layouts.Content>\r\n        <Table.Root rows={results} headers={headers} isLoading={isLoading}>\r\n          <Table.Content>\r\n            <Table.Head>\r\n              {headers.map((header) => (\r\n                <Table.HeaderCell key={header.name} {...header} />\r\n              ))}\r\n            </Table.Head>\r\n            <Table.Empty />\r\n            <Table.Loading />\r\n            <Table.Body>\r\n              {results.map((log) => (\r\n                <Table.Row key={log.id} onClick={() => setQuery({ id: log.id })}>\r\n                  {headers.map((header) => {\r\n                    const { name, cellFormatter } = header;\r\n\r\n                    switch (name) {\r\n                      case 'action':\r\n                        return (\r\n                          <Table.Cell key={name}>\r\n                            <Typography textColor=\"neutral800\">\r\n                              {formatMessage(\r\n                                {\r\n                                  id: `Settings.permissions.auditLogs.${log.action}`,\r\n                                  // @ts-expect-error – getDefaultMessage probably doesn't benefit from being so strongly typed unless we just add string at the end.\r\n                                  defaultMessage: getDefaultMessage(log.action),\r\n                                },\r\n                                { model: (log.payload?.model as string) ?? '' }\r\n                              )}\r\n                            </Typography>\r\n                          </Table.Cell>\r\n                        );\r\n                      case 'date':\r\n                        return (\r\n                          <Table.Cell key={name}>\r\n                            <Typography textColor=\"neutral800\">\r\n                              {formatTimeStamp(log.date)}\r\n                            </Typography>\r\n                          </Table.Cell>\r\n                        );\r\n                      case 'user':\r\n                        return (\r\n                          <Table.Cell key={name}>\r\n                            <Typography textColor=\"neutral800\">\r\n                              {cellFormatter ? cellFormatter(log, header) : '-'}\r\n                            </Typography>\r\n                          </Table.Cell>\r\n                        );\r\n                      default:\r\n                        return (\r\n                          <Table.Cell key={name}>\r\n                            <Typography textColor=\"neutral800\">\r\n                              {(log[name as keyof AuditLog] as string) || '-'}\r\n                            </Typography>\r\n                          </Table.Cell>\r\n                        );\r\n                    }\r\n                  })}\r\n                  <Table.Cell onClick={(e) => e.stopPropagation()}>\r\n                    <Flex justifyContent=\"end\">\r\n                      <IconButton\r\n                        onClick={() => setQuery({ id: log.id })}\r\n                        withTooltip={false}\r\n                        label={formatMessage(\r\n                          { id: 'app.component.table.view', defaultMessage: '{target} details' },\r\n                          { target: `${log.action} action` }\r\n                        )}\r\n                        variant=\"ghost\"\r\n                      >\r\n                        <Eye />\r\n                      </IconButton>\r\n                    </Flex>\r\n                  </Table.Cell>\r\n                </Table.Row>\r\n              ))}\r\n            </Table.Body>\r\n          </Table.Content>\r\n        </Table.Root>\r\n\r\n        <Pagination.Root {...auditLogs?.pagination}>\r\n          <Pagination.PageSize />\r\n          <Pagination.Links />\r\n        </Pagination.Root>\r\n      </Layouts.Content>\r\n      {query?.id && (\r\n        <Modal handleClose={() => setQuery({ id: '' }, 'remove')} logId={query.id.toString()} />\r\n      )}\r\n    </Page.Main>\r\n  );\r\n};\r\n\r\nconst ProtectedListPage = () => {\r\n  const permissions = useTypedSelector(\r\n    (state) => state.admin_app.permissions.settings?.auditLogs?.main\r\n  );\r\n\r\n  return (\r\n    <Page.Protect permissions={permissions}>\r\n      <ListPage />\r\n    </Page.Protect>\r\n  );\r\n};\r\n\r\nexport { ListPage, ProtectedListPage };\r\n"],
  "mappings": "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",
  "names": ["Modal", "React", "import_jsx_runtime", "import_jsx_runtime", "Modal"]
}
