{
  "version": 3,
  "sources": ["../../../../../packages/core/review-workflows/admin/src/components/LimitsModal.tsx", "../../../../../packages/core/review-workflows/admin/src/routes/settings/hooks/useReviewWorkflows.ts", "../../../../../packages/core/review-workflows/admin/src/services/settings.ts"],
  "sourcesContent": ["import * as React from 'react';\r\n\r\nimport { Box, Flex, IconButton, Modal, Typography, LinkButton } from '@strapi/design-system';\r\nimport { Cross } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\nimport { styled } from 'styled-components';\r\n\r\nimport balloonImageSrc from '../assets/balloon.png';\r\n\r\nconst CTA_LEARN_MORE_HREF = 'https://strapi.io/pricing-cloud';\r\nconst CTA_SALES_HREF = 'https://strapi.io/contact-sales';\r\n\r\nconst Title: React.FC<React.PropsWithChildren> = ({ children }) => {\r\n  return <Modal.Title variant=\"alpha\">{children}</Modal.Title>;\r\n};\r\n\r\nconst Body: React.FC<React.PropsWithChildren> = ({ children }) => {\r\n  return <Typography variant=\"omega\">{children}</Typography>;\r\n};\r\n\r\nconst CallToActions = () => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  return (\r\n    <Flex gap={2} paddingTop={4}>\r\n      <LinkButton variant=\"default\" isExternal href={CTA_LEARN_MORE_HREF}>\r\n        {formatMessage({\r\n          id: 'Settings.review-workflows.limit.cta.learn',\r\n          defaultMessage: 'Learn more',\r\n        })}\r\n      </LinkButton>\r\n\r\n      <LinkButton variant=\"tertiary\" isExternal href={CTA_SALES_HREF}>\r\n        {formatMessage({\r\n          id: 'Settings.review-workflows.limit.cta.sales',\r\n          defaultMessage: 'Contact Sales',\r\n        })}\r\n      </LinkButton>\r\n    </Flex>\r\n  );\r\n};\r\n\r\nconst BalloonImage = styled.img`\r\n  // Margin top|right reverse the padding of ModalBody\r\n  margin-right: ${({ theme }) => `-${theme.spaces[7]}`};\r\n  margin-top: ${({ theme }) => `-${theme.spaces[7]}`};\r\n  width: 360px;\r\n`;\r\n\r\nexport type LimitsModalProps = Pick<Modal.Props, 'open' | 'onOpenChange'>;\r\n\r\nconst Root: React.FC<React.PropsWithChildren<LimitsModalProps>> = ({\r\n  children,\r\n  open = false,\r\n  onOpenChange,\r\n}) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  return (\r\n    <Modal.Root open={open} onOpenChange={onOpenChange}>\r\n      <Modal.Content>\r\n        <Modal.Body>\r\n          <Flex gap={2} paddingLeft={7} position=\"relative\">\r\n            <Flex alignItems=\"start\" direction=\"column\" gap={2} width=\"60%\">\r\n              {children}\r\n\r\n              <CallToActions />\r\n            </Flex>\r\n\r\n            <Flex justifyContent=\"end\" height=\"100%\" width=\"40%\">\r\n              <BalloonImage src={balloonImageSrc} aria-hidden alt=\"\" loading=\"lazy\" />\r\n\r\n              <Box display=\"flex\" position=\"absolute\" right={0} top={0}>\r\n                <Modal.Close>\r\n                  <IconButton\r\n                    withTooltip={false}\r\n                    label={formatMessage({\r\n                      id: 'global.close',\r\n                      defaultMessage: 'Close',\r\n                    })}\r\n                  >\r\n                    <Cross />\r\n                  </IconButton>\r\n                </Modal.Close>\r\n              </Box>\r\n            </Flex>\r\n          </Flex>\r\n        </Modal.Body>\r\n      </Modal.Content>\r\n    </Modal.Root>\r\n  );\r\n};\r\n\r\nconst LimitsModal = {\r\n  Title,\r\n  Body,\r\n  Root,\r\n};\r\n\r\nexport { LimitsModal };\r\n", "import * as React from 'react';\r\n\r\nimport { useAPIErrorHandler, useNotification } from '@strapi/admin/strapi-admin';\r\nimport { type MessageDescriptor, useIntl } from 'react-intl';\r\n\r\nimport {\r\n  GetWorkflowsParams,\r\n  useCreateWorkflowMutation,\r\n  useDeleteWorkflowMutation,\r\n  useGetWorkflowsQuery,\r\n  useUpdateWorkflowMutation,\r\n} from '../../../services/settings';\r\n\r\nimport type { Create, Update } from '../../../../../shared/contracts/review-workflows';\r\n\r\nconst DEFAULT_UNEXPECTED_ERROR_MSG = {\r\n  id: 'notification.error',\r\n  defaultMessage: 'An error occurred, please try again',\r\n} satisfies MessageDescriptor;\r\n\r\ntype UseReviewWorkflowsArgs = GetWorkflowsParams & {\r\n  skip?: boolean;\r\n};\r\n\r\nconst useReviewWorkflows = (params: UseReviewWorkflowsArgs = {}) => {\r\n  const { toggleNotification } = useNotification();\r\n  const { formatMessage } = useIntl();\r\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\r\n\r\n  const { skip = false, ...queryParams } = params;\r\n\r\n  const { data, isLoading, error } = useGetWorkflowsQuery(\r\n    {\r\n      ...queryParams,\r\n    },\r\n    {\r\n      skip,\r\n    }\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    if (error) {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatAPIError(error),\r\n      });\r\n    }\r\n  }, [error, formatAPIError, toggleNotification]);\r\n\r\n  const [createWorkflow] = useCreateWorkflowMutation();\r\n  const create = React.useCallback(\r\n    async (data: Create.Request['body']['data']) => {\r\n      try {\r\n        const res = await createWorkflow({ data });\r\n\r\n        if ('error' in res) {\r\n          toggleNotification({\r\n            type: 'danger',\r\n            message: formatAPIError(res.error),\r\n          });\r\n\r\n          return res;\r\n        }\r\n\r\n        toggleNotification({\r\n          type: 'success',\r\n          message: formatMessage({ id: 'actions.created', defaultMessage: 'Created workflow' }),\r\n        });\r\n\r\n        return res;\r\n      } catch (err) {\r\n        toggleNotification({\r\n          type: 'danger',\r\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\r\n        });\r\n\r\n        throw err;\r\n      }\r\n    },\r\n    [createWorkflow, formatAPIError, formatMessage, toggleNotification]\r\n  );\r\n\r\n  const [updateWorkflow] = useUpdateWorkflowMutation();\r\n  const update = React.useCallback(\r\n    async (id: string, data: Update.Request['body']['data']) => {\r\n      try {\r\n        const res = await updateWorkflow({ id, data });\r\n\r\n        if ('error' in res) {\r\n          toggleNotification({\r\n            type: 'danger',\r\n            message: formatAPIError(res.error),\r\n          });\r\n\r\n          return res;\r\n        }\r\n\r\n        toggleNotification({\r\n          type: 'success',\r\n          message: formatMessage({ id: 'actions.updated', defaultMessage: 'Updated workflow' }),\r\n        });\r\n\r\n        return res;\r\n      } catch (err) {\r\n        toggleNotification({\r\n          type: 'danger',\r\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\r\n        });\r\n\r\n        throw err;\r\n      }\r\n    },\r\n    [formatAPIError, formatMessage, toggleNotification, updateWorkflow]\r\n  );\r\n\r\n  const [deleteWorkflow] = useDeleteWorkflowMutation();\r\n  const deleteAction = React.useCallback(\r\n    async (id: string) => {\r\n      try {\r\n        const res = await deleteWorkflow({ id });\r\n\r\n        if ('error' in res) {\r\n          toggleNotification({\r\n            type: 'danger',\r\n            message: formatAPIError(res.error),\r\n          });\r\n\r\n          return;\r\n        }\r\n\r\n        toggleNotification({\r\n          type: 'success',\r\n          message: formatMessage({ id: 'actions.deleted', defaultMessage: 'Deleted workflow' }),\r\n        });\r\n\r\n        return res.data;\r\n      } catch (err) {\r\n        toggleNotification({\r\n          type: 'danger',\r\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\r\n        });\r\n\r\n        throw err;\r\n      }\r\n    },\r\n    [deleteWorkflow, formatAPIError, formatMessage, toggleNotification]\r\n  );\r\n\r\n  const { workflows = [], meta } = data ?? {};\r\n\r\n  return {\r\n    // meta contains e.g. the total of all workflows. we can not use\r\n    // the pagination object here, because the list is not paginated.\r\n    meta,\r\n    workflows,\r\n    isLoading,\r\n    error,\r\n    create,\r\n    delete: deleteAction,\r\n    update,\r\n  };\r\n};\r\n\r\nexport { useReviewWorkflows };\r\n", "import { reviewWorkflowsApi } from './api';\r\n\r\nimport type { Create, Update, Delete, GetAll } from '../../../shared/contracts/review-workflows';\r\n\r\nconst settingsApi = reviewWorkflowsApi.injectEndpoints({\r\n  endpoints: (builder) => ({\r\n    getWorkflows: builder.query<\r\n      {\r\n        workflows: GetAll.Response['data'];\r\n        meta?: GetAll.Response['meta'];\r\n      },\r\n      GetWorkflowsParams | void\r\n    >({\r\n      query: (args) => {\r\n        return {\r\n          url: '/review-workflows/workflows',\r\n          method: 'GET',\r\n          config: {\r\n            params: args ?? {},\r\n          },\r\n        };\r\n      },\r\n      transformResponse: (res: GetAll.Response) => {\r\n        return {\r\n          workflows: res.data,\r\n          meta: 'meta' in res ? res.meta : undefined,\r\n        };\r\n      },\r\n      providesTags: (res) => {\r\n        return [\r\n          ...(res?.workflows.map(({ id }) => ({ type: 'ReviewWorkflow' as const, id })) ?? []),\r\n          { type: 'ReviewWorkflow' as const, id: 'LIST' },\r\n        ];\r\n      },\r\n    }),\r\n    createWorkflow: builder.mutation<Create.Response['data'], Create.Request['body']>({\r\n      query: (data) => ({\r\n        url: '/review-workflows/workflows',\r\n        method: 'POST',\r\n        data,\r\n      }),\r\n      transformResponse: (res: Create.Response) => res.data,\r\n      invalidatesTags(res) {\r\n        return [\r\n          { type: 'ReviewWorkflow' as const, id: 'LIST' },\r\n          'ReviewWorkflowStages',\r\n          { type: 'Document', id: `ALL_LIST` },\r\n          { type: 'ContentTypeSettings', id: 'LIST' },\r\n          ...(res?.contentTypes.map((uid) => ({\r\n            type: 'Document' as const,\r\n            id: `${uid}_ALL_ITEMS`,\r\n          })) ?? []),\r\n        ];\r\n      },\r\n    }),\r\n    updateWorkflow: builder.mutation<\r\n      Update.Response['data'],\r\n      Update.Request['body'] & Update.Params\r\n    >({\r\n      query: ({ id, ...data }) => ({\r\n        url: `/review-workflows/workflows/${id}`,\r\n        method: 'PUT',\r\n        data,\r\n      }),\r\n      transformResponse: (res: Update.Response) => res.data,\r\n      invalidatesTags: (res, _err, arg) => [\r\n        { type: 'ReviewWorkflow' as const, id: arg.id },\r\n        'ReviewWorkflowStages',\r\n        { type: 'Document', id: 'ALL_LIST' },\r\n        { type: 'ContentTypeSettings', id: 'LIST' },\r\n        ...(res?.contentTypes.map((uid) => ({\r\n          type: 'Document' as const,\r\n          id: `${uid}_ALL_ITEMS`,\r\n        })) ?? []),\r\n      ],\r\n    }),\r\n    deleteWorkflow: builder.mutation<Delete.Response['data'], Delete.Params>({\r\n      query: ({ id }) => ({\r\n        url: `/review-workflows/workflows/${id}`,\r\n        method: 'DELETE',\r\n      }),\r\n      transformResponse: (res: Delete.Response) => res.data,\r\n      invalidatesTags: (res, _err, arg) => [\r\n        { type: 'ReviewWorkflow' as const, id: arg.id },\r\n        'ReviewWorkflowStages',\r\n        { type: 'Document', id: `ALL_LIST` },\r\n        { type: 'ContentTypeSettings', id: 'LIST' },\r\n      ],\r\n    }),\r\n  }),\r\n  overrideExisting: false,\r\n});\r\n\r\ntype GetWorkflowsParams = GetAll.Request['query'];\r\n\r\nconst {\r\n  useGetWorkflowsQuery,\r\n  useCreateWorkflowMutation,\r\n  useDeleteWorkflowMutation,\r\n  useUpdateWorkflowMutation,\r\n} = settingsApi;\r\n\r\nexport {\r\n  useGetWorkflowsQuery,\r\n  useCreateWorkflowMutation,\r\n  useDeleteWorkflowMutation,\r\n  useUpdateWorkflowMutation,\r\n  type GetWorkflowsParams,\r\n};\r\n"],
  "mappings": "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",
  "names": ["data"]
}
