{
  "version": 3,
  "sources": ["../../../../../packages/core/admin/admin/src/pages/Settings/pages/Roles/EditPage.tsx", "../../../../../packages/core/admin/admin/src/pages/Settings/pages/Roles/components/RoleForm.tsx"],
  "sourcesContent": ["import * as React from 'react';\r\n\r\nimport { Box, Button, Flex, Main } from '@strapi/design-system';\r\nimport { Check } from '@strapi/icons';\r\nimport { Formik, FormikHelpers } from 'formik';\r\nimport { useIntl } from 'react-intl';\r\nimport { Navigate, useMatch } from 'react-router-dom';\r\nimport * as yup from 'yup';\r\n\r\nimport { Layouts } from '../../../../components/Layouts/Layout';\r\nimport { Page } from '../../../../components/PageHelpers';\r\nimport { useTypedSelector } from '../../../../core/store/hooks';\r\nimport { BackButton } from '../../../../features/BackButton';\r\nimport { useNotification } from '../../../../features/Notifications';\r\nimport { useTracking } from '../../../../features/Tracking';\r\nimport { useAdminRoles } from '../../../../hooks/useAdminRoles';\r\nimport { useAPIErrorHandler } from '../../../../hooks/useAPIErrorHandler';\r\nimport {\r\n  useGetRolePermissionLayoutQuery,\r\n  useGetRolePermissionsQuery,\r\n  useUpdateRoleMutation,\r\n  useUpdateRolePermissionsMutation,\r\n} from '../../../../services/users';\r\nimport { isBaseQueryError } from '../../../../utils/baseQuery';\r\nimport { translatedErrors } from '../../../../utils/translatedErrors';\r\n\r\nimport { Permissions, PermissionsAPI } from './components/Permissions';\r\nimport { RoleForm } from './components/RoleForm';\r\n\r\nconst EDIT_ROLE_SCHEMA = yup.object().shape({\r\n  name: yup.string().required(translatedErrors.required.id),\r\n  description: yup.string().optional(),\r\n});\r\n\r\n/**\r\n * TODO: be nice if we could just infer this from the schema\r\n */\r\ninterface EditRoleFormValues {\r\n  name: string;\r\n  description: string;\r\n}\r\n\r\nconst EditPage = () => {\r\n  const { toggleNotification } = useNotification();\r\n  const { formatMessage } = useIntl();\r\n  const match = useMatch('/settings/roles/:id');\r\n  const id = match?.params.id;\r\n  const permissionsRef = React.useRef<PermissionsAPI>(null);\r\n  const { trackUsage } = useTracking();\r\n  const {\r\n    _unstableFormatAPIError: formatAPIError,\r\n    _unstableFormatValidationErrors: formatValidationErrors,\r\n  } = useAPIErrorHandler();\r\n\r\n  const { isLoading: isLoadingPermissionsLayout, data: permissionsLayout } =\r\n    useGetRolePermissionLayoutQuery({\r\n      /**\r\n       * Role here is a query param so if there's no role we pass an empty string\r\n       * which returns us a default layout.\r\n       */\r\n      role: id ?? '',\r\n    });\r\n\r\n  const {\r\n    roles,\r\n    isLoading: isRoleLoading,\r\n    refetch: refetchRole,\r\n  } = useAdminRoles(\r\n    { id },\r\n    {\r\n      refetchOnMountOrArgChange: true,\r\n    }\r\n  );\r\n\r\n  const role = roles[0] ?? {};\r\n\r\n  const { data: permissions, isLoading: isLoadingPermissions } = useGetRolePermissionsQuery(\r\n    {\r\n      id: id!,\r\n    },\r\n    {\r\n      skip: !id,\r\n      refetchOnMountOrArgChange: true,\r\n    }\r\n  );\r\n\r\n  const [updateRole] = useUpdateRoleMutation();\r\n  const [updateRolePermissions] = useUpdateRolePermissionsMutation();\r\n\r\n  if (!id) {\r\n    return <Navigate to=\"/settings/roles\" />;\r\n  }\r\n\r\n  const handleEditRoleSubmit = async (\r\n    data: EditRoleFormValues,\r\n    formik: FormikHelpers<EditRoleFormValues>\r\n  ) => {\r\n    try {\r\n      const { permissionsToSend, didUpdateConditions } =\r\n        permissionsRef.current?.getPermissions() ?? {};\r\n\r\n      const res = await updateRole({\r\n        id,\r\n        ...data,\r\n      });\r\n\r\n      if ('error' in res) {\r\n        if (isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\r\n          formik.setErrors(formatValidationErrors(res.error));\r\n        } else {\r\n          toggleNotification({\r\n            type: 'danger',\r\n            message: formatAPIError(res.error),\r\n          });\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      if (role.code !== 'strapi-super-admin' && permissionsToSend) {\r\n        const updateRes = await updateRolePermissions({\r\n          id: res.data.id,\r\n          permissions: permissionsToSend,\r\n        });\r\n\r\n        if ('error' in updateRes) {\r\n          if (isBaseQueryError(updateRes.error) && updateRes.error.name === 'ValidationError') {\r\n            formik.setErrors(formatValidationErrors(updateRes.error));\r\n          } else {\r\n            toggleNotification({\r\n              type: 'danger',\r\n              message: formatAPIError(updateRes.error),\r\n            });\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if (didUpdateConditions) {\r\n          trackUsage('didUpdateConditions');\r\n        }\r\n      }\r\n\r\n      permissionsRef.current?.setFormAfterSubmit();\r\n\r\n      await refetchRole();\r\n\r\n      toggleNotification({\r\n        type: 'success',\r\n        message: formatMessage({ id: 'notification.success.saved' }),\r\n      });\r\n    } catch (error) {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\r\n      });\r\n    }\r\n  };\r\n\r\n  const isFormDisabled = !isRoleLoading && role.code === 'strapi-super-admin';\r\n\r\n  if (isLoadingPermissionsLayout || isRoleLoading || isLoadingPermissions || !permissionsLayout) {\r\n    return <Page.Loading />;\r\n  }\r\n\r\n  return (\r\n    <Main>\r\n      <Page.Title>\r\n        {formatMessage(\r\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\r\n          {\r\n            name: 'Roles',\r\n          }\r\n        )}\r\n      </Page.Title>\r\n      <Formik\r\n        enableReinitialize\r\n        initialValues={\r\n          {\r\n            name: role.name ?? '',\r\n            description: role.description ?? '',\r\n          } satisfies EditRoleFormValues\r\n        }\r\n        onSubmit={handleEditRoleSubmit}\r\n        validationSchema={EDIT_ROLE_SCHEMA}\r\n        validateOnChange={false}\r\n      >\r\n        {({ handleSubmit, values, errors, handleChange, handleBlur, isSubmitting }) => (\r\n          <form onSubmit={handleSubmit}>\r\n            <Layouts.Header\r\n              primaryAction={\r\n                <Flex gap={2}>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    startIcon={<Check />}\r\n                    disabled={role.code === 'strapi-super-admin'}\r\n                    loading={isSubmitting}\r\n                  >\r\n                    {formatMessage({\r\n                      id: 'global.save',\r\n                      defaultMessage: 'Save',\r\n                    })}\r\n                  </Button>\r\n                </Flex>\r\n              }\r\n              title={formatMessage({\r\n                id: 'Settings.roles.edit.title',\r\n                defaultMessage: 'Edit a role',\r\n              })}\r\n              subtitle={formatMessage({\r\n                id: 'Settings.roles.create.description',\r\n                defaultMessage: 'Define the rights given to the role',\r\n              })}\r\n              navigationAction={<BackButton fallback=\"../roles\" />}\r\n            />\r\n            <Layouts.Content>\r\n              <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\r\n                <RoleForm\r\n                  disabled={isFormDisabled}\r\n                  errors={errors}\r\n                  values={values}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  role={role}\r\n                />\r\n                <Box shadow=\"filterShadow\" hasRadius>\r\n                  <Permissions\r\n                    isFormDisabled={isFormDisabled}\r\n                    permissions={permissions}\r\n                    ref={permissionsRef}\r\n                    layout={permissionsLayout}\r\n                  />\r\n                </Box>\r\n              </Flex>\r\n            </Layouts.Content>\r\n          </form>\r\n        )}\r\n      </Formik>\r\n    </Main>\r\n  );\r\n};\r\n\r\nconst ProtectedEditPage = () => {\r\n  const permissions = useTypedSelector(\r\n    (state) => state.admin_app.permissions.settings?.roles.update\r\n  );\r\n\r\n  return (\r\n    <Page.Protect permissions={permissions}>\r\n      <EditPage />\r\n    </Page.Protect>\r\n  );\r\n};\r\n\r\nexport { EditPage, ProtectedEditPage };\r\nexport type { EditRoleFormValues };\r\n", "import {\r\n  Box,\r\n  Button,\r\n  Field,\r\n  Flex,\r\n  Grid,\r\n  Textarea,\r\n  TextInput,\r\n  Typography,\r\n} from '@strapi/design-system';\r\nimport { FormikProps } from 'formik';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport type { AdminRole } from '../../../../../hooks/useAdminRoles';\r\nimport type { EditRoleFormValues } from '../EditPage';\r\n\r\ninterface RoleFormProps extends Pick<FormikProps<EditRoleFormValues>, 'values' | 'errors'> {\r\n  onBlur: FormikProps<EditRoleFormValues>['handleBlur'];\r\n  onChange: FormikProps<EditRoleFormValues>['handleChange'];\r\n  disabled?: boolean;\r\n  role: AdminRole;\r\n}\r\n\r\nconst RoleForm = ({ disabled, role, values, errors, onChange, onBlur }: RoleFormProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  return (\r\n    <Box background=\"neutral0\" padding={6} shadow=\"filterShadow\" hasRadius>\r\n      <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Box>\r\n            <Box>\r\n              <Typography fontWeight=\"bold\">\r\n                {role\r\n                  ? role.name\r\n                  : formatMessage({\r\n                      id: 'global.details',\r\n                      defaultMessage: 'Details',\r\n                    })}\r\n              </Typography>\r\n            </Box>\r\n            <Box>\r\n              <Typography textColor=\"neutral500\" variant=\"pi\">\r\n                {role\r\n                  ? role.description\r\n                  : formatMessage({\r\n                      id: 'Settings.roles.form.description',\r\n                      defaultMessage: 'Name and description of the role',\r\n                    })}\r\n              </Typography>\r\n            </Box>\r\n          </Box>\r\n          <Button disabled variant=\"secondary\">\r\n            {formatMessage(\r\n              {\r\n                id: 'Settings.roles.form.button.users-with-role',\r\n                defaultMessage:\r\n                  '{number, plural, =0 {# users} one {# user} other {# users}} with this role',\r\n              },\r\n              { number: role.usersCount }\r\n            )}\r\n          </Button>\r\n        </Flex>\r\n        <Grid.Root gap={4}>\r\n          <Grid.Item col={6} direction=\"column\" alignItems=\"stretch\">\r\n            <Field.Root\r\n              name=\"name\"\r\n              error={errors.name && formatMessage({ id: errors.name })}\r\n              required\r\n            >\r\n              <Field.Label>\r\n                {formatMessage({\r\n                  id: 'global.name',\r\n                  defaultMessage: 'Name',\r\n                })}\r\n              </Field.Label>\r\n              <TextInput\r\n                disabled={disabled}\r\n                onChange={onChange}\r\n                onBlur={onBlur}\r\n                value={values.name || ''}\r\n              />\r\n              <Field.Error />\r\n            </Field.Root>\r\n          </Grid.Item>\r\n          <Grid.Item col={6} direction=\"column\" alignItems=\"stretch\">\r\n            <Field.Root\r\n              name=\"description\"\r\n              error={errors.description && formatMessage({ id: errors.description })}\r\n            >\r\n              <Field.Label>\r\n                {formatMessage({\r\n                  id: 'global.description',\r\n                  defaultMessage: 'Description',\r\n                })}\r\n              </Field.Label>\r\n              <Textarea\r\n                disabled={disabled}\r\n                onChange={onChange}\r\n                onBlur={onBlur}\r\n                value={values.description}\r\n              />\r\n              <Field.Error />\r\n            </Field.Root>\r\n          </Grid.Item>\r\n        </Grid.Root>\r\n      </Flex>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport { RoleForm };\r\nexport type { RoleFormProps };\r\n"],
  "mappings": "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",
  "names": ["import_jsx_runtime", "create"]
}
