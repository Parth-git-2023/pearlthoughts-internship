{
  "version": 3,
  "sources": ["../../../../../packages/core/admin/admin/src/features/Notifications.tsx"],
  "sourcesContent": ["import * as React from 'react';\r\n\r\nimport { Alert, AlertVariant, Flex, useCallbackRef, Link } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\n\r\ninterface NotificationLink {\r\n  label: string;\r\n  target?: string;\r\n  url: string;\r\n}\r\n\r\ninterface NotificationConfig {\r\n  blockTransition?: boolean;\r\n  link?: NotificationLink;\r\n  message?: string;\r\n  onClose?: () => void;\r\n  timeout?: number;\r\n  title?: string;\r\n  type?: 'info' | 'warning' | 'danger' | 'success';\r\n}\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Context\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface NotificationsContextValue {\r\n  /**\r\n   * Toggles a notification, wrapped in `useCallback` for a stable identity.\r\n   */\r\n  toggleNotification: (config: NotificationConfig) => void;\r\n}\r\n\r\nconst NotificationsContext = React.createContext<NotificationsContextValue>({\r\n  toggleNotification: () => {},\r\n});\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Provider\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface NotificationsProviderProps {\r\n  children: React.ReactNode;\r\n}\r\ninterface Notification extends NotificationConfig {\r\n  id: number;\r\n}\r\n\r\n/**\r\n * @internal\r\n * @description DO NOT USE. This will be removed before stable release of v5.\r\n */\r\nconst NotificationsProvider = ({ children }: NotificationsProviderProps) => {\r\n  const notificationIdRef = React.useRef(0);\r\n\r\n  const [notifications, setNotifications] = React.useState<Notification[]>([]);\r\n\r\n  const toggleNotification = React.useCallback(\r\n    ({ type, message, link, timeout, blockTransition, onClose, title }: NotificationConfig) => {\r\n      setNotifications((s) => [\r\n        ...s,\r\n        {\r\n          id: notificationIdRef.current++,\r\n          type,\r\n          message,\r\n          link,\r\n          timeout,\r\n          blockTransition,\r\n          onClose,\r\n          title,\r\n        },\r\n      ]);\r\n    },\r\n    []\r\n  );\r\n\r\n  const clearNotification = React.useCallback((id: number) => {\r\n    setNotifications((s) => s.filter((n) => n.id !== id));\r\n  }, []);\r\n\r\n  const value = React.useMemo(() => ({ toggleNotification }), [toggleNotification]);\r\n\r\n  return (\r\n    <NotificationsContext.Provider value={value}>\r\n      <Flex\r\n        left=\"50%\"\r\n        marginLeft=\"-250px\"\r\n        position=\"fixed\"\r\n        direction=\"column\"\r\n        alignItems=\"stretch\"\r\n        gap={2}\r\n        top={`4.6rem`}\r\n        width={`50rem`}\r\n        zIndex=\"notification\"\r\n      >\r\n        {notifications.map((notification) => {\r\n          return (\r\n            <Notification\r\n              key={notification.id}\r\n              {...notification}\r\n              clearNotification={clearNotification}\r\n            />\r\n          );\r\n        })}\r\n      </Flex>\r\n      {children}\r\n    </NotificationsContext.Provider>\r\n  );\r\n};\r\n\r\ninterface NotificationProps extends Notification {\r\n  clearNotification: (id: number) => void;\r\n}\r\n\r\nconst Notification = ({\r\n  clearNotification,\r\n  blockTransition = false,\r\n  id,\r\n  link,\r\n  message,\r\n  onClose,\r\n  timeout = 2500,\r\n  title,\r\n  type,\r\n}: NotificationProps) => {\r\n  const { formatMessage } = useIntl();\r\n  /**\r\n   * Chances are `onClose` won't be classed as stabilised,\r\n   * so we use `useCallbackRef` to avoid make it stable.\r\n   */\r\n  const onCloseCallback = useCallbackRef(onClose);\r\n\r\n  const handleClose = React.useCallback(() => {\r\n    onCloseCallback();\r\n\r\n    clearNotification(id);\r\n  }, [clearNotification, id, onCloseCallback]);\r\n\r\n  // eslint-disable-next-line consistent-return\r\n  React.useEffect(() => {\r\n    if (!blockTransition) {\r\n      const timeoutReference = setTimeout(() => {\r\n        handleClose();\r\n      }, timeout);\r\n\r\n      return () => {\r\n        clearTimeout(timeoutReference);\r\n      };\r\n    }\r\n  }, [blockTransition, handleClose, timeout]);\r\n\r\n  let variant: AlertVariant;\r\n  let alertTitle: string;\r\n\r\n  if (type === 'info') {\r\n    variant = 'default';\r\n    alertTitle = formatMessage({\r\n      id: 'notification.default.title',\r\n      defaultMessage: 'Information:',\r\n    });\r\n  } else if (type === 'danger') {\r\n    variant = 'danger';\r\n    alertTitle = formatMessage({\r\n      id: 'notification.warning.title',\r\n      defaultMessage: 'Warning:',\r\n    });\r\n  } else if (type === 'warning') {\r\n    variant = 'warning';\r\n    alertTitle = formatMessage({\r\n      id: 'notification.warning.title',\r\n      defaultMessage: 'Warning:',\r\n    });\r\n  } else {\r\n    variant = 'success';\r\n    alertTitle = formatMessage({\r\n      id: 'notification.success.title',\r\n      defaultMessage: 'Success:',\r\n    });\r\n  }\r\n\r\n  if (title) {\r\n    alertTitle = title;\r\n  }\r\n\r\n  return (\r\n    <Alert\r\n      action={\r\n        link ? (\r\n          <Link href={link.url} isExternal>\r\n            {link.label}\r\n          </Link>\r\n        ) : undefined\r\n      }\r\n      onClose={handleClose}\r\n      closeLabel={formatMessage({\r\n        id: 'global.close',\r\n        defaultMessage: 'Close',\r\n      })}\r\n      title={alertTitle}\r\n      variant={variant}\r\n    >\r\n      {message}\r\n    </Alert>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Hook\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\n/**\r\n * @preserve\r\n * @description Returns an object to interact with the notification\r\n * system. The callbacks are wrapped in `useCallback` for a stable\r\n * identity.\r\n *\r\n * @example\r\n * ```tsx\r\n * import { useNotification } from '@strapi/strapi/admin';\r\n *\r\n * const MyComponent = () => {\r\n *  const { toggleNotification } = useNotification();\r\n *\r\n *  return <button onClick={() => toggleNotification({ message: 'Hello world!' })}>Click me</button>;\r\n */\r\nconst useNotification = () => React.useContext(NotificationsContext);\r\n\r\nexport { NotificationsProvider, useNotification };\r\nexport type { NotificationConfig, NotificationsContextValue };\r\n"],
  "mappings": "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",
  "names": []
}
