{
  "version": 3,
  "sources": ["../../../../../packages/core/admin/admin/src/components/ConfirmDialog.tsx"],
  "sourcesContent": ["import * as React from 'react';\r\n\r\nimport { Button, ButtonProps, Dialog } from '@strapi/design-system';\r\nimport { WarningCircle } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\nimport { styled } from 'styled-components';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ConfirmDialog\r\n * -----------------------------------------------------------------------------------------------*/\r\ninterface ConfirmDialogProps extends Pick<ButtonProps, 'variant'>, Pick<Dialog.BodyProps, 'icon'> {\r\n  onConfirm?: (e?: React.MouseEvent<HTMLButtonElement>) => Promise<void> | void;\r\n  onCancel?: (e?: React.MouseEvent<HTMLButtonElement>) => Promise<void> | void;\r\n  children?: React.ReactNode;\r\n  endAction?: React.ReactNode;\r\n  startAction?: React.ReactNode;\r\n  title?: React.ReactNode;\r\n}\r\n\r\n/**\r\n * @beta\r\n * @public\r\n * @description A simple confirm dialog that out of the box can be used to confirm an action.\r\n * The component can additionally be customised if required e.g. the footer actions can be\r\n * completely replaced, but cannot be removed. Passing a string as the children prop will render\r\n * the string as the body of the dialog. If you need more control over the body, you can pass a\r\n * custom component as the children prop.\r\n * @example\r\n * ```tsx\r\n * import { Dialog } from '@strapi/design-system';\r\n *\r\n * const DeleteAction = ({ id }) => {\r\n *  const [isOpen, setIsOpen] = React.useState(false);\r\n *\r\n *  const [delete] = useDeleteMutation()\r\n *  const handleConfirm = async () => {\r\n *    await delete(id)\r\n *    setIsOpen(false)\r\n *  }\r\n *\r\n *  return (\r\n *    <Dialog.Root open={isOpen} onOpenChange={setIsOpen}>\r\n *      <Dialog.Trigger>\r\n *        <Button>Delete</Button>\r\n *      </Dialog.Trigger>\r\n *      <ConfirmDialog onConfirm={handleConfirm} />\r\n *    </Dialog.Root>\r\n *  )\r\n * }\r\n * ```\r\n */\r\nconst ConfirmDialog = ({\r\n  children,\r\n  icon = <StyledWarning />,\r\n  onConfirm,\r\n  onCancel,\r\n  variant = 'danger-light',\r\n  startAction,\r\n  endAction,\r\n  title,\r\n}: ConfirmDialogProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const [isConfirming, setIsConfirming] = React.useState(false);\r\n\r\n  const content =\r\n    children ||\r\n    formatMessage({\r\n      id: 'app.confirm.body',\r\n      defaultMessage: 'Are you sure?',\r\n    });\r\n\r\n  const handleConfirm = async (e: React.MouseEvent<HTMLButtonElement>) => {\r\n    if (!onConfirm) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setIsConfirming(true);\r\n      await onConfirm(e);\r\n    } finally {\r\n      setIsConfirming(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Dialog.Content>\r\n      <Dialog.Header>\r\n        {title ||\r\n          formatMessage({\r\n            id: 'app.components.ConfirmDialog.title',\r\n            defaultMessage: 'Confirmation',\r\n          })}\r\n      </Dialog.Header>\r\n      <Dialog.Body icon={icon}>{content}</Dialog.Body>\r\n      <Dialog.Footer>\r\n        {startAction || (\r\n          <Dialog.Cancel>\r\n            <Button\r\n              fullWidth\r\n              variant=\"tertiary\"\r\n              onClick={(e) => {\r\n                e.stopPropagation();\r\n                if (onCancel) {\r\n                  onCancel(e);\r\n                }\r\n              }}\r\n            >\r\n              {formatMessage({\r\n                id: 'app.components.Button.cancel',\r\n                defaultMessage: 'Cancel',\r\n              })}\r\n            </Button>\r\n          </Dialog.Cancel>\r\n        )}\r\n        {endAction || (\r\n          <Dialog.Action>\r\n            <Button fullWidth onClick={handleConfirm} variant={variant} loading={isConfirming}>\r\n              {formatMessage({\r\n                id: 'app.components.Button.confirm',\r\n                defaultMessage: 'Confirm',\r\n              })}\r\n            </Button>\r\n          </Dialog.Action>\r\n        )}\r\n      </Dialog.Footer>\r\n    </Dialog.Content>\r\n  );\r\n};\r\n\r\nconst StyledWarning = styled(WarningCircle)`\r\n  width: 24px;\r\n  height: 24px;\r\n\r\n  path {\r\n    fill: ${({ theme }) => theme.colors.danger600};\r\n  }\r\n`;\r\n\r\nexport { ConfirmDialog };\r\nexport type { ConfirmDialogProps };\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA,YAAuB;AAqDd;AAFT,IAAM,gBAAgB,CAAC;AAAA,EACrB;AAAA,EACA,WAAO,wBAAC,iBAAc;AAAA,EACtB;AAAA,EACA;AAAA,EACA,UAAU;AAAA,EACV;AAAA,EACA;AAAA,EACA;AACF,MAA0B;AACxB,QAAM,EAAE,cAAc,IAAI,QAAQ;AAClC,QAAM,CAAC,cAAc,eAAe,IAAU,eAAS,KAAK;AAE5D,QAAM,UACJ,YACA,cAAc;AAAA,IACZ,IAAI;AAAA,IACJ,gBAAgB;AAAA,EAClB,CAAC;AAEH,QAAM,gBAAgB,OAAO,MAA2C;AACtE,QAAI,CAAC,WAAW;AACd;AAAA,IACF;AAEA,QAAI;AACF,sBAAgB,IAAI;AACpB,YAAM,UAAU,CAAC;AAAA,IACnB,UAAE;AACA,sBAAgB,KAAK;AAAA,IACvB;AAAA,EACF;AAEA,aACE,yBAAC,OAAO,SAAP,EACC;AAAA,gCAAC,OAAO,QAAP,EACE,mBACC,cAAc;AAAA,MACZ,IAAI;AAAA,MACJ,gBAAgB;AAAA,IAClB,CAAC,GACL;AAAA,QACA,wBAAC,OAAO,MAAP,EAAY,MAAa,mBAAQ;AAAA,QAClC,yBAAC,OAAO,QAAP,EACE;AAAA,yBACC,wBAAC,OAAO,QAAP,EACC;AAAA,QAAC;AAAA;AAAA,UACC,WAAS;AAAA,UACT,SAAQ;AAAA,UACR,SAAS,CAAC,MAAM;AACd,cAAE,gBAAgB;AAClB,gBAAI,UAAU;AACZ,uBAAS,CAAC;AAAA,YACZ;AAAA,UACF;AAAA,UAEC,wBAAc;AAAA,YACb,IAAI;AAAA,YACJ,gBAAgB;AAAA,UAClB,CAAC;AAAA;AAAA,MACH,GACF;AAAA,MAED,iBACC,wBAAC,OAAO,QAAP,EACC,sCAAC,UAAO,WAAS,MAAC,SAAS,eAAe,SAAkB,SAAS,cAClE,wBAAc;AAAA,QACb,IAAI;AAAA,QACJ,gBAAgB;AAAA,MAClB,CAAC,GACH,GACF;AAAA,OAEJ;AAAA,KACF;AAEJ;AAEA,IAAM,gBAAgB,GAAO,YAAa;AAAA;AAAA;AAAA;AAAA;AAAA,YAK9B,CAAC,EAAE,MAAM,MAAM,MAAM,OAAO,SAAS;AAAA;AAAA;",
  "names": []
}
