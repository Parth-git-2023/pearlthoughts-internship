{
  "version": 3,
  "sources": ["../../../../../packages/core/admin/admin/src/pages/UseCasePage.tsx"],
  "sourcesContent": ["import * as React from 'react';\r\n\r\nimport {\r\n  Box,\r\n  Button,\r\n  Flex,\r\n  Main,\r\n  SingleSelectOption,\r\n  SingleSelect,\r\n  TextButton,\r\n  TextInput,\r\n  Typography,\r\n  Field,\r\n} from '@strapi/design-system';\r\nimport { parse } from 'qs';\r\nimport { useIntl } from 'react-intl';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\n\r\nimport { PrivateRoute } from '../components/PrivateRoute';\r\nimport { Logo } from '../components/UnauthenticatedLogo';\r\nimport { useAuth } from '../features/Auth';\r\nimport { useNotification } from '../features/Notifications';\r\nimport { LayoutContent, UnauthenticatedLayout } from '../layouts/UnauthenticatedLayout';\r\n\r\nexport const options = [\r\n  {\r\n    intlLabel: {\r\n      id: 'Usecase.front-end',\r\n      defaultMessage: 'Front-end developer',\r\n    },\r\n    value: 'front_end_developer',\r\n  },\r\n  {\r\n    intlLabel: {\r\n      id: 'Usecase.back-end',\r\n      defaultMessage: 'Back-end developer',\r\n    },\r\n    value: 'back_end_developer',\r\n  },\r\n  {\r\n    intlLabel: {\r\n      id: 'Usecase.full-stack',\r\n      defaultMessage: 'Full-stack developer',\r\n    },\r\n    value: 'full_stack_developer',\r\n  },\r\n  {\r\n    intlLabel: {\r\n      id: 'global.content-manager',\r\n      defaultMessage: 'Content Manager',\r\n    },\r\n    value: 'content_manager',\r\n  },\r\n  {\r\n    intlLabel: {\r\n      id: 'Usecase.content-creator',\r\n      defaultMessage: 'Content Creator',\r\n    },\r\n    value: 'content_creator',\r\n  },\r\n  {\r\n    intlLabel: {\r\n      id: 'Usecase.other',\r\n      defaultMessage: 'Other',\r\n    },\r\n    value: 'other',\r\n  },\r\n];\r\n\r\nconst UseCasePage = () => {\r\n  const { toggleNotification } = useNotification();\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const { formatMessage } = useIntl();\r\n  const [role, setRole] = React.useState<string | number | null>(null);\r\n  const [otherRole, setOtherRole] = React.useState('');\r\n\r\n  const { firstname, email } = useAuth('UseCasePage', (state) => state.user) ?? {};\r\n  const { hasAdmin } = parse(location.search, { ignoreQueryPrefix: true });\r\n  const isOther = role === 'other';\r\n\r\n  const handleSubmit = async (event: React.FormEvent, skipPersona: boolean) => {\r\n    event.preventDefault();\r\n    try {\r\n      await fetch('https://analytics.strapi.io/register', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          email,\r\n          username: firstname,\r\n          firstAdmin: Boolean(!hasAdmin),\r\n          persona: {\r\n            role: skipPersona ? undefined : role,\r\n            otherRole: skipPersona ? undefined : otherRole,\r\n          },\r\n        }),\r\n      });\r\n\r\n      toggleNotification({\r\n        type: 'success',\r\n        message: formatMessage({\r\n          id: 'Usecase.notification.success.project-created',\r\n          defaultMessage: 'Project has been successfully created',\r\n        }),\r\n      });\r\n      navigate('/');\r\n    } catch (err) {\r\n      // Silent\r\n    }\r\n  };\r\n\r\n  return (\r\n    <UnauthenticatedLayout>\r\n      <Main labelledBy=\"usecase-title\">\r\n        <LayoutContent>\r\n          <form onSubmit={(e) => handleSubmit(e, false)}>\r\n            <Flex direction=\"column\" paddingBottom={7}>\r\n              <Logo />\r\n              <Box paddingTop={6} paddingBottom={1} width={`25rem`}>\r\n                <Typography textAlign=\"center\" variant=\"alpha\" tag=\"h1\" id=\"usecase-title\">\r\n                  {formatMessage({\r\n                    id: 'Usecase.title',\r\n                    defaultMessage: 'Tell us a bit more about yourself',\r\n                  })}\r\n                </Typography>\r\n              </Box>\r\n            </Flex>\r\n            <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\r\n              <Field.Root name=\"usecase\">\r\n                <Field.Label>\r\n                  {formatMessage({\r\n                    id: 'Usecase.input.work-type',\r\n                    defaultMessage: 'What type of work do you do?',\r\n                  })}\r\n                </Field.Label>\r\n                <SingleSelect onChange={(value) => setRole(value)} value={role}>\r\n                  {options.map(({ intlLabel, value }) => (\r\n                    <SingleSelectOption key={value} value={value}>\r\n                      {formatMessage(intlLabel)}\r\n                    </SingleSelectOption>\r\n                  ))}\r\n                </SingleSelect>\r\n              </Field.Root>\r\n              {isOther && (\r\n                <Field.Root name=\"other\">\r\n                  <Field.Label>\r\n                    {formatMessage({ id: 'Usecase.other', defaultMessage: 'Other' })}\r\n                  </Field.Label>\r\n                  <TextInput value={otherRole} onChange={(e) => setOtherRole(e.target.value)} />\r\n                </Field.Root>\r\n              )}\r\n              <Button type=\"submit\" size=\"L\" fullWidth disabled={!role}>\r\n                {formatMessage({ id: 'global.finish', defaultMessage: 'Finish' })}\r\n              </Button>\r\n            </Flex>\r\n          </form>\r\n        </LayoutContent>\r\n        <Flex justifyContent=\"center\">\r\n          <Box paddingTop={4}>\r\n            <TextButton\r\n              onClick={(event: React.MouseEvent<HTMLButtonElement>) => handleSubmit(event, true)}\r\n            >\r\n              {formatMessage({\r\n                id: 'Usecase.button.skip',\r\n                defaultMessage: 'Skip this question',\r\n              })}\r\n            </TextButton>\r\n          </Box>\r\n        </Flex>\r\n      </Main>\r\n    </UnauthenticatedLayout>\r\n  );\r\n};\r\n\r\nconst PrivateUseCasePage = () => {\r\n  return (\r\n    <PrivateRoute>\r\n      <UseCasePage />\r\n    </PrivateRoute>\r\n  );\r\n};\r\n\r\nexport { PrivateUseCasePage, UseCasePage };\r\n"],
  "mappings": "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",
  "names": []
}
