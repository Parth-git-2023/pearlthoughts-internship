{
  "version": 3,
  "sources": ["../../../../../packages/core/admin/ee/admin/src/pages/SettingsPage/pages/SingleSignOnPage.tsx"],
  "sourcesContent": ["import {\r\n  Button,\r\n  Flex,\r\n  Grid,\r\n  MultiSelect,\r\n  MultiSelectOption,\r\n  Typography,\r\n  Field,\r\n} from '@strapi/design-system';\r\nimport { Check } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\nimport * as yup from 'yup';\r\n\r\nimport {\r\n  Form,\r\n  FormHelpers,\r\n  InputProps,\r\n  useField,\r\n} from '../../../../../../admin/src/components/Form';\r\nimport { InputRenderer } from '../../../../../../admin/src/components/FormInputs/Renderer';\r\nimport { GradientBadge } from '../../../../../../admin/src/components/GradientBadge';\r\nimport { Layouts } from '../../../../../../admin/src/components/Layouts/Layout';\r\nimport { Page } from '../../../../../../admin/src/components/PageHelpers';\r\nimport { useTypedSelector } from '../../../../../../admin/src/core/store/hooks';\r\nimport { useNotification } from '../../../../../../admin/src/features/Notifications';\r\nimport { useAdminRoles } from '../../../../../../admin/src/hooks/useAdminRoles';\r\nimport { useAPIErrorHandler } from '../../../../../../admin/src/hooks/useAPIErrorHandler';\r\nimport { useRBAC } from '../../../../../../admin/src/hooks/useRBAC';\r\nimport {\r\n  useGetProviderOptionsQuery,\r\n  useUpdateProviderOptionsMutation,\r\n} from '../../../../../../admin/src/services/auth';\r\nimport { isBaseQueryError } from '../../../../../../admin/src/utils/baseQuery';\r\nimport { translatedErrors } from '../../../../../../admin/src/utils/translatedErrors';\r\nimport { ProvidersOptions } from '../../../../../../shared/contracts/admin';\r\n\r\nconst SCHEMA = yup.object().shape({\r\n  autoRegister: yup.bool().required(translatedErrors.required),\r\n  defaultRole: yup.mixed().when('autoRegister', (value, initSchema) => {\r\n    return value ? initSchema.required(translatedErrors.required) : initSchema.nullable();\r\n  }),\r\n  ssoLockedRoles: yup\r\n    .array()\r\n    .nullable()\r\n    .of(\r\n      yup.mixed().when('ssoLockedRoles', (value, initSchema) => {\r\n        return value ? initSchema.required(translatedErrors.required) : initSchema.nullable();\r\n      })\r\n    ),\r\n});\r\n\r\nexport const SingleSignOnPage = () => {\r\n  const { formatMessage } = useIntl();\r\n  const permissions = useTypedSelector((state) => state.admin_app.permissions);\r\n  const { toggleNotification } = useNotification();\r\n  const {\r\n    _unstableFormatAPIError: formatAPIError,\r\n    _unstableFormatValidationErrors: formatValidationErrors,\r\n  } = useAPIErrorHandler();\r\n\r\n  const { isLoading: isLoadingProviderOptions, data } = useGetProviderOptionsQuery();\r\n\r\n  const [updateProviderOptions, { isLoading: isSubmittingForm }] =\r\n    useUpdateProviderOptionsMutation();\r\n\r\n  const {\r\n    isLoading: isLoadingPermissions,\r\n    allowedActions: { canUpdate, canRead: canReadRoles },\r\n  } = useRBAC({\r\n    ...permissions.settings?.sso,\r\n    readRoles: permissions.settings?.roles.read ?? [],\r\n  });\r\n\r\n  const { roles, isLoading: isLoadingRoles } = useAdminRoles(undefined, {\r\n    skip: !canReadRoles,\r\n  });\r\n\r\n  const handleSubmit = async (\r\n    body: ProvidersOptions.Request['body'],\r\n    helpers: FormHelpers<ProvidersOptions.Request['body']>\r\n  ) => {\r\n    try {\r\n      const res = await updateProviderOptions(body);\r\n\r\n      if ('error' in res) {\r\n        if (isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\r\n          helpers.setErrors(formatValidationErrors(res.error));\r\n        } else {\r\n          toggleNotification({\r\n            type: 'danger',\r\n            message: formatAPIError(res.error),\r\n          });\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      toggleNotification({\r\n        type: 'success',\r\n        message: formatMessage({ id: 'notification.success.saved' }),\r\n      });\r\n    } catch (err) {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatMessage({\r\n          id: 'notification.error',\r\n          defaultMessage: 'An error occurred, please try again.',\r\n        }),\r\n      });\r\n    }\r\n  };\r\n\r\n  const isLoadingData = isLoadingRoles || isLoadingPermissions || isLoadingProviderOptions;\r\n\r\n  return (\r\n    <Layouts.Root>\r\n      <Page.Title>\r\n        {formatMessage(\r\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\r\n          {\r\n            name: 'SSO',\r\n          }\r\n        )}\r\n      </Page.Title>\r\n      <Page.Main aria-busy={isSubmittingForm || isLoadingData} tabIndex={-1}>\r\n        <Form\r\n          method=\"PUT\"\r\n          onSubmit={handleSubmit}\r\n          validationSchema={SCHEMA}\r\n          disabled={!canUpdate}\r\n          initialValues={\r\n            data || {\r\n              autoRegister: false,\r\n              defaultRole: null,\r\n              ssoLockedRoles: null,\r\n            }\r\n          }\r\n        >\r\n          {({ modified, isSubmitting }) => (\r\n            <>\r\n              <Layouts.Header\r\n                primaryAction={\r\n                  <Button\r\n                    disabled={!modified}\r\n                    loading={isSubmitting}\r\n                    startIcon={<Check />}\r\n                    type=\"submit\"\r\n                  >\r\n                    {formatMessage({\r\n                      id: 'global.save',\r\n                      defaultMessage: 'Save',\r\n                    })}\r\n                  </Button>\r\n                }\r\n                title={formatMessage({\r\n                  id: 'Settings.sso.title',\r\n                  defaultMessage: 'Single Sign-On',\r\n                })}\r\n                subtitle={formatMessage({\r\n                  id: 'Settings.sso.description',\r\n                  defaultMessage: 'Configure the settings for the Single Sign-On feature.',\r\n                })}\r\n                secondaryAction={\r\n                  <GradientBadge\r\n                    label={formatMessage({\r\n                      id: 'components.premiumFeature.title',\r\n                      defaultMessage: 'Premium feature',\r\n                    })}\r\n                  />\r\n                }\r\n              />\r\n              <Layouts.Content>\r\n                {isSubmitting || isLoadingData ? (\r\n                  <Page.Loading />\r\n                ) : (\r\n                  <Flex\r\n                    direction=\"column\"\r\n                    alignItems=\"stretch\"\r\n                    gap={4}\r\n                    background=\"neutral0\"\r\n                    padding={6}\r\n                    shadow=\"filterShadow\"\r\n                    hasRadius\r\n                  >\r\n                    <Typography variant=\"delta\" tag=\"h2\">\r\n                      {formatMessage({\r\n                        id: 'global.settings',\r\n                        defaultMessage: 'Settings',\r\n                      })}\r\n                    </Typography>\r\n                    <Grid.Root gap={4}>\r\n                      {[\r\n                        {\r\n                          hint: formatMessage({\r\n                            id: 'Settings.sso.form.registration.description',\r\n                            defaultMessage: 'Create new user on SSO login if no account exists',\r\n                          }),\r\n                          label: formatMessage({\r\n                            id: 'Settings.sso.form.registration.label',\r\n                            defaultMessage: 'Auto-registration',\r\n                          }),\r\n                          name: 'autoRegister',\r\n                          size: 6,\r\n                          type: 'boolean' as const,\r\n                        },\r\n                        {\r\n                          hint: formatMessage({\r\n                            id: 'Settings.sso.form.defaultRole.description',\r\n                            defaultMessage:\r\n                              'It will attach the new authenticated user to the selected role',\r\n                          }),\r\n                          label: formatMessage({\r\n                            id: 'Settings.sso.form.defaultRole.label',\r\n                            defaultMessage: 'Default role',\r\n                          }),\r\n                          name: 'defaultRole',\r\n                          options: roles.map(({ id, name }) => ({\r\n                            label: name,\r\n                            value: id.toString(),\r\n                          })),\r\n                          placeholder: formatMessage({\r\n                            id: 'components.InputSelect.option.placeholder',\r\n                            defaultMessage: 'Choose here',\r\n                          }),\r\n                          size: 6,\r\n                          type: 'enumeration' as const,\r\n                        },\r\n                        {\r\n                          hint: formatMessage({\r\n                            id: 'Settings.sso.form.localAuthenticationLock.description',\r\n                            defaultMessage:\r\n                              'Select the roles for which you want to disable the local authentication',\r\n                          }),\r\n                          label: formatMessage({\r\n                            id: 'Settings.sso.form.localAuthenticationLock.label',\r\n                            defaultMessage: 'Local authentication lock-out',\r\n                          }),\r\n                          name: 'ssoLockedRoles',\r\n                          options: roles.map(({ id, name }) => ({\r\n                            label: name,\r\n                            value: id.toString(),\r\n                          })),\r\n                          placeholder: formatMessage({\r\n                            id: 'components.InputSelect.option.placeholder',\r\n                            defaultMessage: 'Choose here',\r\n                          }),\r\n                          size: 6,\r\n                          type: 'multi' as const,\r\n                        },\r\n                      ].map(({ size, ...field }) => (\r\n                        <Grid.Item\r\n                          key={field.name}\r\n                          col={size}\r\n                          direction=\"column\"\r\n                          alignItems=\"stretch\"\r\n                        >\r\n                          <FormInputRenderer {...field} />\r\n                        </Grid.Item>\r\n                      ))}\r\n                    </Grid.Root>\r\n                  </Flex>\r\n                )}\r\n              </Layouts.Content>\r\n            </>\r\n          )}\r\n        </Form>\r\n      </Page.Main>\r\n    </Layouts.Root>\r\n  );\r\n};\r\n\r\ntype FormInputProps = InputProps | MultiSelectInputProps;\r\n\r\nconst FormInputRenderer = (props: FormInputProps) => {\r\n  switch (props.type) {\r\n    case 'multi':\r\n      return <MultiSelectInput {...props} />;\r\n    default:\r\n      return <InputRenderer {...props} />;\r\n  }\r\n};\r\n\r\ntype MultiSelectInputProps = Omit<Extract<InputProps, { type: 'enumeration' }>, 'type'> & {\r\n  type: 'multi';\r\n};\r\n\r\nconst MultiSelectInput = ({ hint, label, name, options, ...props }: MultiSelectInputProps) => {\r\n  const field = useField(name);\r\n\r\n  return (\r\n    <Field.Root name={name} hint={hint} error={field.error}>\r\n      <Field.Label>{label}</Field.Label>\r\n      <MultiSelect\r\n        onChange={(value) => field.onChange('ssoLockedRoles', value)}\r\n        onClear={() => field.onChange('ssoLockedRoles', [])}\r\n        value={field.value ?? []}\r\n        withTags\r\n        {...props}\r\n      >\r\n        {options.map(({ label, value }) => (\r\n          <MultiSelectOption key={value} value={value}>\r\n            {label}\r\n          </MultiSelectOption>\r\n        ))}\r\n      </MultiSelect>\r\n      <Field.Hint />\r\n      <Field.Error />\r\n    </Field.Root>\r\n  );\r\n};\r\n\r\nexport const ProtectedSSO = () => {\r\n  const permissions = useTypedSelector((state) => state.admin_app.permissions.settings?.sso?.main);\r\n\r\n  return (\r\n    <Page.Protect permissions={permissions}>\r\n      <SingleSignOnPage />\r\n    </Page.Protect>\r\n  );\r\n};\r\n"],
  "mappings": "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",
  "names": ["create", "label"]
}
