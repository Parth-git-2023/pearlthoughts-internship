{
  "version": 3,
  "sources": ["../../../../../packages/core/admin/admin/src/pages/Settings/pages/TransferTokens/ListView.tsx"],
  "sourcesContent": ["import * as React from 'react';\r\n\r\nimport { EmptyStateLayout, LinkButton } from '@strapi/design-system';\r\nimport { Plus } from '@strapi/icons';\r\nimport { EmptyDocuments } from '@strapi/icons/symbols';\r\nimport * as qs from 'qs';\r\nimport { useIntl } from 'react-intl';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\n\r\nimport { Layouts } from '../../../../components/Layouts/Layout';\r\nimport { Page } from '../../../../components/PageHelpers';\r\nimport { useTypedSelector } from '../../../../core/store/hooks';\r\nimport { useNotification } from '../../../../features/Notifications';\r\nimport { useTracking } from '../../../../features/Tracking';\r\nimport { useAPIErrorHandler } from '../../../../hooks/useAPIErrorHandler';\r\nimport { useOnce } from '../../../../hooks/useOnce';\r\nimport { useRBAC } from '../../../../hooks/useRBAC';\r\nimport {\r\n  useDeleteTransferTokenMutation,\r\n  useGetTransferTokensQuery,\r\n} from '../../../../services/transferTokens';\r\nimport { TRANSFER_TOKEN_TYPE } from '../../components/Tokens/constants';\r\nimport { Table } from '../../components/Tokens/Table';\r\n\r\nimport type { Data } from '@strapi/types';\r\n\r\nconst tableHeaders = [\r\n  {\r\n    name: 'name',\r\n    label: {\r\n      id: 'Settings.tokens.ListView.headers.name',\r\n      defaultMessage: 'Name',\r\n    },\r\n    sortable: true,\r\n  },\r\n  {\r\n    name: 'description',\r\n    label: {\r\n      id: 'Settings.tokens.ListView.headers.description',\r\n      defaultMessage: 'Description',\r\n    },\r\n    sortable: false,\r\n  },\r\n  {\r\n    name: 'createdAt',\r\n    label: {\r\n      id: 'Settings.tokens.ListView.headers.createdAt',\r\n      defaultMessage: 'Created at',\r\n    },\r\n    sortable: false,\r\n  },\r\n  {\r\n    name: 'lastUsedAt',\r\n    label: {\r\n      id: 'Settings.tokens.ListView.headers.lastUsedAt',\r\n      defaultMessage: 'Last used',\r\n    },\r\n    sortable: false,\r\n  },\r\n] as const;\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ListView\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst ListView = () => {\r\n  const { formatMessage } = useIntl();\r\n  const { toggleNotification } = useNotification();\r\n  const permissions = useTypedSelector(\r\n    (state) => state.admin_app.permissions.settings?.['transfer-tokens']\r\n  );\r\n  const {\r\n    isLoading: isLoadingRBAC,\r\n    allowedActions: { canCreate, canDelete, canUpdate, canRead },\r\n  } = useRBAC(permissions);\r\n  const navigate = useNavigate();\r\n  const { trackUsage } = useTracking();\r\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\r\n\r\n  React.useEffect(() => {\r\n    navigate({ search: qs.stringify({ sort: 'name:ASC' }, { encode: false }) });\r\n  }, [navigate]);\r\n\r\n  useOnce(() => {\r\n    trackUsage('willAccessTokenList', {\r\n      tokenType: TRANSFER_TOKEN_TYPE,\r\n    });\r\n  });\r\n\r\n  const headers = tableHeaders.map((header) => ({\r\n    ...header,\r\n    label: formatMessage(header.label),\r\n  }));\r\n\r\n  const {\r\n    data: transferTokens = [],\r\n    isLoading: isLoadingTokens,\r\n    error,\r\n  } = useGetTransferTokensQuery(undefined, {\r\n    skip: !canRead,\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    if (transferTokens) {\r\n      trackUsage('didAccessTokenList', {\r\n        number: transferTokens.length,\r\n        tokenType: TRANSFER_TOKEN_TYPE,\r\n      });\r\n    }\r\n  }, [trackUsage, transferTokens]);\r\n\r\n  React.useEffect(() => {\r\n    if (error) {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatAPIError(error),\r\n      });\r\n    }\r\n  }, [error, formatAPIError, toggleNotification]);\r\n\r\n  const [deleteToken] = useDeleteTransferTokenMutation();\r\n\r\n  const handleDelete = async (id: Data.ID) => {\r\n    try {\r\n      const res = await deleteToken(id);\r\n\r\n      if ('error' in res) {\r\n        toggleNotification({\r\n          type: 'danger',\r\n          message: formatAPIError(res.error),\r\n        });\r\n      }\r\n    } catch {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occured' }),\r\n      });\r\n    }\r\n  };\r\n\r\n  const isLoading = isLoadingTokens || isLoadingRBAC;\r\n\r\n  return (\r\n    <>\r\n      <Page.Title>\r\n        {formatMessage(\r\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\r\n          {\r\n            name: 'Transfer Tokens',\r\n          }\r\n        )}\r\n      </Page.Title>\r\n      <Layouts.Header\r\n        title={formatMessage({\r\n          id: 'Settings.transferTokens.title',\r\n          defaultMessage: 'Transfer Tokens',\r\n        })}\r\n        subtitle={formatMessage({\r\n          id: 'Settings.transferTokens.description',\r\n          defaultMessage: '\"List of generated transfer tokens\"', // TODO change this message\r\n        })}\r\n        primaryAction={\r\n          canCreate ? (\r\n            <LinkButton\r\n              role=\"button\"\r\n              tag={Link}\r\n              data-testid=\"create-transfer-token-button\"\r\n              startIcon={<Plus />}\r\n              size=\"S\"\r\n              onClick={() =>\r\n                trackUsage('willAddTokenFromList', {\r\n                  tokenType: TRANSFER_TOKEN_TYPE,\r\n                })\r\n              }\r\n              to=\"/settings/transfer-tokens/create\"\r\n            >\r\n              {formatMessage({\r\n                id: 'Settings.transferTokens.create',\r\n                defaultMessage: 'Create new Transfer Token',\r\n              })}\r\n            </LinkButton>\r\n          ) : undefined\r\n        }\r\n      />\r\n      {!canRead ? (\r\n        <Page.NoPermissions />\r\n      ) : (\r\n        <Page.Main aria-busy={isLoading}>\r\n          <Layouts.Content>\r\n            {transferTokens.length > 0 && (\r\n              <Table\r\n                permissions={{ canRead, canDelete, canUpdate }}\r\n                headers={headers}\r\n                isLoading={isLoading}\r\n                onConfirmDelete={handleDelete}\r\n                tokens={transferTokens}\r\n                tokenType={TRANSFER_TOKEN_TYPE}\r\n              />\r\n            )}\r\n            {canCreate && transferTokens.length === 0 ? (\r\n              <EmptyStateLayout\r\n                action={\r\n                  <LinkButton\r\n                    tag={Link}\r\n                    variant=\"secondary\"\r\n                    startIcon={<Plus />}\r\n                    to=\"/settings/transfer-tokens/create\"\r\n                  >\r\n                    {formatMessage({\r\n                      id: 'Settings.transferTokens.addNewToken',\r\n                      defaultMessage: 'Add new Transfer Token',\r\n                    })}\r\n                  </LinkButton>\r\n                }\r\n                icon={<EmptyDocuments width=\"16rem\" />}\r\n                content={formatMessage({\r\n                  id: 'Settings.transferTokens.addFirstToken',\r\n                  defaultMessage: 'Add your first Transfer Token',\r\n                })}\r\n              />\r\n            ) : null}\r\n            {!canCreate && transferTokens.length === 0 ? (\r\n              <EmptyStateLayout\r\n                icon={<EmptyDocuments width=\"16rem\" />}\r\n                content={formatMessage({\r\n                  id: 'Settings.transferTokens.emptyStateLayout',\r\n                  defaultMessage: 'You donâ€™t have any content yet...',\r\n                })}\r\n              />\r\n            ) : null}\r\n          </Layouts.Content>\r\n        </Page.Main>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ProtectedListView\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst ProtectedListView = () => {\r\n  const permissions = useTypedSelector(\r\n    (state) => state.admin_app.permissions.settings?.['transfer-tokens'].main\r\n  );\r\n\r\n  return (\r\n    <Page.Protect permissions={permissions}>\r\n      <ListView />\r\n    </Page.Protect>\r\n  );\r\n};\r\n\r\nexport { ListView, ProtectedListView };\r\n"],
  "mappings": "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",
  "names": []
}
