{
  "version": 3,
  "sources": ["../../../../../packages/core/admin/admin/src/components/UnstableGuidedTour/Tours.tsx", "../../../../../packages/core/admin/admin/src/components/UnstableGuidedTour/Context.tsx", "../../../../../packages/core/admin/admin/src/hooks/usePersistentState.ts", "../../../../../packages/core/admin/admin/src/components/UnstableGuidedTour/Step.tsx"],
  "sourcesContent": ["import * as React from 'react';\r\n\r\nimport { Box, Popover, Portal, Flex, Button, FlexProps } from '@strapi/design-system';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { useGetGuidedTourMetaQuery } from '../../services/admin';\r\n\r\nimport {\r\n  type State,\r\n  type Action,\r\n  unstableUseGuidedTour,\r\n  ValidTourName,\r\n  ExtendedCompletedActions,\r\n} from './Context';\r\nimport { Step, StepCount, createStepComponents } from './Step';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Tours\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst GotItAction = ({ onClick }: { onClick: () => void }) => {\r\n  return (\r\n    <Button onClick={onClick}>\r\n      <FormattedMessage id=\"tours.gotIt\" defaultMessage=\"Got it\" />\r\n    </Button>\r\n  );\r\n};\r\n\r\nconst tours = {\r\n  contentTypeBuilder: createTour('contentTypeBuilder', [\r\n    {\r\n      name: 'Introduction',\r\n      content: (Step) => (\r\n        <Step.Root side=\"bottom\" withArrow={false}>\r\n          <Step.Title\r\n            id=\"tours.contentTypeBuilder.Introduction.title\"\r\n            defaultMessage=\"Content-Type Builder\"\r\n          />\r\n          <Step.Content\r\n            id=\"tours.contentTypeBuilder.Introduction.content\"\r\n            defaultMessage=\"Create and manage your content structure with collection types, single types and components.\"\r\n          />\r\n          <Step.Actions showSkip />\r\n        </Step.Root>\r\n      ),\r\n    },\r\n    {\r\n      name: 'CollectionTypes',\r\n      content: (Step) => (\r\n        <Step.Root side=\"right\" sideOffset={16}>\r\n          <Step.Title\r\n            id=\"tours.contentTypeBuilder.CollectionTypes.title\"\r\n            defaultMessage=\"Collection Types\"\r\n          />\r\n          <Step.Content\r\n            id=\"tours.contentTypeBuilder.CollectionTypes.content\"\r\n            defaultMessage=\"A content structure that can manage multiple entries, such as articles or products.\"\r\n          />\r\n          <Step.Actions />\r\n        </Step.Root>\r\n      ),\r\n    },\r\n    {\r\n      name: 'SingleTypes',\r\n      content: (Step) => (\r\n        <Step.Root side=\"right\" sideOffset={16}>\r\n          <Step.Title\r\n            id=\"tours.contentTypeBuilder.SingleTypes.title\"\r\n            defaultMessage=\"Single Types\"\r\n          />\r\n          <Step.Content\r\n            id=\"tours.contentTypeBuilder.SingleTypes.content\"\r\n            defaultMessage=\"A content structure that can manage a single entry, such as a homepage or a header.\"\r\n          />\r\n          <Step.Actions />\r\n        </Step.Root>\r\n      ),\r\n    },\r\n    {\r\n      name: 'Components',\r\n      content: (Step, { dispatch }) => (\r\n        <Step.Root side=\"right\" sideOffset={16}>\r\n          <Step.Title id=\"tours.contentTypeBuilder.Components.title\" defaultMessage=\"Components\" />\r\n          <Step.Content\r\n            id=\"tours.contentTypeBuilder.Components.content\"\r\n            defaultMessage=\"A reusable content structure that can be used across multiple content types, such as buttons, sliders or cards.\"\r\n          />\r\n          <Step.Actions justifyContent=\"flex-end\">\r\n            <GotItAction\r\n              onClick={() => dispatch({ type: 'next_step', payload: 'contentTypeBuilder' })}\r\n            />\r\n          </Step.Actions>\r\n        </Step.Root>\r\n      ),\r\n    },\r\n    {\r\n      name: 'Finish',\r\n      content: (Step) => (\r\n        <Step.Root side=\"right\">\r\n          <Step.Title\r\n            id=\"tours.contentTypeBuilder.Finish.title\"\r\n            defaultMessage=\"It’s time to create content!\"\r\n          />\r\n          <Step.Content\r\n            id=\"tours.contentTypeBuilder.Finish.content\"\r\n            defaultMessage=\"Now that you created content types, you’ll be able to create content in the content manager.\"\r\n          />\r\n          <Step.Actions showStepCount={false} to=\"/content-manager\" />\r\n        </Step.Root>\r\n      ),\r\n      when: (completedActions) => completedActions.includes('didCreateContentTypeSchema'),\r\n    },\r\n  ]),\r\n  contentManager: createTour('contentManager', [\r\n    {\r\n      name: 'Introduction',\r\n      when: (completedActions) =>\r\n        completedActions.includes('didCreateContentTypeSchema') &&\r\n        !completedActions.includes('didCreateContent'),\r\n      content: (Step) => (\r\n        <Step.Root side=\"top\" withArrow={false}>\r\n          <Step.Title\r\n            id=\"tours.contentManager.Introduction.title\"\r\n            defaultMessage=\"Content manager\"\r\n          />\r\n          <Step.Content\r\n            id=\"tours.contentManager.Introduction.content\"\r\n            defaultMessage=\"Create and manage content from your collection types and single types.\"\r\n          />\r\n          <Step.Actions showSkip />\r\n        </Step.Root>\r\n      ),\r\n    },\r\n    {\r\n      name: 'Fields',\r\n      content: (Step) => (\r\n        <Step.Root sideOffset={-12}>\r\n          <Step.Title id=\"tours.contentManager.Fields.title\" defaultMessage=\"Fields\" />\r\n          <Step.Content\r\n            id=\"tours.contentManager.Fields.content\"\r\n            defaultMessage=\"Add content to the fields created in the Content-Type Builder.\"\r\n          />\r\n          <Step.Actions />\r\n        </Step.Root>\r\n      ),\r\n    },\r\n    {\r\n      name: 'Publish',\r\n      content: (Step, { dispatch }) => (\r\n        <Step.Root side=\"left\" align=\"center\">\r\n          <Step.Title id=\"tours.contentManager.Publish.title\" defaultMessage=\"Publish\" />\r\n          <Step.Content\r\n            id=\"tours.contentManager.Publish.content\"\r\n            defaultMessage=\"Publish entries to make their content available through the Document Service API.\"\r\n          />\r\n          <Step.Actions justifyContent=\"flex-end\">\r\n            <GotItAction\r\n              onClick={() => dispatch({ type: 'next_step', payload: 'contentManager' })}\r\n            />\r\n          </Step.Actions>\r\n        </Step.Root>\r\n      ),\r\n    },\r\n    {\r\n      name: 'Finish',\r\n      content: (Step) => (\r\n        <Step.Root side=\"right\">\r\n          <Step.Title\r\n            id=\"tours.contentManager.FinalStep.title\"\r\n            defaultMessage=\"It’s time to create API Tokens!\"\r\n          />\r\n          <Step.Content\r\n            id=\"tours.contentManager.FinalStep.content\"\r\n            defaultMessage=\"Now that you’ve created and published content, time to create API tokens and set up permissions.\"\r\n          />\r\n          <Step.Actions showStepCount={false} to=\"/settings/api-tokens\" />\r\n        </Step.Root>\r\n      ),\r\n      when: (completedActions) => completedActions.includes('didCreateContent'),\r\n    },\r\n  ]),\r\n  apiTokens: createTour('apiTokens', [\r\n    {\r\n      name: 'Introduction',\r\n      when: (completedActions) => !completedActions.includes('didCreateApiToken'),\r\n      content: (Step) => (\r\n        <Step.Root sideOffset={-36} withArrow={false}>\r\n          <Step.Title id=\"tours.apiTokens.Introduction.title\" defaultMessage=\"API tokens\" />\r\n          <Step.Content\r\n            id=\"tours.apiTokens.Introduction.content\"\r\n            defaultMessage=\"Create and manage API tokens with highly customizable permissions.\"\r\n          />\r\n          <Step.Actions showSkip />\r\n        </Step.Root>\r\n      ),\r\n    },\r\n    {\r\n      name: 'CreateAnAPIToken',\r\n      content: (Step) => (\r\n        <Step.Root side=\"bottom\" align=\"end\" sideOffset={-10}>\r\n          <Step.Title\r\n            id=\"tours.apiTokens.CreateAnAPIToken.title\"\r\n            defaultMessage=\"Create an API token\"\r\n          />\r\n          <Step.Content\r\n            id=\"tours.apiTokens.CreateAnAPIToken.content\"\r\n            defaultMessage=\"Create a new API token. Choose a name, duration and type.\"\r\n          />\r\n          <Step.Actions />\r\n        </Step.Root>\r\n      ),\r\n    },\r\n    {\r\n      name: 'CopyAPIToken',\r\n      content: (Step, { dispatch }) => (\r\n        <Step.Root side=\"bottom\" align=\"start\" sideOffset={-5}>\r\n          <Step.Title\r\n            id=\"tours.apiTokens.CopyAPIToken.title\"\r\n            defaultMessage=\"Copy your new API token\"\r\n          />\r\n          <Step.Content\r\n            id=\"tours.apiTokens.CopyAPIToken.content\"\r\n            defaultMessage=\"Make sure to do it now, you won’t be able to see it again. You’ll need to generate a new one if you lose it.\"\r\n          />\r\n          <Step.Actions>\r\n            <StepCount tourName=\"apiTokens\" />\r\n            <GotItAction onClick={() => dispatch({ type: 'next_step', payload: 'apiTokens' })} />\r\n          </Step.Actions>\r\n        </Step.Root>\r\n      ),\r\n      when: (completedActions) => completedActions.includes('didCreateApiToken'),\r\n    },\r\n    {\r\n      name: 'Finish',\r\n      content: (Step) => (\r\n        <Step.Root side=\"right\" align=\"start\">\r\n          <Step.Title\r\n            id=\"tours.apiTokens.FinalStep.title\"\r\n            defaultMessage=\"It’s time to deploy your application!\"\r\n          />\r\n          <Step.Content\r\n            id=\"tours.apiTokens.FinalStep.content\"\r\n            defaultMessage=\"Your application is ready to be deployed and its content to be shared with the world!\"\r\n          />\r\n          <Step.Actions showStepCount={false} to=\"/\" />\r\n        </Step.Root>\r\n      ),\r\n      when: (completedActions) => completedActions.includes('didCopyApiToken'),\r\n    },\r\n  ]),\r\n  strapiCloud: createTour('strapiCloud', []),\r\n} as const;\r\n\r\ntype Tours = typeof tours;\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * GuidedTourTooltip\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ntype Content = (\r\n  Step: Step,\r\n  {\r\n    state,\r\n    dispatch,\r\n  }: {\r\n    state: State;\r\n    dispatch: React.Dispatch<Action>;\r\n  }\r\n) => React.ReactNode;\r\n\r\ntype GuidedTourTooltipProps = {\r\n  children: React.ReactNode;\r\n  content: Content;\r\n  tourName: ValidTourName;\r\n  step: number;\r\n  when?: (completedActions: ExtendedCompletedActions) => boolean;\r\n};\r\n\r\nconst UnstableGuidedTourTooltip = ({ children, ...props }: GuidedTourTooltipProps) => {\r\n  const state = unstableUseGuidedTour('TooltipWrapper', (s) => s.state);\r\n  const hasFutureFlag = window.strapi.future.isEnabled('unstableGuidedTour');\r\n\r\n  if (!state.enabled) {\r\n    return <>{children}</>;\r\n  }\r\n\r\n  if (!hasFutureFlag) {\r\n    return <>{children}</>;\r\n  }\r\n\r\n  return <GuidedTourTooltipImpl {...props}>{children}</GuidedTourTooltipImpl>;\r\n};\r\n\r\nconst GuidedTourOverlay = styled(Box)`\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background-color: rgba(50, 50, 77, 0.2);\r\n  z-index: 10;\r\n`;\r\n\r\nconst GuidedTourTooltipImpl = ({\r\n  children,\r\n  content,\r\n  tourName,\r\n  step,\r\n  when,\r\n}: GuidedTourTooltipProps) => {\r\n  const { data: guidedTourMeta } = useGetGuidedTourMetaQuery();\r\n\r\n  const state = unstableUseGuidedTour('UnstableGuidedTourTooltip', (s) => s.state);\r\n  const dispatch = unstableUseGuidedTour('UnstableGuidedTourTooltip', (s) => s.dispatch);\r\n\r\n  const isCurrentStep = state.tours[tourName].currentStep === step;\r\n  const isStepConditionMet = when ? when(state.completedActions) : true;\r\n  const isPopoverOpen =\r\n    guidedTourMeta?.data?.isFirstSuperAdminUser &&\r\n    !state.tours[tourName].isCompleted &&\r\n    isCurrentStep &&\r\n    isStepConditionMet;\r\n\r\n  // Lock the scroll\r\n  React.useEffect(() => {\r\n    if (!isPopoverOpen) return;\r\n\r\n    const originalStyle = window.getComputedStyle(document.body).overflow;\r\n    document.body.style.overflow = 'hidden';\r\n\r\n    return () => {\r\n      document.body.style.overflow = originalStyle;\r\n    };\r\n  }, [isPopoverOpen]);\r\n\r\n  // TODO: This isn't great but the only solution for syncing the completed actions\r\n  React.useEffect(() => {\r\n    dispatch({\r\n      type: 'set_completed_actions',\r\n      payload: guidedTourMeta?.data?.completedActions ?? [],\r\n    });\r\n  }, [dispatch, guidedTourMeta?.data?.completedActions]);\r\n\r\n  const Step = React.useMemo(() => createStepComponents(tourName), [tourName]);\r\n\r\n  return (\r\n    <>\r\n      {isPopoverOpen && (\r\n        <Portal>\r\n          <GuidedTourOverlay />\r\n        </Portal>\r\n      )}\r\n      <Popover.Root open={isPopoverOpen}>\r\n        <Popover.Anchor>{children}</Popover.Anchor>\r\n        {content(Step, { state, dispatch })}\r\n      </Popover.Root>\r\n    </>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Tour factory\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ntype TourStep<P extends string> = {\r\n  name: P;\r\n  content: Content;\r\n  when?: (completedActions: ExtendedCompletedActions) => boolean;\r\n};\r\n\r\nfunction createTour<const T extends ReadonlyArray<TourStep<string>>>(tourName: string, steps: T) {\r\n  type Components = {\r\n    [K in T[number]['name']]: React.ComponentType<{ children: React.ReactNode }>;\r\n  };\r\n\r\n  const tour = steps.reduce((acc, step, index) => {\r\n    if (step.name in acc) {\r\n      throw Error(`The tour: ${tourName} with step: ${step.name} has already been registered`);\r\n    }\r\n\r\n    acc[step.name as keyof Components] = ({ children }: { children: React.ReactNode }) => {\r\n      return (\r\n        <UnstableGuidedTourTooltip\r\n          tourName={tourName as ValidTourName}\r\n          step={index}\r\n          content={step.content}\r\n          when={step.when}\r\n        >\r\n          {children}\r\n        </UnstableGuidedTourTooltip>\r\n      );\r\n    };\r\n\r\n    return acc;\r\n  }, {} as Components);\r\n\r\n  return tour;\r\n}\r\n\r\nexport type { Content, Tours };\r\nexport { tours };\r\n", "import * as React from 'react';\r\n\r\nimport { produce } from 'immer';\r\n\r\nimport { GetGuidedTourMeta } from '../../../../shared/contracts/admin';\r\nimport { usePersistentState } from '../../hooks/usePersistentState';\r\nimport { createContext } from '../Context';\r\n\r\nimport { type Tours, tours as guidedTours } from './Tours';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * GuidedTourProvider\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ntype ValidTourName = keyof Tours;\r\n\r\nexport type ExtendedCompletedActions = (\r\n  | GetGuidedTourMeta.Response['data']['completedActions'][number]\r\n  | 'didCopyApiToken'\r\n)[];\r\n\r\ntype Action =\r\n  | {\r\n      type: 'next_step';\r\n      payload: ValidTourName;\r\n    }\r\n  | {\r\n      type: 'skip_tour';\r\n      payload: ValidTourName;\r\n    }\r\n  | {\r\n      type: 'set_completed_actions';\r\n      payload: ExtendedCompletedActions;\r\n    }\r\n  | {\r\n      type: 'skip_all_tours';\r\n    };\r\n\r\ntype Tour = Record<ValidTourName, { currentStep: number; length: number; isCompleted: boolean }>;\r\ntype State = {\r\n  tours: Tour;\r\n  enabled: boolean;\r\n  completedActions: ExtendedCompletedActions;\r\n};\r\n\r\nconst [GuidedTourProviderImpl, unstableUseGuidedTour] = createContext<{\r\n  state: State;\r\n  dispatch: React.Dispatch<Action>;\r\n}>('UnstableGuidedTour');\r\n\r\nfunction reducer(state: State, action: Action): State {\r\n  return produce(state, (draft) => {\r\n    if (action.type === 'next_step') {\r\n      const nextStep = draft.tours[action.payload].currentStep + 1;\r\n      draft.tours[action.payload].currentStep = nextStep;\r\n      draft.tours[action.payload].isCompleted = nextStep === draft.tours[action.payload].length;\r\n    }\r\n\r\n    if (action.type === 'skip_tour') {\r\n      draft.tours[action.payload].isCompleted = true;\r\n    }\r\n\r\n    if (action.type === 'set_completed_actions') {\r\n      draft.completedActions = [...new Set([...draft.completedActions, ...action.payload])];\r\n    }\r\n\r\n    if (action.type === 'skip_all_tours') {\r\n      draft.enabled = false;\r\n    }\r\n  });\r\n}\r\n\r\nconst STORAGE_KEY = 'STRAPI_GUIDED_TOUR';\r\n\r\nconst UnstableGuidedTourContext = ({\r\n  children,\r\n  enabled = true,\r\n}: {\r\n  children: React.ReactNode;\r\n  enabled?: boolean;\r\n}) => {\r\n  const initialTourState = Object.keys(guidedTours).reduce((acc, tourName) => {\r\n    const tourLength = Object.keys(guidedTours[tourName as ValidTourName]).length;\r\n    acc[tourName as ValidTourName] = {\r\n      currentStep: 0,\r\n      length: tourLength,\r\n      isCompleted: false,\r\n    };\r\n\r\n    return acc;\r\n  }, {} as Tour);\r\n\r\n  const [tours, setTours] = usePersistentState<State>(STORAGE_KEY, {\r\n    tours: initialTourState,\r\n    enabled,\r\n    completedActions: [],\r\n  });\r\n  const [state, dispatch] = React.useReducer(reducer, tours);\r\n\r\n  // Sync local storage\r\n  React.useEffect(() => {\r\n    if (window.strapi.future.isEnabled('unstableGuidedTour')) {\r\n      setTours(state);\r\n    }\r\n  }, [state, setTours]);\r\n\r\n  return (\r\n    <GuidedTourProviderImpl state={state} dispatch={dispatch}>\r\n      {children}\r\n    </GuidedTourProviderImpl>\r\n  );\r\n};\r\n\r\nexport type { Action, State, ValidTourName };\r\nexport { UnstableGuidedTourContext, unstableUseGuidedTour, reducer };\r\n", "import { useEffect, useState } from 'react';\r\n\r\nconst usePersistentState = <T>(key: string, defaultValue: T) => {\r\n  const [value, setValue] = useState<T>(() => {\r\n    const stickyValue = window.localStorage.getItem(key);\r\n\r\n    if (stickyValue !== null) {\r\n      try {\r\n        return JSON.parse(stickyValue);\r\n      } catch {\r\n        // JSON.parse fails when the stored value is a primitive\r\n        return stickyValue;\r\n      }\r\n    }\r\n\r\n    return defaultValue;\r\n  });\r\n\r\n  useEffect(() => {\r\n    window.localStorage.setItem(key, JSON.stringify(value));\r\n  }, [key, value]);\r\n\r\n  return [value, setValue] as const;\r\n};\r\n\r\nexport { usePersistentState };\r\n", "import * as React from 'react';\r\n\r\nimport {\r\n  Popover,\r\n  Box,\r\n  Flex,\r\n  Button,\r\n  Typography,\r\n  LinkButton,\r\n  FlexProps,\r\n} from '@strapi/design-system';\r\nimport { FormattedMessage, type MessageDescriptor } from 'react-intl';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { unstableUseGuidedTour, ValidTourName } from './Context';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Step factory\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ntype WithChildren = {\r\n  children: React.ReactNode;\r\n  id?: never;\r\n  defaultMessage?: never;\r\n};\r\n\r\ntype WithIntl = {\r\n  children?: undefined;\r\n  id: MessageDescriptor['id'];\r\n  defaultMessage: MessageDescriptor['defaultMessage'];\r\n  withArrow?: boolean;\r\n};\r\n\r\ntype WithActionsChildren = {\r\n  children: React.ReactNode;\r\n  showStepCount?: boolean;\r\n  showSkip?: boolean;\r\n};\r\n\r\ntype WithActionsProps = {\r\n  children?: undefined;\r\n  showStepCount?: boolean;\r\n  showSkip?: boolean;\r\n};\r\n\r\ntype StepProps = WithChildren | WithIntl;\r\ntype ActionsProps = WithActionsChildren | WithActionsProps;\r\n\r\ntype Step = {\r\n  Root: React.ForwardRefExoticComponent<\r\n    React.ComponentProps<typeof Popover.Content> & { withArrow?: boolean }\r\n  >;\r\n  Title: (props: StepProps) => React.ReactNode;\r\n  Content: (props: StepProps) => React.ReactNode;\r\n  Actions: (props: ActionsProps & { to?: string } & FlexProps) => React.ReactNode;\r\n};\r\n\r\nconst ActionsContainer = styled(Flex)`\r\n  border-top: ${({ theme }) => `1px solid ${theme.colors.neutral150}`};\r\n`;\r\n\r\n/**\r\n * TODO:\r\n * We should probably move all arrow styles + svg to the DS\r\n */\r\nconst PopoverArrow = styled(Popover.Arrow)`\r\n  fill: ${({ theme }) => theme.colors.neutral0};\r\n  transform: translateY(-16px) rotate(-90deg);\r\n`;\r\n\r\nexport const StepCount = ({ tourName }: { tourName: ValidTourName }) => {\r\n  const state = unstableUseGuidedTour('GuidedTourPopover', (s) => s.state);\r\n  const currentStep = state.tours[tourName].currentStep + 1;\r\n  // TODO: Currently all tours do not count their last step, but we should find a way to make this more smart\r\n  const displayedLength = state.tours[tourName].length - 1;\r\n\r\n  return (\r\n    <Typography variant=\"omega\" fontSize=\"12px\">\r\n      <FormattedMessage\r\n        id=\"tours.stepCount\"\r\n        defaultMessage=\"Step {currentStep} of {tourLength}\"\r\n        values={{ currentStep, tourLength: displayedLength }}\r\n      />\r\n    </Typography>\r\n  );\r\n};\r\n\r\nconst createStepComponents = (tourName: ValidTourName): Step => ({\r\n  Root: React.forwardRef(({ withArrow = true, ...props }, ref) => {\r\n    return (\r\n      <Popover.Content ref={ref} side=\"top\" align=\"center\" style={{ border: 'none' }} {...props}>\r\n        {withArrow && (\r\n          <PopoverArrow asChild>\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              width=\"23\"\r\n              height=\"25\"\r\n              viewBox=\"0 0 23 25\"\r\n              fill=\"none\"\r\n            >\r\n              <path d=\"M11 24.5L1.82843 15.3284C0.266332 13.7663 0.26633 11.2337 1.82843 9.67157L11 0.5L23 12.5L11 24.5Z\" />\r\n            </svg>\r\n          </PopoverArrow>\r\n        )}\r\n        <Flex width=\"360px\" direction=\"column\" alignItems=\"start\">\r\n          {props.children}\r\n        </Flex>\r\n      </Popover.Content>\r\n    );\r\n  }),\r\n\r\n  Title: (props) => {\r\n    return (\r\n      <Box paddingTop={5} paddingLeft={5} paddingRight={5} paddingBottom={1} width=\"100%\">\r\n        {'children' in props ? (\r\n          props.children\r\n        ) : (\r\n          <Typography tag=\"div\" variant=\"omega\" fontWeight=\"bold\">\r\n            <FormattedMessage tagName=\"h1\" id={props.id} defaultMessage={props.defaultMessage} />\r\n          </Typography>\r\n        )}\r\n      </Box>\r\n    );\r\n  },\r\n\r\n  Content: (props) => (\r\n    <Box paddingBottom={5} paddingLeft={5} paddingRight={5} width=\"100%\">\r\n      {'children' in props ? (\r\n        props.children\r\n      ) : (\r\n        <Typography tag=\"div\" variant=\"omega\">\r\n          <FormattedMessage tagName=\"p\" id={props.id} defaultMessage={props.defaultMessage} />\r\n        </Typography>\r\n      )}\r\n    </Box>\r\n  ),\r\n\r\n  Actions: ({ showStepCount = true, showSkip = false, to, children, ...flexProps }) => {\r\n    const dispatch = unstableUseGuidedTour('GuidedTourPopover', (s) => s.dispatch);\r\n\r\n    return (\r\n      <ActionsContainer\r\n        width=\"100%\"\r\n        padding={3}\r\n        paddingLeft={5}\r\n        justifyContent={showStepCount ? 'space-between' : 'flex-end'}\r\n        {...flexProps}\r\n      >\r\n        {children ? (\r\n          children\r\n        ) : (\r\n          <>\r\n            {showStepCount && <StepCount tourName={tourName} />}\r\n            <Flex gap={2}>\r\n              {showSkip && (\r\n                <Button\r\n                  variant=\"tertiary\"\r\n                  onClick={() => dispatch({ type: 'skip_tour', payload: tourName })}\r\n                >\r\n                  <FormattedMessage id=\"tours.skip\" defaultMessage=\"Skip\" />\r\n                </Button>\r\n              )}\r\n              {to ? (\r\n                <LinkButton\r\n                  tag={NavLink}\r\n                  to={to}\r\n                  onClick={() => dispatch({ type: 'next_step', payload: tourName })}\r\n                >\r\n                  <FormattedMessage id=\"tours.next\" defaultMessage=\"Next\" />\r\n                </LinkButton>\r\n              ) : (\r\n                <Button onClick={() => dispatch({ type: 'next_step', payload: tourName })}>\r\n                  <FormattedMessage id=\"tours.next\" defaultMessage=\"Next\" />\r\n                </Button>\r\n              )}\r\n            </Flex>\r\n          </>\r\n        )}\r\n      </ActionsContainer>\r\n    );\r\n  },\r\n});\r\n\r\nexport type { Step };\r\nexport { createStepComponents };\r\n"],
  "mappings": "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",
  "names": ["React", "tours", "React", "import_jsx_runtime", "import_jsx_runtime", "Step", "_a"]
}
