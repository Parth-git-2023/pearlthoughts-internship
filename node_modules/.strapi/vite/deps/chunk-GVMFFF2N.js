import {
  pluginId
} from "./chunk-7PPO62D5.js";
import {
  useFetchClient
} from "./chunk-L6MVB4FQ.js";
import {
  useTracking
} from "./chunk-DHQERSO6.js";
import {
  useNotification
} from "./chunk-S4GSJQUH.js";
import {
  useMutation,
  useQuery
} from "./chunk-ICS3EKH5.js";
import {
  useIntl
} from "./chunk-2BDXRWHF.js";

// ../packages/core/upload/admin/src/hooks/useConfig.ts
var endpoint = `/${pluginId}/configuration`;
var queryKey = [pluginId, "configuration"];
var useConfig = () => {
  const { trackUsage } = useTracking();
  const { formatMessage } = useIntl();
  const { toggleNotification } = useNotification();
  const { get, put } = useFetchClient();
  const config = useQuery(
    queryKey,
    async () => {
      const res = await get(endpoint);
      return res.data.data;
    },
    {
      onError() {
        return toggleNotification({
          type: "danger",
          message: formatMessage({ id: "notification.error" })
        });
      },
      /**
       * We're cementing that we always expect an object to be returned.
       */
      select: (data) => data || {}
    }
  );
  const putMutation = useMutation(
    async (body) => {
      await put(endpoint, body);
    },
    {
      onSuccess() {
        trackUsage("didEditMediaLibraryConfig");
        config.refetch();
      },
      onError() {
        return toggleNotification({
          type: "danger",
          message: formatMessage({ id: "notification.error" })
        });
      }
    }
  );
  return {
    config,
    mutateConfig: putMutation
  };
};

export {
  useConfig
};
//# sourceMappingURL=chunk-GVMFFF2N.js.map
