{
  "version": 3,
  "sources": ["../../../../../packages/core/admin/admin/src/components/NpsSurvey.tsx"],
  "sourcesContent": ["import * as React from 'react';\r\n\r\nimport {\r\n  Box,\r\n  Flex,\r\n  IconButton,\r\n  Button,\r\n  Typography,\r\n  Textarea,\r\n  Portal,\r\n  Field,\r\n  VisuallyHidden,\r\n} from '@strapi/design-system';\r\nimport { Cross } from '@strapi/icons';\r\nimport { Formik, Form } from 'formik';\r\nimport { useIntl } from 'react-intl';\r\nimport { styled } from 'styled-components';\r\nimport * as yup from 'yup';\r\n\r\nimport { useAppInfo } from '../features/AppInfo';\r\nimport { useAuth } from '../features/Auth';\r\nimport { useNotification } from '../features/Notifications';\r\nimport { usePersistentState } from '../hooks/usePersistentState';\r\n\r\nconst FieldWrapper = styled(Field.Root)`\r\n  height: 3.2rem;\r\n  width: 3.2rem;\r\n\r\n  > label,\r\n  ~ input {\r\n    display: block;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n  }\r\n\r\n  > label {\r\n    color: inherit;\r\n    cursor: pointer;\r\n    padding: ${({ theme }) => theme.spaces[2]};\r\n    text-align: center;\r\n    vertical-align: middle;\r\n  }\r\n\r\n  &:hover,\r\n  &:focus-within {\r\n    background-color: ${({ theme }) => theme.colors.neutral0};\r\n  }\r\n\r\n  &:active,\r\n  &.selected {\r\n    color: ${({ theme }) => theme.colors.primary700};\r\n    background-color: ${({ theme }) => theme.colors.neutral0};\r\n    border-color: ${({ theme }) => theme.colors.primary700};\r\n  }\r\n`;\r\n\r\nconst delays = {\r\n  postResponse: 90 * 24 * 60 * 60 * 1000, // 90 days in ms\r\n  postFirstDismissal: 14 * 24 * 60 * 60 * 1000, // 14 days in ms\r\n  postSubsequentDismissal: 90 * 24 * 60 * 60 * 1000, // 90 days in ms\r\n  display: 30 * 60 * 1000, // 30 minutes in ms\r\n};\r\n\r\nconst ratingArray = [...Array(11).keys()];\r\n\r\nconst checkIfShouldShowSurvey = (settings: NpsSurveySettings) => {\r\n  const { enabled, lastResponseDate, firstDismissalDate, lastDismissalDate } = settings;\r\n\r\n  // This function goes through all the cases where we'd want to not show the survey:\r\n  // 1. If the survey is disabled by strapi, abort mission, don't bother checking the other settings.\r\n  // 2. If the survey is disabled by user, abort mission, don't bother checking the other settings.\r\n  // 3. If the user has already responded to the survey, check if enough time has passed since the last response.\r\n  // 4. If the user has dismissed the survey twice or more before, check if enough time has passed since the last dismissal.\r\n  // 5. If the user has only dismissed the survey once before, check if enough time has passed since the first dismissal.\r\n  // If none of these cases check out, then we show the survey.\r\n  // Note that submitting a response resets the dismissal counts.\r\n  // Checks 4 and 5 should not be reversed, since the first dismissal will also exist if the user has dismissed the survey twice or more before.\r\n\r\n  // For users who had created an account before the NPS feature was introduced,\r\n  // we assume that they would have enabled the NPS feature if they had the chance.\r\n\r\n  // Global strapi disable for NSP.\r\n  if (window.strapi.flags.nps === false) {\r\n    return false;\r\n  }\r\n\r\n  // User chose not to enable the NPS feature when signing up\r\n  if (enabled === false) {\r\n    return false;\r\n  }\r\n\r\n  // The user has already responded to the survey\r\n  if (lastResponseDate) {\r\n    const timeSinceLastResponse = Date.now() - new Date(lastResponseDate).getTime();\r\n\r\n    if (timeSinceLastResponse >= delays.postResponse) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  // The user has dismissed the survey twice or more before\r\n  if (lastDismissalDate) {\r\n    const timeSinceLastDismissal = Date.now() - new Date(lastDismissalDate).getTime();\r\n\r\n    if (timeSinceLastDismissal >= delays.postSubsequentDismissal) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  // The user has only dismissed the survey once before\r\n  if (firstDismissalDate) {\r\n    const timeSinceFirstDismissal = Date.now() - new Date(firstDismissalDate).getTime();\r\n\r\n    if (timeSinceFirstDismissal >= delays.postFirstDismissal) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  // The user has not interacted with the survey before\r\n  return true;\r\n};\r\n\r\nconst NpsSurvey = () => {\r\n  const { formatMessage } = useIntl();\r\n  const { npsSurveySettings, setNpsSurveySettings } = useNpsSurveySettings();\r\n  const [isFeedbackResponse, setIsFeedbackResponse] = React.useState(false);\r\n  const { toggleNotification } = useNotification();\r\n  const currentEnvironment = useAppInfo('NpsSurvey', (state) => state.currentEnvironment);\r\n  const strapiVersion = useAppInfo('NpsSurvey', (state) => state.strapiVersion);\r\n\r\n  interface NpsSurveyMutationBody {\r\n    email: string;\r\n    rating: number | null;\r\n    comment: string;\r\n    environment?: string;\r\n    version?: string;\r\n    license: 'Enterprise' | 'Community';\r\n  }\r\n\r\n  // Only check on first render if the survey should be shown\r\n  const [surveyIsShown, setSurveyIsShown] = React.useState(\r\n    checkIfShouldShowSurvey(npsSurveySettings)\r\n  );\r\n\r\n  // Set a cooldown to show the survey when session begins\r\n  const [displaySurvey, setDisplaySurvey] = React.useState(false);\r\n\r\n  React.useEffect(() => {\r\n    const displayTime = setTimeout(() => {\r\n      setDisplaySurvey(true);\r\n    }, delays.display);\r\n\r\n    return () => {\r\n      clearTimeout(displayTime);\r\n    };\r\n  }, []);\r\n\r\n  const { user } = useAuth('NpsSurvey', (auth) => auth);\r\n\r\n  if (!displaySurvey) {\r\n    return null;\r\n  }\r\n\r\n  if (!surveyIsShown) {\r\n    return null;\r\n  }\r\n\r\n  const handleSubmitResponse = async ({\r\n    npsSurveyRating,\r\n    npsSurveyFeedback,\r\n  }: {\r\n    npsSurveyRating: NpsSurveyMutationBody['rating'];\r\n    npsSurveyFeedback: NpsSurveyMutationBody['comment'];\r\n  }) => {\r\n    try {\r\n      const body = {\r\n        email: typeof user === 'object' && user.email ? user.email : '',\r\n        rating: npsSurveyRating,\r\n        comment: npsSurveyFeedback,\r\n        environment: currentEnvironment,\r\n        version: strapiVersion ?? undefined,\r\n        license: window.strapi.projectType,\r\n        isHostedOnStrapiCloud: process.env.STRAPI_HOSTING === 'strapi.cloud',\r\n      };\r\n      const res = await fetch('https://analytics.strapi.io/submit-nps', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(body),\r\n      });\r\n\r\n      if (!res.ok) {\r\n        throw new Error('Failed to submit NPS survey');\r\n      }\r\n\r\n      setNpsSurveySettings((settings) => ({\r\n        ...settings,\r\n        lastResponseDate: new Date().toString(),\r\n        firstDismissalDate: null,\r\n        lastDismissalDate: null,\r\n      }));\r\n      setIsFeedbackResponse(true);\r\n      // Thank you message displayed in the banner should disappear after few seconds.\r\n      setTimeout(() => {\r\n        setSurveyIsShown(false);\r\n      }, 3000);\r\n    } catch (err) {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDismiss = () => {\r\n    setNpsSurveySettings((settings) => {\r\n      const nextSettings = {\r\n        ...settings,\r\n        lastResponseDate: null,\r\n      };\r\n\r\n      if (settings.firstDismissalDate) {\r\n        // If the user dismisses the survey for the second time\r\n        nextSettings.lastDismissalDate = new Date().toString();\r\n      } else {\r\n        // If the user dismisses the survey for the first time\r\n        nextSettings.firstDismissalDate = new Date().toString();\r\n      }\r\n\r\n      return nextSettings;\r\n    });\r\n\r\n    setSurveyIsShown(false);\r\n  };\r\n\r\n  return (\r\n    <Portal>\r\n      <Formik\r\n        initialValues={{ npsSurveyFeedback: '', npsSurveyRating: null }}\r\n        onSubmit={handleSubmitResponse}\r\n        validationSchema={yup.object({\r\n          npsSurveyFeedback: yup.string(),\r\n          npsSurveyRating: yup.number().required(),\r\n        })}\r\n      >\r\n        {({ values, handleChange, setFieldValue, isSubmitting }) => (\r\n          <Form name=\"npsSurveyForm\">\r\n            <Flex\r\n              hasRadius\r\n              direction=\"column\"\r\n              padding={4}\r\n              borderColor=\"primary200\"\r\n              background=\"neutral0\"\r\n              shadow=\"popupShadow\"\r\n              position=\"fixed\"\r\n              bottom={0}\r\n              left=\"50%\"\r\n              transform=\"translateX(-50%)\"\r\n              zIndex=\"200\"\r\n              width=\"50%\"\r\n            >\r\n              {isFeedbackResponse ? (\r\n                <Typography fontWeight=\"semiBold\">\r\n                  {formatMessage({\r\n                    id: 'app.components.NpsSurvey.feedback-response',\r\n                    defaultMessage: 'Thank you very much for your feedback!',\r\n                  })}\r\n                </Typography>\r\n              ) : (\r\n                <Box tag=\"fieldset\" width=\"100%\" borderWidth={0}>\r\n                  <Flex justifyContent=\"space-between\" width=\"100%\">\r\n                    <Box marginLeft=\"auto\" marginRight=\"auto\">\r\n                      <Typography fontWeight=\"semiBold\" tag=\"legend\">\r\n                        {formatMessage({\r\n                          id: 'app.components.NpsSurvey.banner-title',\r\n                          defaultMessage:\r\n                            'How likely are you to recommend Strapi to a friend or colleague?',\r\n                        })}\r\n                      </Typography>\r\n                    </Box>\r\n                    <IconButton\r\n                      onClick={handleDismiss}\r\n                      withTooltip={false}\r\n                      label={formatMessage({\r\n                        id: 'app.components.NpsSurvey.dismiss-survey-label',\r\n                        defaultMessage: 'Dismiss survey',\r\n                      })}\r\n                    >\r\n                      <Cross />\r\n                    </IconButton>\r\n                  </Flex>\r\n                  <Flex gap={2} marginTop={2} marginBottom={2} justifyContent=\"center\">\r\n                    <Typography variant=\"pi\" textColor=\"neutral600\">\r\n                      {formatMessage({\r\n                        id: 'app.components.NpsSurvey.no-recommendation',\r\n                        defaultMessage: 'Not at all likely',\r\n                      })}\r\n                    </Typography>\r\n                    {ratingArray.map((number) => {\r\n                      return (\r\n                        <FieldWrapper\r\n                          key={number}\r\n                          name=\"npsSurveyRating\"\r\n                          className={values.npsSurveyRating === number ? 'selected' : undefined} // \"selected\" class added when child radio button is checked\r\n                          hasRadius\r\n                          background=\"primary100\"\r\n                          borderColor=\"primary200\"\r\n                          color=\"primary600\"\r\n                          position=\"relative\"\r\n                          cursor=\"pointer\"\r\n                        >\r\n                          <Field.Label>\r\n                            <VisuallyHidden>\r\n                              <Field.Input\r\n                                type=\"radio\"\r\n                                checked={values.npsSurveyRating === number}\r\n                                onChange={(e) =>\r\n                                  setFieldValue('npsSurveyRating', parseInt(e.target.value, 10))\r\n                                }\r\n                                value={number}\r\n                              />\r\n                            </VisuallyHidden>\r\n                            {number}\r\n                          </Field.Label>\r\n                        </FieldWrapper>\r\n                      );\r\n                    })}\r\n                    <Typography variant=\"pi\" textColor=\"neutral600\">\r\n                      {formatMessage({\r\n                        id: 'app.components.NpsSurvey.happy-to-recommend',\r\n                        defaultMessage: 'Extremely likely',\r\n                      })}\r\n                    </Typography>\r\n                  </Flex>\r\n                  {values.npsSurveyRating !== null && (\r\n                    <Flex direction=\"column\">\r\n                      <Box marginTop={2}>\r\n                        <Field.Label fontWeight=\"semiBold\" fontSize={2}>\r\n                          {formatMessage({\r\n                            id: 'app.components.NpsSurvey.feedback-question',\r\n                            defaultMessage: 'Do you have any suggestion for improvements?',\r\n                          })}\r\n                        </Field.Label>\r\n                      </Box>\r\n                      <Box width=\"62%\" marginTop={3} marginBottom={4}>\r\n                        <Textarea\r\n                          id=\"npsSurveyFeedback\" // formik element attribute \"id\" should be same as the values key to work\r\n                          width=\"100%\"\r\n                          onChange={handleChange}\r\n                          value={values.npsSurveyFeedback}\r\n                        />\r\n                      </Box>\r\n                      <Button marginBottom={2} type=\"submit\" loading={isSubmitting}>\r\n                        {formatMessage({\r\n                          id: 'app.components.NpsSurvey.submit-feedback',\r\n                          defaultMessage: 'Submit Feedback',\r\n                        })}\r\n                      </Button>\r\n                    </Flex>\r\n                  )}\r\n                </Box>\r\n              )}\r\n            </Flex>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </Portal>\r\n  );\r\n};\r\n\r\ninterface NpsSurveySettings {\r\n  enabled: boolean;\r\n  lastResponseDate: string | null;\r\n  firstDismissalDate: string | null;\r\n  lastDismissalDate: string | null;\r\n}\r\n\r\n/**\r\n * We exported to make it available during admin user registration.\r\n * Because we only enable the NPS for users who subscribe to the newsletter when signing up\r\n */\r\nfunction useNpsSurveySettings() {\r\n  const [npsSurveySettings, setNpsSurveySettings] = usePersistentState<NpsSurveySettings>(\r\n    'STRAPI_NPS_SURVEY_SETTINGS',\r\n    {\r\n      enabled: true,\r\n      lastResponseDate: null,\r\n      firstDismissalDate: null,\r\n      lastDismissalDate: null,\r\n    }\r\n  );\r\n\r\n  /**\r\n   * TODO: should this just be an array so we can alias the `usePersistentState` hook?\r\n   */\r\n  return { npsSurveySettings, setNpsSurveySettings };\r\n}\r\n\r\nexport { NpsSurvey, useNpsSurveySettings };\r\n"],
  "mappings": "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",
  "names": ["create"]
}
