import {
  useWebhooks
} from "./chunk-TTNNFBFZ.js";
import {
  ConfirmDialog
} from "./chunk-7XSIHJSQ.js";
import {
  useRBAC
} from "./chunk-PJGZMO5F.js";
import {
  Layouts
} from "./chunk-O6JJIRK6.js";
import "./chunk-54PZNGL6.js";
import {
  Page,
  useAPIErrorHandler
} from "./chunk-OUTHPJ5W.js";
import "./chunk-YQN4TQZU.js";
import {
  useTypedSelector
} from "./chunk-ITUTZMO4.js";
import {
  useNotification
} from "./chunk-S4GSJQUH.js";
import "./chunk-3CYOA7RQ.js";
import "./chunk-3Y3HZKRY.js";
import "./chunk-PR5W4YOM.js";
import {
  NavLink,
  useNavigate
} from "./chunk-QOSJGLB6.js";
import "./chunk-XNLL4XTY.js";
import "./chunk-VJHHRLHY.js";
import "./chunk-HWWDZF4D.js";
import "./chunk-Z7WXACEM.js";
import "./chunk-PZKJYQOP.js";
import "./chunk-KTCYCI5X.js";
import "./chunk-4S6CO3NF.js";
import "./chunk-WZMMABOO.js";
import "./chunk-KU6R7J3L.js";
import "./chunk-ALOZZQWE.js";
import "./chunk-3XH2Q2B6.js";
import "./chunk-SM5ZDAVK.js";
import "./chunk-AAOWBC4P.js";
import "./chunk-AVUVASSG.js";
import "./chunk-DEZRKVMG.js";
import "./chunk-LDTLLP4K.js";
import "./chunk-CFOYKXNH.js";
import "./chunk-DWNGFC4T.js";
import "./chunk-3KMG3VFU.js";
import "./chunk-UTVXCYRG.js";
import {
  Button,
  CheckboxImpl,
  Dialog,
  EmptyStateLayout,
  Flex,
  IconButton,
  LinkButton,
  SwitchImpl,
  TFooter,
  Table,
  Tbody,
  Td,
  Th,
  Thead,
  Tr,
  Typography,
  VisuallyHidden,
  useNotifyAT
} from "./chunk-3AUSDG4O.js";
import {
  ForwardRef$1l,
  ForwardRef$1z,
  ForwardRef$n
} from "./chunk-F5I3ZVMF.js";
import "./chunk-FJZ2NJT6.js";
import "./chunk-VH7UJDNP.js";
import "./chunk-HG4QJCZT.js";
import "./chunk-I7DIJEXN.js";
import {
  useIntl
} from "./chunk-2BDXRWHF.js";
import "./chunk-SBRVGDJ6.js";
import "./chunk-YUZK7WZ2.js";
import "./chunk-NSR7OH4Q.js";
import "./chunk-ZCDXR5JO.js";
import "./chunk-47RN6QNY.js";
import "./chunk-IMHIZKPC.js";
import "./chunk-URNLJJFR.js";
import "./chunk-JHXWLAQ5.js";
import "./chunk-PWXBRFBA.js";
import "./chunk-MZAWSZWW.js";
import "./chunk-QIQU42WJ.js";
import "./chunk-XVBZSUZI.js";
import {
  ForwardRef$J
} from "./chunk-2NWCSGSS.js";
import {
  require_jsx_runtime
} from "./chunk-GAPF2DTI.js";
import {
  require_react
} from "./chunk-2ZN62OJX.js";
import "./chunk-IV5CMKTD.js";
import "./chunk-ENGB2K3X.js";
import "./chunk-ISIKDMAB.js";
import "./chunk-X5DDYWPV.js";
import "./chunk-TUHVKLNT.js";
import "./chunk-3POB64WN.js";
import "./chunk-63YMLYWU.js";
import "./chunk-YIY4KI6G.js";
import "./chunk-7CLWPW6Q.js";
import "./chunk-IVGYXB4P.js";
import "./chunk-H3WCXLKE.js";
import "./chunk-NDGNZ36Q.js";
import "./chunk-MNGCFISN.js";
import {
  __toESM
} from "./chunk-X6GFWOGJ.js";

// ../packages/core/admin/admin/src/pages/Settings/pages/Webhooks/ListPage.tsx
var React = __toESM(require_react());
var import_jsx_runtime = __toESM(require_jsx_runtime());
var ListPage = () => {
  const [showModal, setShowModal] = React.useState(false);
  const [webhooksToDelete, setWebhooksToDelete] = React.useState([]);
  const permissions = useTypedSelector((state) => {
    var _a;
    return (_a = state.admin_app.permissions.settings) == null ? void 0 : _a.webhooks;
  });
  const { formatMessage } = useIntl();
  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();
  const { toggleNotification } = useNotification();
  const navigate = useNavigate();
  const {
    isLoading: isRBACLoading,
    allowedActions: { canCreate, canUpdate, canDelete }
  } = useRBAC(permissions);
  const { notifyStatus } = useNotifyAT();
  const {
    isLoading: isWebhooksLoading,
    webhooks,
    error: webhooksError,
    updateWebhook,
    deleteManyWebhooks
  } = useWebhooks();
  React.useEffect(() => {
    if (webhooksError) {
      toggleNotification({
        type: "danger",
        message: formatAPIError(webhooksError)
      });
      return;
    }
    if (webhooks) {
      notifyStatus(
        formatMessage({
          id: "Settings.webhooks.list.loading.success",
          defaultMessage: "Webhooks have been loaded"
        })
      );
    }
  }, [webhooks, webhooksError, toggleNotification, formatMessage, notifyStatus, formatAPIError]);
  const enableWebhook = async (body) => {
    try {
      const res = await updateWebhook(body);
      if ("error" in res) {
        toggleNotification({
          type: "danger",
          message: formatAPIError(res.error)
        });
      }
    } catch {
      toggleNotification({
        type: "danger",
        message: formatMessage({
          id: "notification.error",
          defaultMessage: "An error occurred"
        })
      });
    }
  };
  const deleteWebhook = async (id) => {
    try {
      const res = await deleteManyWebhooks({
        ids: [id]
      });
      if ("error" in res) {
        toggleNotification({
          type: "danger",
          message: formatAPIError(res.error)
        });
        return;
      }
      setWebhooksToDelete((prev) => prev.filter((webhookId) => webhookId !== id));
    } catch {
      toggleNotification({
        type: "danger",
        message: formatMessage({
          id: "notification.error",
          defaultMessage: "An error occurred"
        })
      });
    }
  };
  const confirmBulkDelete = async () => {
    try {
      const res = await deleteManyWebhooks({
        ids: webhooksToDelete
      });
      if ("error" in res) {
        toggleNotification({
          type: "danger",
          message: formatAPIError(res.error)
        });
        return;
      }
      setWebhooksToDelete([]);
    } catch {
      toggleNotification({
        type: "danger",
        message: formatMessage({
          id: "notification.error",
          defaultMessage: "An error occurred"
        })
      });
    } finally {
      setShowModal(false);
    }
  };
  const selectAllCheckbox = (selected) => selected ? setWebhooksToDelete((webhooks == null ? void 0 : webhooks.map((webhook) => webhook.id)) ?? []) : setWebhooksToDelete([]);
  const selectOneCheckbox = (selected, id) => selected ? setWebhooksToDelete((prev) => [...prev, id]) : setWebhooksToDelete((prev) => prev.filter((webhookId) => webhookId !== id));
  const isLoading = isRBACLoading || isWebhooksLoading;
  const numberOfWebhooks = (webhooks == null ? void 0 : webhooks.length) ?? 0;
  const webhooksToDeleteLength = webhooksToDelete.length;
  if (isLoading) {
    return (0, import_jsx_runtime.jsx)(Page.Loading, {});
  }
  return (0, import_jsx_runtime.jsxs)(Layouts.Root, { children: [
    (0, import_jsx_runtime.jsx)(Page.Title, { children: formatMessage(
      { id: "Settings.PageTitle", defaultMessage: "Settings - {name}" },
      {
        name: "Webhooks"
      }
    ) }),
    (0, import_jsx_runtime.jsxs)(Page.Main, { "aria-busy": isLoading, children: [
      (0, import_jsx_runtime.jsx)(
        Layouts.Header,
        {
          title: formatMessage({ id: "Settings.webhooks.title", defaultMessage: "Webhooks" }),
          subtitle: formatMessage({
            id: "Settings.webhooks.list.description",
            defaultMessage: "Get POST changes notifications"
          }),
          primaryAction: canCreate && !isLoading && (0, import_jsx_runtime.jsx)(LinkButton, { tag: NavLink, startIcon: (0, import_jsx_runtime.jsx)(ForwardRef$1l, {}), variant: "default", to: "create", size: "S", children: formatMessage({
            id: "Settings.webhooks.list.button.add",
            defaultMessage: "Create new webhook"
          }) })
        }
      ),
      webhooksToDeleteLength > 0 && canDelete && (0, import_jsx_runtime.jsx)(
        Layouts.Action,
        {
          startActions: (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
            (0, import_jsx_runtime.jsx)(Typography, { variant: "epsilon", textColor: "neutral600", children: formatMessage(
              {
                id: "Settings.webhooks.to.delete",
                defaultMessage: "{webhooksToDeleteLength, plural, one {# webhook} other {# webhooks}} selected"
              },
              { webhooksToDeleteLength }
            ) }),
            (0, import_jsx_runtime.jsx)(
              Button,
              {
                onClick: () => setShowModal(true),
                startIcon: (0, import_jsx_runtime.jsx)(ForwardRef$n, {}),
                size: "L",
                variant: "danger-light",
                children: formatMessage({
                  id: "global.delete",
                  defaultMessage: "Delete"
                })
              }
            )
          ] })
        }
      ),
      (0, import_jsx_runtime.jsx)(Layouts.Content, { children: numberOfWebhooks > 0 ? (0, import_jsx_runtime.jsxs)(
        Table,
        {
          colCount: 5,
          rowCount: numberOfWebhooks + 1,
          footer: (0, import_jsx_runtime.jsx)(
            TFooter,
            {
              onClick: () => {
                if (canCreate) {
                  navigate("create");
                }
              },
              icon: (0, import_jsx_runtime.jsx)(ForwardRef$1l, {}),
              children: formatMessage({
                id: "Settings.webhooks.list.button.add",
                defaultMessage: "Create new webhook"
              })
            }
          ),
          children: [
            (0, import_jsx_runtime.jsx)(Thead, { children: (0, import_jsx_runtime.jsxs)(Tr, { children: [
              (0, import_jsx_runtime.jsx)(Th, { children: (0, import_jsx_runtime.jsx)(
                CheckboxImpl,
                {
                  "aria-label": formatMessage({
                    id: "global.select-all-entries",
                    defaultMessage: "Select all entries"
                  }),
                  checked: webhooksToDeleteLength > 0 && webhooksToDeleteLength < numberOfWebhooks ? "indeterminate" : webhooksToDeleteLength === numberOfWebhooks,
                  onCheckedChange: selectAllCheckbox
                }
              ) }),
              (0, import_jsx_runtime.jsx)(Th, { width: "20%", children: (0, import_jsx_runtime.jsx)(Typography, { variant: "sigma", textColor: "neutral600", children: formatMessage({
                id: "global.name",
                defaultMessage: "Name"
              }) }) }),
              (0, import_jsx_runtime.jsx)(Th, { width: "60%", children: (0, import_jsx_runtime.jsx)(Typography, { variant: "sigma", textColor: "neutral600", children: formatMessage({
                id: "Settings.webhooks.form.url",
                defaultMessage: "URL"
              }) }) }),
              (0, import_jsx_runtime.jsx)(Th, { width: "20%", children: (0, import_jsx_runtime.jsx)(Typography, { variant: "sigma", textColor: "neutral600", children: formatMessage({
                id: "Settings.webhooks.list.th.status",
                defaultMessage: "Status"
              }) }) }),
              (0, import_jsx_runtime.jsx)(Th, { children: (0, import_jsx_runtime.jsx)(VisuallyHidden, { children: formatMessage({
                id: "Settings.webhooks.list.th.actions",
                defaultMessage: "Actions"
              }) }) })
            ] }) }),
            (0, import_jsx_runtime.jsx)(Tbody, { children: webhooks == null ? void 0 : webhooks.map((webhook) => (0, import_jsx_runtime.jsxs)(
              Tr,
              {
                onClick: () => {
                  if (canUpdate) {
                    navigate(webhook.id);
                  }
                },
                style: { cursor: canUpdate ? "pointer" : "default" },
                children: [
                  (0, import_jsx_runtime.jsx)(Td, { onClick: (e) => e.stopPropagation(), children: (0, import_jsx_runtime.jsx)(
                    CheckboxImpl,
                    {
                      "aria-label": `${formatMessage({
                        id: "global.select",
                        defaultMessage: "Select"
                      })} ${webhook.name}`,
                      checked: webhooksToDelete == null ? void 0 : webhooksToDelete.includes(webhook.id),
                      onCheckedChange: (selected) => selectOneCheckbox(!!selected, webhook.id),
                      name: "select"
                    }
                  ) }),
                  (0, import_jsx_runtime.jsx)(Td, { children: (0, import_jsx_runtime.jsx)(Typography, { fontWeight: "semiBold", textColor: "neutral800", children: webhook.name }) }),
                  (0, import_jsx_runtime.jsx)(Td, { children: (0, import_jsx_runtime.jsx)(Typography, { textColor: "neutral800", children: webhook.url }) }),
                  (0, import_jsx_runtime.jsx)(Td, { onClick: (e) => e.stopPropagation(), children: (0, import_jsx_runtime.jsx)(Flex, { children: (0, import_jsx_runtime.jsx)(
                    SwitchImpl,
                    {
                      onLabel: formatMessage({
                        id: "global.enabled",
                        defaultMessage: "Enabled"
                      }),
                      offLabel: formatMessage({
                        id: "global.disabled",
                        defaultMessage: "Disabled"
                      }),
                      "aria-label": `${webhook.name} ${formatMessage({
                        id: "Settings.webhooks.list.th.status",
                        defaultMessage: "Status"
                      })}`,
                      checked: webhook.isEnabled,
                      onCheckedChange: (enabled) => {
                        enableWebhook({
                          ...webhook,
                          isEnabled: enabled
                        });
                      },
                      visibleLabels: true
                    }
                  ) }) }),
                  (0, import_jsx_runtime.jsx)(Td, { children: (0, import_jsx_runtime.jsxs)(Flex, { gap: 1, children: [
                    canUpdate && (0, import_jsx_runtime.jsx)(
                      IconButton,
                      {
                        label: formatMessage({
                          id: "Settings.webhooks.events.update",
                          defaultMessage: "Update"
                        }),
                        variant: "ghost",
                        children: (0, import_jsx_runtime.jsx)(ForwardRef$1z, {})
                      }
                    ),
                    canDelete && (0, import_jsx_runtime.jsx)(
                      DeleteActionButton,
                      {
                        onDelete: () => {
                          deleteWebhook(webhook.id);
                        }
                      }
                    )
                  ] }) })
                ]
              },
              webhook.id
            )) })
          ]
        }
      ) : (0, import_jsx_runtime.jsx)(
        EmptyStateLayout,
        {
          icon: (0, import_jsx_runtime.jsx)(ForwardRef$J, { width: "160px" }),
          content: formatMessage({
            id: "Settings.webhooks.list.empty.description",
            defaultMessage: "No webhooks found"
          }),
          action: canCreate ? (0, import_jsx_runtime.jsx)(LinkButton, { variant: "secondary", startIcon: (0, import_jsx_runtime.jsx)(ForwardRef$1l, {}), tag: NavLink, to: "create", children: formatMessage({
            id: "Settings.webhooks.list.button.add",
            defaultMessage: "Create new webhook"
          }) }) : null
        }
      ) })
    ] }),
    (0, import_jsx_runtime.jsx)(Dialog.Root, { open: showModal, onOpenChange: setShowModal, children: (0, import_jsx_runtime.jsx)(ConfirmDialog, { onConfirm: confirmBulkDelete }) })
  ] });
};
var DeleteActionButton = ({ onDelete }) => {
  const [showModal, setShowModal] = React.useState(false);
  const { formatMessage } = useIntl();
  return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
    (0, import_jsx_runtime.jsx)(
      IconButton,
      {
        onClick: (e) => {
          e.stopPropagation();
          setShowModal(true);
        },
        label: formatMessage({
          id: "Settings.webhooks.events.delete",
          defaultMessage: "Delete webhook"
        }),
        variant: "ghost",
        children: (0, import_jsx_runtime.jsx)(ForwardRef$n, {})
      }
    ),
    (0, import_jsx_runtime.jsx)(Dialog.Root, { open: showModal, onOpenChange: setShowModal, children: (0, import_jsx_runtime.jsx)(
      ConfirmDialog,
      {
        onConfirm: (e) => {
          e == null ? void 0 : e.stopPropagation();
          onDelete();
        }
      }
    ) })
  ] });
};
var ProtectedListPage = () => {
  const permissions = useTypedSelector(
    (state) => {
      var _a;
      return (_a = state.admin_app.permissions.settings) == null ? void 0 : _a.webhooks.main;
    }
  );
  return (0, import_jsx_runtime.jsx)(Page.Protect, { permissions, children: (0, import_jsx_runtime.jsx)(ListPage, {}) });
};
export {
  ListPage,
  ProtectedListPage
};
//# sourceMappingURL=ListPage-LXJFF6VM.js.map
