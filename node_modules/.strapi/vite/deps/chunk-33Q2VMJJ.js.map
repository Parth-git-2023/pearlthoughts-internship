{
  "version": 3,
  "sources": ["../../../../../packages/core/review-workflows/admin/src/routes/settings/constants.ts", "../../../../../packages/core/review-workflows/admin/src/routes/settings/components/StageDragPreview.tsx", "../../../../../packages/core/review-workflows/admin/src/routes/settings/components/Layout.tsx"],
  "sourcesContent": ["export type DragDropTypes = 'stage';\r\n\r\nexport const DRAG_DROP_TYPES: Record<Uppercase<DragDropTypes>, DragDropTypes> = {\r\n  STAGE: 'stage',\r\n};\r\n", "import { Flex, Typography } from '@strapi/design-system';\r\nimport { CaretDown } from '@strapi/icons';\r\n\r\ninterface StageDragPreviewType {\r\n  name: string | null;\r\n}\r\n\r\nconst StageDragPreview = ({ name }: StageDragPreviewType) => {\r\n  return (\r\n    <Flex\r\n      background=\"primary100\"\r\n      borderStyle=\"dashed\"\r\n      borderColor=\"primary600\"\r\n      borderWidth=\"1px\"\r\n      gap={3}\r\n      hasRadius\r\n      padding={3}\r\n      shadow=\"tableShadow\"\r\n      width=\"30rem\"\r\n    >\r\n      <Flex\r\n        alignItems=\"center\"\r\n        background=\"neutral200\"\r\n        borderRadius=\"50%\"\r\n        height={6}\r\n        justifyContent=\"center\"\r\n        width={6}\r\n      >\r\n        <CaretDown width=\"0.8rem\" fill=\"neutral600\" />\r\n      </Flex>\r\n\r\n      <Typography fontWeight=\"bold\">{name}</Typography>\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport { StageDragPreview };\r\nexport type { StageDragPreviewType };\r\n", "import * as React from 'react';\r\n\r\nimport { Page, Layouts } from '@strapi/admin/strapi-admin';\r\nimport { Box } from '@strapi/design-system';\r\nimport { XYCoord, useDragLayer } from 'react-dnd';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { DRAG_DROP_TYPES } from '../constants';\r\n\r\nimport { StageDragPreview } from './StageDragPreview';\r\n\r\nfunction getStyle(\r\n  initialOffset: XYCoord | null,\r\n  currentOffset: XYCoord | null,\r\n  mouseOffset: XYCoord | null\r\n) {\r\n  if (!initialOffset || !currentOffset || !mouseOffset) {\r\n    return { display: 'none' };\r\n  }\r\n\r\n  const { x, y } = mouseOffset;\r\n\r\n  return {\r\n    transform: `translate(${x}px, ${y}px)`,\r\n  };\r\n}\r\n\r\nconst DragLayerRendered = () => {\r\n  const { itemType, isDragging, item, initialOffset, currentOffset, mouseOffset } = useDragLayer(\r\n    (monitor) => ({\r\n      item: monitor.getItem(),\r\n      itemType: monitor.getItemType(),\r\n      initialOffset: monitor.getInitialSourceClientOffset(),\r\n      currentOffset: monitor.getSourceClientOffset(),\r\n      isDragging: monitor.isDragging(),\r\n      mouseOffset: monitor.getClientOffset(),\r\n    })\r\n  );\r\n\r\n  if (!isDragging || itemType !== DRAG_DROP_TYPES.STAGE) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Box\r\n      height=\"100%\"\r\n      left={0}\r\n      position=\"fixed\"\r\n      pointerEvents=\"none\"\r\n      top={0}\r\n      zIndex={100}\r\n      width=\"100%\"\r\n    >\r\n      <Box style={getStyle(initialOffset, currentOffset, mouseOffset)}>\r\n        <StageDragPreview name={typeof item.item === 'string' ? item.item : null} />;\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst Root: React.FC<React.PropsWithChildren> = ({ children }) => {\r\n  return (\r\n    <Page.Main>\r\n      <Layouts.Content>{children}</Layouts.Content>\r\n    </Page.Main>\r\n  );\r\n};\r\n\r\ninterface HeaderProps {\r\n  title: string;\r\n  navigationAction?: React.ReactNode;\r\n  primaryAction?: React.ReactNode;\r\n  secondaryAction?: React.ReactNode;\r\n  subtitle?: React.ReactNode;\r\n}\r\n\r\nconst Header: React.FC<HeaderProps> = ({ title, subtitle, navigationAction, primaryAction }) => {\r\n  const { formatMessage } = useIntl();\r\n  return (\r\n    <>\r\n      <Page.Title>\r\n        {formatMessage(\r\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\r\n          {\r\n            name: title,\r\n          }\r\n        )}\r\n      </Page.Title>\r\n      <Layouts.BaseHeader\r\n        navigationAction={navigationAction}\r\n        primaryAction={primaryAction}\r\n        title={title}\r\n        subtitle={subtitle}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport { DragLayerRendered, Header, Root };\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEO,IAAM,kBAAmE;AAAA,EAC9E,OAAO;AACT;;;ACKI;AAFJ,IAAM,mBAAmB,CAAC,EAAE,KAAK,MAA4B;AAC3D,aACE;AAAA,IAAC;AAAA;AAAA,MACC,YAAW;AAAA,MACX,aAAY;AAAA,MACZ,aAAY;AAAA,MACZ,aAAY;AAAA,MACZ,KAAK;AAAA,MACL,WAAS;AAAA,MACT,SAAS;AAAA,MACT,QAAO;AAAA,MACP,OAAM;AAAA,MAEN;AAAA;AAAA,UAAC;AAAA;AAAA,YACC,YAAW;AAAA,YACX,YAAW;AAAA,YACX,cAAa;AAAA,YACb,QAAQ;AAAA,YACR,gBAAe;AAAA,YACf,OAAO;AAAA,YAEP,sCAAC,iBAAU,OAAM,UAAS,MAAK,cAAa;AAAA;AAAA,QAC9C;AAAA,YAEA,wBAAC,cAAW,YAAW,QAAQ,gBAAK;AAAA;AAAA;AAAA,EACtC;AAEJ;;;ACmBM,IAAAA,sBAAA;AA1CN,SAAS,SACP,eACA,eACA,aACA;AACA,MAAI,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,aAAa;AACpD,WAAO,EAAE,SAAS,OAAO;AAAA,EAC3B;AAEA,QAAM,EAAE,GAAG,EAAE,IAAI;AAEjB,SAAO;AAAA,IACL,WAAW,aAAa,CAAC,OAAO,CAAC;AAAA,EACnC;AACF;AAEA,IAAM,oBAAoB,MAAM;AAC9B,QAAM,EAAE,UAAU,YAAY,MAAM,eAAe,eAAe,YAAY,IAAI;AAAA,IAChF,CAAC,aAAa;AAAA,MACZ,MAAM,QAAQ,QAAQ;AAAA,MACtB,UAAU,QAAQ,YAAY;AAAA,MAC9B,eAAe,QAAQ,6BAA6B;AAAA,MACpD,eAAe,QAAQ,sBAAsB;AAAA,MAC7C,YAAY,QAAQ,WAAW;AAAA,MAC/B,aAAa,QAAQ,gBAAgB;AAAA,IACvC;AAAA,EACF;AAEA,MAAI,CAAC,cAAc,aAAa,gBAAgB,OAAO;AACrD,WAAO;AAAA,EACT;AAEA,aACE;AAAA,IAAC;AAAA;AAAA,MACC,QAAO;AAAA,MACP,MAAM;AAAA,MACN,UAAS;AAAA,MACT,eAAc;AAAA,MACd,KAAK;AAAA,MACL,QAAQ;AAAA,MACR,OAAM;AAAA,MAEN,wCAAC,OAAI,OAAO,SAAS,eAAe,eAAe,WAAW,GAC5D;AAAA,qCAAC,oBAAiB,MAAM,OAAO,KAAK,SAAS,WAAW,KAAK,OAAO,MAAM;AAAA,QAAE;AAAA,SAC9E;AAAA;AAAA,EACF;AAEJ;AAEA,IAAM,OAA0C,CAAC,EAAE,SAAS,MAAM;AAChE,aACE,yBAAC,KAAK,MAAL,EACC,uCAAC,QAAQ,SAAR,EAAiB,UAAS,GAC7B;AAEJ;AAUA,IAAM,SAAgC,CAAC,EAAE,OAAO,UAAU,kBAAkB,cAAc,MAAM;AAC9F,QAAM,EAAE,cAAc,IAAI,QAAQ;AAClC,aACE,0DACE;AAAA,iCAAC,KAAK,OAAL,EACE;AAAA,MACC,EAAE,IAAI,sBAAsB,gBAAgB,oBAAoB;AAAA,MAChE;AAAA,QACE,MAAM;AAAA,MACR;AAAA,IACF,GACF;AAAA,QACA;AAAA,MAAC,QAAQ;AAAA,MAAR;AAAA,QACC;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA;AAAA,IACF;AAAA,KACF;AAEJ;",
  "names": ["import_jsx_runtime"]
}
