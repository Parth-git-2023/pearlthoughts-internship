{
  "version": 3,
  "sources": ["../../../../../packages/core/admin/admin/src/services/transferTokens.ts"],
  "sourcesContent": ["import * as TransferTokens from '../../../shared/contracts/transfer';\r\n\r\nimport { adminApi } from './api';\r\n\r\nconst transferTokenService = adminApi\r\n  .enhanceEndpoints({\r\n    addTagTypes: ['TransferToken'],\r\n  })\r\n  .injectEndpoints({\r\n    endpoints: (builder) => ({\r\n      regenerateToken: builder.mutation<TransferTokens.TokenRegenerate.Response['data'], string>({\r\n        query: (url) => ({\r\n          method: 'POST',\r\n          url: `${url}/regenerate`,\r\n        }),\r\n        transformResponse: (response: TransferTokens.TokenRegenerate.Response) => response.data,\r\n      }),\r\n      getTransferTokens: builder.query<TransferTokens.TokenList.Response['data'], void>({\r\n        query: () => ({\r\n          url: '/admin/transfer/tokens',\r\n          method: 'GET',\r\n        }),\r\n        transformResponse: (response: TransferTokens.TokenList.Response) => response.data,\r\n        providesTags: (res, _err) => [\r\n          ...(res?.map(({ id }) => ({ type: 'TransferToken' as const, id })) ?? []),\r\n          { type: 'TransferToken' as const, id: 'LIST' },\r\n        ],\r\n      }),\r\n      getTransferToken: builder.query<\r\n        TransferTokens.TokenGetById.Response['data'],\r\n        TransferTokens.TokenGetById.Params['id']\r\n      >({\r\n        query: (id) => `/admin/transfer/tokens/${id}`,\r\n        transformResponse: (response: TransferTokens.TokenGetById.Response) => response.data,\r\n        providesTags: (res, _err, id) => [{ type: 'TransferToken' as const, id }],\r\n      }),\r\n      createTransferToken: builder.mutation<\r\n        TransferTokens.TokenCreate.Response['data'],\r\n        TransferTokens.TokenCreate.Request['body']\r\n      >({\r\n        query: (body) => ({\r\n          url: '/admin/transfer/tokens',\r\n          method: 'POST',\r\n          data: body,\r\n        }),\r\n        transformResponse: (response: TransferTokens.TokenCreate.Response) => response.data,\r\n        invalidatesTags: [{ type: 'TransferToken' as const, id: 'LIST' }],\r\n      }),\r\n      deleteTransferToken: builder.mutation<\r\n        TransferTokens.TokenRevoke.Response['data'],\r\n        TransferTokens.TokenRevoke.Params['id']\r\n      >({\r\n        query: (id) => ({\r\n          url: `/admin/transfer/tokens/${id}`,\r\n          method: 'DELETE',\r\n        }),\r\n        transformResponse: (response: TransferTokens.TokenRevoke.Response) => response.data,\r\n        invalidatesTags: (_res, _err, id) => [{ type: 'TransferToken' as const, id }],\r\n      }),\r\n      updateTransferToken: builder.mutation<\r\n        TransferTokens.TokenUpdate.Response['data'],\r\n        TransferTokens.TokenUpdate.Params & TransferTokens.TokenUpdate.Request['body']\r\n      >({\r\n        query: ({ id, ...body }) => ({\r\n          url: `/admin/transfer/tokens/${id}`,\r\n          method: 'PUT',\r\n          data: body,\r\n        }),\r\n        transformResponse: (response: TransferTokens.TokenUpdate.Response) => response.data,\r\n        invalidatesTags: (_res, _err, { id }) => [{ type: 'TransferToken' as const, id }],\r\n      }),\r\n    }),\r\n    overrideExisting: false,\r\n  });\r\n\r\nconst {\r\n  useGetTransferTokensQuery,\r\n  useGetTransferTokenQuery,\r\n  useCreateTransferTokenMutation,\r\n  useDeleteTransferTokenMutation,\r\n  useUpdateTransferTokenMutation,\r\n  useRegenerateTokenMutation,\r\n} = transferTokenService;\r\n\r\nexport {\r\n  useGetTransferTokensQuery,\r\n  useGetTransferTokenQuery,\r\n  useCreateTransferTokenMutation,\r\n  useDeleteTransferTokenMutation,\r\n  useUpdateTransferTokenMutation,\r\n  useRegenerateTokenMutation,\r\n};\r\n"],
  "mappings": ";;;;;AAIA,IAAM,uBAAuB,SAC1B,iBAAiB;AAAA,EAChB,aAAa,CAAC,eAAe;AAC/B,CAAC,EACA,gBAAgB;AAAA,EACf,WAAW,CAAC,aAAa;AAAA,IACvB,iBAAiB,QAAQ,SAAkE;AAAA,MACzF,OAAO,CAAC,SAAS;AAAA,QACf,QAAQ;AAAA,QACR,KAAK,GAAG,GAAG;AAAA,MACb;AAAA,MACA,mBAAmB,CAAC,aAAsD,SAAS;AAAA,IACrF,CAAC;AAAA,IACD,mBAAmB,QAAQ,MAAuD;AAAA,MAChF,OAAO,OAAO;AAAA,QACZ,KAAK;AAAA,QACL,QAAQ;AAAA,MACV;AAAA,MACA,mBAAmB,CAAC,aAAgD,SAAS;AAAA,MAC7E,cAAc,CAAC,KAAK,SAAS;AAAA,QAC3B,IAAI,2BAAK,IAAI,CAAC,EAAE,GAAG,OAAO,EAAE,MAAM,iBAA0B,GAAG,QAAO,CAAC;AAAA,QACvE,EAAE,MAAM,iBAA0B,IAAI,OAAO;AAAA,MAC/C;AAAA,IACF,CAAC;AAAA,IACD,kBAAkB,QAAQ,MAGxB;AAAA,MACA,OAAO,CAAC,OAAO,0BAA0B,EAAE;AAAA,MAC3C,mBAAmB,CAAC,aAAmD,SAAS;AAAA,MAChF,cAAc,CAAC,KAAK,MAAM,OAAO,CAAC,EAAE,MAAM,iBAA0B,GAAG,CAAC;AAAA,IAC1E,CAAC;AAAA,IACD,qBAAqB,QAAQ,SAG3B;AAAA,MACA,OAAO,CAAC,UAAU;AAAA,QAChB,KAAK;AAAA,QACL,QAAQ;AAAA,QACR,MAAM;AAAA,MACR;AAAA,MACA,mBAAmB,CAAC,aAAkD,SAAS;AAAA,MAC/E,iBAAiB,CAAC,EAAE,MAAM,iBAA0B,IAAI,OAAO,CAAC;AAAA,IAClE,CAAC;AAAA,IACD,qBAAqB,QAAQ,SAG3B;AAAA,MACA,OAAO,CAAC,QAAQ;AAAA,QACd,KAAK,0BAA0B,EAAE;AAAA,QACjC,QAAQ;AAAA,MACV;AAAA,MACA,mBAAmB,CAAC,aAAkD,SAAS;AAAA,MAC/E,iBAAiB,CAAC,MAAM,MAAM,OAAO,CAAC,EAAE,MAAM,iBAA0B,GAAG,CAAC;AAAA,IAC9E,CAAC;AAAA,IACD,qBAAqB,QAAQ,SAG3B;AAAA,MACA,OAAO,CAAC,EAAE,IAAI,GAAG,KAAK,OAAO;AAAA,QAC3B,KAAK,0BAA0B,EAAE;AAAA,QACjC,QAAQ;AAAA,QACR,MAAM;AAAA,MACR;AAAA,MACA,mBAAmB,CAAC,aAAkD,SAAS;AAAA,MAC/E,iBAAiB,CAAC,MAAM,MAAM,EAAE,GAAG,MAAM,CAAC,EAAE,MAAM,iBAA0B,GAAG,CAAC;AAAA,IAClF,CAAC;AAAA,EACH;AAAA,EACA,kBAAkB;AACpB,CAAC;AAEH,IAAM;AAAA,EACJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,IAAI;",
  "names": []
}
