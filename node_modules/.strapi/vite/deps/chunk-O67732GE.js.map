{
  "version": 3,
  "sources": ["../../../../../packages/core/admin/admin/src/pages/Settings/pages/Webhooks/components/Events.tsx"],
  "sourcesContent": ["import * as React from 'react';\r\n\r\nimport {\r\n  Checkbox,\r\n  Flex,\r\n  RawTable as Table,\r\n  RawTbody as Tbody,\r\n  RawTd as Td,\r\n  RawTh as Th,\r\n  RawThead as Thead,\r\n  RawTr as Tr,\r\n  Typography,\r\n  VisuallyHidden,\r\n  Field,\r\n  CheckboxProps,\r\n} from '@strapi/design-system';\r\nimport { MessageDescriptor, useIntl } from 'react-intl';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { useField } from '../../../../../components/Form';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * EventsRoot\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface EventsRootProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst EventsRoot = ({ children }: EventsRootProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  const label = formatMessage({\r\n    id: 'Settings.webhooks.form.events',\r\n    defaultMessage: 'Events',\r\n  });\r\n\r\n  return (\r\n    <Flex direction=\"column\" alignItems=\"stretch\" gap={1}>\r\n      <Field.Label aria-hidden>{label}</Field.Label>\r\n      {/* @ts-expect-error â€“ TODO: add colCount & rowCount */}\r\n      <StyledTable aria-label={label}>{children}</StyledTable>\r\n    </Flex>\r\n  );\r\n};\r\n\r\n// TODO check whether we want to move alternating background colour tables to the design system\r\nconst StyledTable = styled(Table)`\r\n  tbody tr:nth-child(odd) {\r\n    background: ${({ theme }) => theme.colors.neutral100};\r\n  }\r\n\r\n  thead th span {\r\n    color: ${({ theme }) => theme.colors.neutral500};\r\n  }\r\n\r\n  td,\r\n  th {\r\n    padding-block-start: ${({ theme }) => theme.spaces[3]};\r\n    padding-block-end: ${({ theme }) => theme.spaces[3]};\r\n    width: 6%;\r\n    vertical-align: middle;\r\n  }\r\n\r\n  tbody tr td:first-child {\r\n    /**\r\n     * Add padding to the start of the first column to avoid the checkbox appearing\r\n     * too close to the edge of the table\r\n     */\r\n    padding-inline-start: ${({ theme }) => theme.spaces[2]};\r\n  }\r\n`;\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * EventsHeaders\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface EventsHeadersProps {\r\n  getHeaders?: typeof getCEHeaders;\r\n}\r\n\r\nconst getCEHeaders = (): MessageDescriptor[] => {\r\n  const headers = [\r\n    { id: 'Settings.webhooks.events.create', defaultMessage: 'Create' },\r\n    { id: 'Settings.webhooks.events.update', defaultMessage: 'Update' },\r\n    { id: 'app.utils.delete', defaultMessage: 'Delete' },\r\n    { id: 'app.utils.publish', defaultMessage: 'Publish' },\r\n    { id: 'app.utils.unpublish', defaultMessage: 'Unpublish' },\r\n  ];\r\n\r\n  return headers;\r\n};\r\n\r\nconst EventsHeaders = ({ getHeaders = getCEHeaders }: EventsHeadersProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const headers = getHeaders();\r\n\r\n  return (\r\n    <Thead>\r\n      <Tr>\r\n        <Th>\r\n          <VisuallyHidden>\r\n            {formatMessage({\r\n              id: 'Settings.webhooks.event.select',\r\n              defaultMessage: 'Select event',\r\n            })}\r\n          </VisuallyHidden>\r\n        </Th>\r\n        {headers.map((header) => {\r\n          if (['app.utils.publish', 'app.utils.unpublish'].includes(header?.id ?? '')) {\r\n            return (\r\n              <Th\r\n                key={header.id}\r\n                title={formatMessage({\r\n                  id: 'Settings.webhooks.event.publish-tooltip',\r\n                  defaultMessage: 'This event only exists for content with draft & publish enabled',\r\n                })}\r\n              >\r\n                <Typography variant=\"sigma\" textColor=\"neutral600\">\r\n                  {formatMessage(header)}\r\n                </Typography>\r\n              </Th>\r\n            );\r\n          }\r\n\r\n          return (\r\n            <Th key={header.id}>\r\n              <Typography variant=\"sigma\" textColor=\"neutral600\">\r\n                {formatMessage(header)}\r\n              </Typography>\r\n            </Th>\r\n          );\r\n        })}\r\n      </Tr>\r\n    </Thead>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * EventsBody\r\n * -----------------------------------------------------------------------------------------------*/\r\ninterface FormikContextValue {\r\n  events: string[];\r\n}\r\n\r\ninterface EventsBodyProps {\r\n  providedEvents?: Record<string, FormikContextValue['events']>;\r\n}\r\n\r\nconst EventsBody = ({ providedEvents }: EventsBodyProps) => {\r\n  const events = providedEvents || getCEEvents();\r\n  const { value = [], onChange } = useField<string[]>('events');\r\n\r\n  const inputName = 'events';\r\n  const inputValue = value;\r\n  const disabledEvents: string[] = [];\r\n\r\n  const formattedValue = inputValue.reduce<Record<string, string[]>>((acc, curr) => {\r\n    const key = curr.split('.')[0];\r\n\r\n    if (!acc[key]) {\r\n      acc[key] = [];\r\n    }\r\n    acc[key].push(curr);\r\n\r\n    return acc;\r\n  }, {});\r\n\r\n  const handleSelect: EventsRowProps['handleSelect'] = (name, value) => {\r\n    const set = new Set(inputValue);\r\n\r\n    if (value) {\r\n      set.add(name);\r\n    } else {\r\n      set.delete(name);\r\n    }\r\n\r\n    onChange(inputName, Array.from(set));\r\n  };\r\n\r\n  const handleSelectAll: EventsRowProps['handleSelectAll'] = (name, value) => {\r\n    const set = new Set(inputValue);\r\n\r\n    if (value) {\r\n      events[name].forEach((event) => {\r\n        if (!disabledEvents.includes(event)) {\r\n          set.add(event);\r\n        }\r\n      });\r\n    } else {\r\n      events[name].forEach((event) => set.delete(event));\r\n    }\r\n\r\n    onChange(inputName, Array.from(set));\r\n  };\r\n\r\n  return (\r\n    <Tbody>\r\n      {Object.entries(events).map(([event, value]) => {\r\n        return (\r\n          <EventsRow\r\n            disabledEvents={disabledEvents}\r\n            key={event}\r\n            name={event}\r\n            events={value}\r\n            inputValue={formattedValue[event]}\r\n            handleSelect={handleSelect}\r\n            handleSelectAll={handleSelectAll}\r\n          />\r\n        );\r\n      })}\r\n    </Tbody>\r\n  );\r\n};\r\n\r\nconst getCEEvents = (): Required<Pick<EventsBodyProps, 'providedEvents'>>['providedEvents'] => {\r\n  const entryEvents: FormikContextValue['events'] = [\r\n    'entry.create',\r\n    'entry.update',\r\n    'entry.delete',\r\n    'entry.publish',\r\n    'entry.unpublish',\r\n  ];\r\n\r\n  return {\r\n    entry: entryEvents,\r\n    media: ['media.create', 'media.update', 'media.delete'],\r\n  };\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * EventsRow\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface EventsRowProps {\r\n  disabledEvents?: string[];\r\n  events?: string[];\r\n  inputValue?: string[];\r\n  handleSelect: (name: string, value: boolean) => void;\r\n  handleSelectAll: (name: string, value: boolean) => void;\r\n  name: string;\r\n}\r\n\r\nconst EventsRow = ({\r\n  disabledEvents = [],\r\n  name,\r\n  events = [],\r\n  inputValue = [],\r\n  handleSelect,\r\n  handleSelectAll,\r\n}: EventsRowProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const enabledCheckboxes = events.filter((event) => !disabledEvents.includes(event));\r\n\r\n  const hasSomeCheckboxSelected = inputValue.length > 0;\r\n  const areAllCheckboxesSelected = inputValue.length === enabledCheckboxes.length;\r\n\r\n  const onChangeAll: CheckboxProps['onCheckedChange'] = () => {\r\n    const valueToSet = !areAllCheckboxesSelected;\r\n\r\n    handleSelectAll(name, valueToSet);\r\n  };\r\n\r\n  const targetColumns = 5;\r\n\r\n  return (\r\n    <Tr>\r\n      <Td>\r\n        <Checkbox\r\n          aria-label={formatMessage({\r\n            id: 'global.select-all-entries',\r\n            defaultMessage: 'Select all entries',\r\n          })}\r\n          name={name}\r\n          checked={\r\n            hasSomeCheckboxSelected && !areAllCheckboxesSelected\r\n              ? 'indeterminate'\r\n              : areAllCheckboxesSelected\r\n          }\r\n          onCheckedChange={onChangeAll}\r\n        >\r\n          {removeHyphensAndTitleCase(name)}\r\n        </Checkbox>\r\n      </Td>\r\n\r\n      {events.map((event) => {\r\n        return (\r\n          <Td key={event} textAlign=\"center\">\r\n            <Flex width=\"100%\" justifyContent=\"center\">\r\n              <Checkbox\r\n                disabled={disabledEvents.includes(event)}\r\n                aria-label={event}\r\n                name={event}\r\n                checked={inputValue.includes(event)}\r\n                onCheckedChange={(value) => handleSelect(event, !!value)}\r\n              />\r\n            </Flex>\r\n          </Td>\r\n        );\r\n      })}\r\n      {events.length < targetColumns && <Td colSpan={targetColumns - events.length} />}\r\n    </Tr>\r\n  );\r\n};\r\n\r\n/**\r\n * Converts a string to title case and removes hyphens.\r\n */\r\nconst removeHyphensAndTitleCase = (str: string): string =>\r\n  str\r\n    .replace(/-/g, ' ')\r\n    .split(' ')\r\n    .map((word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\r\n    .join(' ');\r\n\r\nconst Events = { Root: EventsRoot, Headers: EventsHeaders, Body: EventsBody, Row: EventsRow };\r\n\r\nexport { Events };\r\nexport type { EventsRowProps, EventsHeadersProps, EventsRootProps, EventsBodyProps };\r\n"],
  "mappings": "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",
  "names": ["value"]
}
