{
  "version": 3,
  "sources": ["../../../../../packages/core/admin/admin/src/features/BackButton.tsx"],
  "sourcesContent": ["import * as React from 'react';\r\n\r\nimport { Link, LinkProps } from '@strapi/design-system';\r\nimport { ArrowLeft } from '@strapi/icons';\r\nimport { produce } from 'immer';\r\nimport { useIntl } from 'react-intl';\r\nimport { NavLink, type To, useLocation, useNavigate, useNavigationType } from 'react-router-dom';\r\n\r\nimport { createContext } from '../components/Context';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * HistoryProvider\r\n * -----------------------------------------------------------------------------------------------*/\r\ninterface HistoryState {\r\n  /**\r\n   * The history of the user's navigation within our application\r\n   * during their current session.\r\n   */\r\n  history: string[];\r\n  /**\r\n   * The index of the current location in the history array.\r\n   */\r\n  currentLocationIndex: number;\r\n  /**\r\n   * The current location of the user within our application.\r\n   */\r\n  currentLocation: string;\r\n  /**\r\n   * Whether the user can go back in the history.\r\n   */\r\n  canGoBack: boolean;\r\n}\r\n\r\ninterface HistoryContextValue extends HistoryState {\r\n  /**\r\n   * @description Push a new state to the history. You can\r\n   * either pass a string or an object.\r\n   */\r\n  pushState: (\r\n    path:\r\n      | {\r\n          to: string;\r\n          search: string;\r\n        }\r\n      | string\r\n  ) => void;\r\n  /**\r\n   * @description Go back in the history. This calls `navigate(-1)` internally\r\n   * to keep the browser in sync with the application state.\r\n   */\r\n  goBack: () => void;\r\n}\r\n\r\nconst [Provider, useHistory] = createContext<HistoryContextValue>('History', {\r\n  history: [],\r\n  currentLocationIndex: 0,\r\n  currentLocation: '',\r\n  canGoBack: false,\r\n  pushState: () => {\r\n    throw new Error('You must use the `HistoryProvider` to access the `pushState` function.');\r\n  },\r\n  goBack: () => {\r\n    throw new Error('You must use the `HistoryProvider` to access the `goBack` function.');\r\n  },\r\n});\r\n\r\ninterface HistoryProviderProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst HistoryProvider = ({ children }: HistoryProviderProps) => {\r\n  const location = useLocation();\r\n  const navigationType = useNavigationType();\r\n  const navigate = useNavigate();\r\n  const [state, dispatch] = React.useReducer(reducer, {\r\n    history: [],\r\n    currentLocationIndex: 0,\r\n    currentLocation: '',\r\n    canGoBack: false,\r\n  });\r\n\r\n  const isGoingBack = React.useRef(false);\r\n\r\n  const pushState: HistoryContextValue['pushState'] = React.useCallback((path) => {\r\n    dispatch({\r\n      type: 'PUSH_STATE',\r\n      payload: typeof path === 'string' ? { to: path, search: '' } : path,\r\n    });\r\n  }, []);\r\n\r\n  const goBack: HistoryContextValue['goBack'] = React.useCallback(() => {\r\n    /**\r\n     * Perform the browser back action, dispatch the goBack action to keep the state in sync\r\n     * and set the ref to avoid an infinite loop and incorrect state pushing\r\n     */\r\n    navigate(-1);\r\n    dispatch({ type: 'GO_BACK' });\r\n    isGoingBack.current = true;\r\n  }, [navigate]);\r\n\r\n  /**\r\n   * This is a semi-listener pattern to keep the `canGoBack` state in sync.\r\n   */\r\n  const prevIndex = React.useRef(state.currentLocationIndex);\r\n  React.useEffect(() => {\r\n    if (state.currentLocationIndex !== prevIndex.current) {\r\n      dispatch({\r\n        type: 'SET_CAN_GO_BACK',\r\n        payload: state.currentLocationIndex > 1 && state.history.length > 1,\r\n      });\r\n      prevIndex.current = state.currentLocationIndex;\r\n    }\r\n  }, [prevIndex, state.currentLocationIndex, state.history.length]);\r\n\r\n  /**\r\n   * This effect is responsible for pushing the new state to the history\r\n   * when the user navigates to a new location assuming they're not going back.\r\n   */\r\n  React.useLayoutEffect(() => {\r\n    if (isGoingBack.current) {\r\n      isGoingBack.current = false;\r\n    } else if (navigationType === 'REPLACE') {\r\n      // Prevent appending to the history when the location changes via a replace:true navigation\r\n      dispatch({\r\n        type: 'REPLACE_STATE',\r\n        payload: { to: location.pathname, search: location.search },\r\n      });\r\n    } else {\r\n      // this should only occur on link movements, not back/forward clicks\r\n      dispatch({\r\n        type: 'PUSH_STATE',\r\n        payload: { to: location.pathname, search: location.search },\r\n      });\r\n    }\r\n  }, [dispatch, location.pathname, location.search, navigationType]);\r\n\r\n  return (\r\n    <Provider pushState={pushState} goBack={goBack} {...state}>\r\n      {children}\r\n    </Provider>\r\n  );\r\n};\r\n\r\ntype HistoryActions =\r\n  | {\r\n      type: 'PUSH_STATE';\r\n      payload: {\r\n        to: string;\r\n        search: string;\r\n      };\r\n    }\r\n  | {\r\n      type: 'REPLACE_STATE';\r\n      payload: {\r\n        to: string;\r\n        search: string;\r\n      };\r\n    }\r\n  | {\r\n      type: 'GO_BACK';\r\n    }\r\n  | {\r\n      type: 'SET_CAN_GO_BACK';\r\n      payload: boolean;\r\n    };\r\n\r\nconst reducer = (state: HistoryState, action: HistoryActions) =>\r\n  produce(state, (draft) => {\r\n    switch (action.type) {\r\n      case 'PUSH_STATE': {\r\n        const path = `${action.payload.to}${action.payload.search}`;\r\n        if (state.currentLocationIndex === state.history.length) {\r\n          // add the new place\r\n          draft.history = [...state.history, path];\r\n        } else {\r\n          // delete all the history after the current place and then add the new place\r\n          draft.history = [...state.history.slice(0, state.currentLocationIndex), path];\r\n        }\r\n\r\n        draft.currentLocation = path;\r\n        draft.currentLocationIndex += 1;\r\n\r\n        break;\r\n      }\r\n      case 'REPLACE_STATE': {\r\n        const path = `${action.payload.to}${action.payload.search}`;\r\n        draft.history = [...state.history.slice(0, state.currentLocationIndex - 1), path];\r\n        draft.currentLocation = path;\r\n        break;\r\n      }\r\n      case 'GO_BACK': {\r\n        const newIndex = state.currentLocationIndex - 1;\r\n\r\n        draft.currentLocation = state.history[newIndex - 1];\r\n        draft.currentLocationIndex = newIndex;\r\n        break;\r\n      }\r\n      case 'SET_CAN_GO_BACK': {\r\n        draft.canGoBack = action.payload;\r\n        break;\r\n      }\r\n      default:\r\n        break;\r\n    }\r\n  });\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * BackButton\r\n * -----------------------------------------------------------------------------------------------*/\r\ninterface BackButtonProps extends Pick<LinkProps, 'disabled'> {\r\n  fallback?: To;\r\n}\r\n\r\n/**\r\n * @beta\r\n * @description The universal back button for the Strapi application. This uses the internal history\r\n * context to navigate the user back to the previous location. It can be completely disabled in a\r\n * specific user case. When no history is available, you can provide a fallback destination,\r\n * otherwise the link will be disabled.\r\n */\r\nconst BackButton = React.forwardRef<HTMLAnchorElement, BackButtonProps>(\r\n  ({ disabled, fallback = '' }, ref) => {\r\n    const { formatMessage } = useIntl();\r\n    const navigate = useNavigate();\r\n\r\n    const canGoBack = useHistory('BackButton', (state) => state.canGoBack);\r\n    const goBack = useHistory('BackButton', (state) => state.goBack);\r\n    const history = useHistory('BackButton', (state) => state.history);\r\n    const currentLocationIndex = useHistory('BackButton', (state) => state.currentLocationIndex);\r\n    const hasFallback = fallback !== '';\r\n    const shouldBeDisabled = disabled || (!canGoBack && !hasFallback);\r\n\r\n    const handleClick = (e: React.MouseEvent<HTMLAnchorElement>) => {\r\n      e.preventDefault();\r\n\r\n      if (canGoBack) {\r\n        goBack();\r\n      } else if (hasFallback) {\r\n        navigate(fallback);\r\n      }\r\n    };\r\n\r\n    // The link destination from the history. Undefined if there is only 1 location in the history.\r\n    const historyTo = canGoBack ? history.at(currentLocationIndex - 2) : undefined;\r\n    // If no link destination from the history, use the fallback.\r\n    const toWithFallback = historyTo ?? fallback;\r\n\r\n    return (\r\n      <Link\r\n        ref={ref}\r\n        tag={NavLink}\r\n        to={toWithFallback}\r\n        onClick={handleClick}\r\n        disabled={shouldBeDisabled}\r\n        aria-disabled={shouldBeDisabled}\r\n        startIcon={<ArrowLeft />}\r\n      >\r\n        {formatMessage({\r\n          id: 'global.back',\r\n          defaultMessage: 'Back',\r\n        })}\r\n      </Link>\r\n    );\r\n  }\r\n);\r\n\r\nexport { BackButton, HistoryProvider, useHistory };\r\nexport type { BackButtonProps, HistoryProviderProps, HistoryContextValue, HistoryState };\r\n"],
  "mappings": "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",
  "names": []
}
