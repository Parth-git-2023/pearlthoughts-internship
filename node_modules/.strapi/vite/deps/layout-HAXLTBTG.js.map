{
  "version": 3,
  "sources": ["../../../../../packages/core/content-manager/admin/src/layout.tsx", "../../../../../packages/core/content-manager/admin/src/components/DragLayer.tsx", "../../../../../packages/core/content-manager/admin/src/components/DragPreviews/ComponentDragPreview.tsx", "../../../../../packages/core/content-manager/admin/src/components/DragPreviews/RelationDragPreview.tsx", "../../../../../packages/core/content-manager/admin/src/components/LeftMenu.tsx", "../../../../../packages/core/content-manager/admin/src/hooks/useContentManagerInitData.ts"],
  "sourcesContent": ["/* eslint-disable check-file/filename-naming-convention */\r\nimport * as React from 'react';\r\n\r\nimport { Page, useGuidedTour, Layouts } from '@strapi/admin/strapi-admin';\r\nimport { useIntl } from 'react-intl';\r\nimport { Navigate, Outlet, useLocation, useMatch } from 'react-router-dom';\r\n\r\nimport { DragLayer, DragLayerProps } from './components/DragLayer';\r\nimport { CardDragPreview } from './components/DragPreviews/CardDragPreview';\r\nimport { ComponentDragPreview } from './components/DragPreviews/ComponentDragPreview';\r\nimport { RelationDragPreview } from './components/DragPreviews/RelationDragPreview';\r\nimport { LeftMenu } from './components/LeftMenu';\r\nimport { ItemTypes } from './constants/dragAndDrop';\r\nimport { useContentManagerInitData } from './hooks/useContentManagerInitData';\r\nimport { getTranslation } from './utils/translations';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Layout\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst Layout = () => {\r\n  const contentTypeMatch = useMatch('/content-manager/:kind/:uid/*');\r\n\r\n  const { isLoading, collectionTypeLinks, models, singleTypeLinks } = useContentManagerInitData();\r\n  const authorisedModels = [...collectionTypeLinks, ...singleTypeLinks].sort((a, b) =>\r\n    a.title.localeCompare(b.title)\r\n  );\r\n\r\n  const { pathname } = useLocation();\r\n  const { formatMessage } = useIntl();\r\n  const startSection = useGuidedTour('Layout', (state) => state.startSection);\r\n  const startSectionRef = React.useRef(startSection);\r\n\r\n  React.useEffect(() => {\r\n    if (startSectionRef.current) {\r\n      startSectionRef.current('contentManager');\r\n    }\r\n  }, []);\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <>\r\n        <Page.Title>\r\n          {formatMessage({\r\n            id: getTranslation('plugin.name'),\r\n            defaultMessage: 'Content Manager',\r\n          })}\r\n        </Page.Title>\r\n        <Page.Loading />\r\n      </>\r\n    );\r\n  }\r\n\r\n  // Array of models that are displayed in the content manager\r\n  const supportedModelsToDisplay = models.filter(({ isDisplayed }) => isDisplayed);\r\n\r\n  // Redirect the user to the 403 page\r\n  if (\r\n    authorisedModels.length === 0 &&\r\n    supportedModelsToDisplay.length > 0 &&\r\n    pathname !== '/content-manager/403'\r\n  ) {\r\n    return <Navigate to=\"/403\" />;\r\n  }\r\n\r\n  // Redirect the user to the create content type page\r\n  if (supportedModelsToDisplay.length === 0 && pathname !== '/no-content-types') {\r\n    return <Navigate to=\"/no-content-types\" />;\r\n  }\r\n\r\n  if (!contentTypeMatch && authorisedModels.length > 0) {\r\n    return (\r\n      <Navigate\r\n        to={{\r\n          pathname: authorisedModels[0].to,\r\n          search: authorisedModels[0].search ?? '',\r\n        }}\r\n        replace\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Page.Title>\r\n        {formatMessage({\r\n          id: getTranslation('plugin.name'),\r\n          defaultMessage: 'Content Manager',\r\n        })}\r\n      </Page.Title>\r\n      <Layouts.Root sideNav={<LeftMenu />}>\r\n        <DragLayer renderItem={renderDraglayerItem} />\r\n        <Outlet />\r\n      </Layouts.Root>\r\n    </>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * renderDraglayerItem\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nfunction renderDraglayerItem({ type, item }: Parameters<DragLayerProps['renderItem']>[0]) {\r\n  if (!type || (type && typeof type !== 'string')) {\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Because a user may have multiple relations / dynamic zones / repeable fields in the same content type,\r\n   * we append the fieldName for the item type to make them unique, however, we then want to extract that\r\n   * first type to apply the correct preview.\r\n   */\r\n  const [actualType] = type.split('_');\r\n\r\n  switch (actualType) {\r\n    case ItemTypes.EDIT_FIELD:\r\n    case ItemTypes.FIELD:\r\n      return <CardDragPreview label={item.label} />;\r\n    case ItemTypes.COMPONENT:\r\n    case ItemTypes.DYNAMIC_ZONE:\r\n      return <ComponentDragPreview displayedValue={item.displayedValue} />;\r\n\r\n    case ItemTypes.RELATION:\r\n      return <RelationDragPreview {...item} />;\r\n\r\n    default:\r\n      return null;\r\n  }\r\n}\r\n\r\nexport { Layout };\r\n", "import * as React from 'react';\r\n\r\nimport { Box } from '@strapi/design-system';\r\nimport { DragLayerMonitor, XYCoord, useDragLayer } from 'react-dnd';\r\n\r\nfunction getStyle(\r\n  initialOffset: XYCoord | null,\r\n  currentOffset: XYCoord | null,\r\n  mouseOffset: XYCoord | null\r\n) {\r\n  if (!initialOffset || !currentOffset || !mouseOffset) {\r\n    return { display: 'none' };\r\n  }\r\n\r\n  const { x, y } = mouseOffset;\r\n\r\n  return {\r\n    transform: `translate(${x}px, ${y}px)`,\r\n  };\r\n}\r\n\r\nexport interface DragLayerProps {\r\n  renderItem: (item: {\r\n    /**\r\n     * TODO: it'd be great if we could make this a union where the type infers the item.\r\n     */\r\n    item: any;\r\n    type: ReturnType<DragLayerMonitor['getItemType']>;\r\n  }) => React.ReactNode;\r\n}\r\n\r\nconst DragLayer = ({ renderItem }: DragLayerProps) => {\r\n  const { itemType, isDragging, item, initialOffset, currentOffset, mouseOffset } = useDragLayer(\r\n    (monitor) => ({\r\n      item: monitor.getItem(),\r\n      itemType: monitor.getItemType(),\r\n      initialOffset: monitor.getInitialSourceClientOffset(),\r\n      currentOffset: monitor.getSourceClientOffset(),\r\n      isDragging: monitor.isDragging(),\r\n      mouseOffset: monitor.getClientOffset(),\r\n    })\r\n  );\r\n\r\n  if (!isDragging) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Box\r\n      height=\"100%\"\r\n      left={0}\r\n      position=\"fixed\"\r\n      pointerEvents=\"none\"\r\n      top={0}\r\n      zIndex={100}\r\n      width=\"100%\"\r\n    >\r\n      <Box style={getStyle(initialOffset, currentOffset, mouseOffset)}>\r\n        {renderItem({ type: itemType, item })}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport { DragLayer };\r\n", "import { Flex, FlexComponent, IconButton, Typography } from '@strapi/design-system';\r\nimport { CaretDown, Drag, Trash } from '@strapi/icons';\r\nimport { styled } from 'styled-components';\r\n\r\ninterface ComponentDragPreviewProps {\r\n  displayedValue: string;\r\n}\r\n\r\nconst ComponentDragPreview = ({ displayedValue }: ComponentDragPreviewProps) => {\r\n  return (\r\n    <Flex\r\n      background=\"neutral0\"\r\n      borderColor=\"neutral200\"\r\n      justifyContent=\"space-between\"\r\n      gap={3}\r\n      padding={3}\r\n      width=\"30rem\"\r\n    >\r\n      <ToggleButton type=\"button\">\r\n        <Flex gap={6}>\r\n          <DropdownIconWrapper\r\n            alignItems=\"center\"\r\n            justifyContent=\"center\"\r\n            background=\"neutral200\"\r\n            height=\"3.2rem\"\r\n            width=\"3.2rem\"\r\n          >\r\n            <CaretDown />\r\n          </DropdownIconWrapper>\r\n\r\n          <Flex maxWidth=\"15rem\">\r\n            <Typography textColor=\"neutral700\" ellipsis>\r\n              {displayedValue}\r\n            </Typography>\r\n          </Flex>\r\n        </Flex>\r\n      </ToggleButton>\r\n\r\n      <Flex gap={2}>\r\n        <IconButton withTooltip={false} label=\"\" variant=\"ghost\">\r\n          <Trash />\r\n        </IconButton>\r\n\r\n        <IconButton withTooltip={false} label=\"\" variant=\"ghost\">\r\n          <Drag />\r\n        </IconButton>\r\n      </Flex>\r\n    </Flex>\r\n  );\r\n};\r\n\r\nconst DropdownIconWrapper = styled<FlexComponent>(Flex)`\r\n  border-radius: 50%;\r\n\r\n  svg {\r\n    height: 0.6rem;\r\n    width: 1.1rem;\r\n    > path {\r\n      fill: ${({ theme }) => theme.colors.neutral600};\r\n    }\r\n  }\r\n`;\r\n\r\n// TODO: we shouldn't have to reset a whole button\r\nconst ToggleButton = styled.button`\r\n  border: none;\r\n  background: transparent;\r\n  display: block;\r\n  width: 100%;\r\n  text-align: unset;\r\n  padding: 0;\r\n`;\r\n\r\nexport { ComponentDragPreview };\r\nexport type { ComponentDragPreviewProps };\r\n", "import { Box, Flex, IconButton, Typography } from '@strapi/design-system';\r\nimport { Cross, Drag } from '@strapi/icons';\r\n\r\nimport { DocumentStatus } from '../../pages/EditView/components/DocumentStatus';\r\nimport {\r\n  DisconnectButton,\r\n  LinkEllipsis,\r\n  FlexWrapper,\r\n} from '../../pages/EditView/components/FormInputs/Relations/Relations';\r\n\r\nimport type { Data } from '@strapi/types';\r\n\r\ninterface RelationDragPreviewProps {\r\n  status?: string;\r\n  displayedValue: string;\r\n  id: Data.ID;\r\n  index: number;\r\n  width: number;\r\n}\r\n\r\nconst RelationDragPreview = ({ status, displayedValue, width }: RelationDragPreviewProps) => {\r\n  return (\r\n    <Box style={{ width }}>\r\n      <Flex\r\n        paddingTop={2}\r\n        paddingBottom={2}\r\n        paddingLeft={2}\r\n        paddingRight={4}\r\n        hasRadius\r\n        borderWidth={1}\r\n        background=\"neutral0\"\r\n        borderColor=\"neutral200\"\r\n        justifyContent=\"space-between\"\r\n        gap={4}\r\n      >\r\n        <FlexWrapper gap={1}>\r\n          <IconButton withTooltip={false} label=\"\" variant=\"ghost\">\r\n            <Drag />\r\n          </IconButton>\r\n          <Flex width=\"100%\" minWidth={0} justifyContent=\"space-between\">\r\n            <Box minWidth={0} paddingTop={1} paddingBottom={1} paddingRight={4}>\r\n              <LinkEllipsis href=\"\">\r\n                <Typography textColor=\"primary600\" ellipsis>\r\n                  {displayedValue}\r\n                </Typography>\r\n              </LinkEllipsis>\r\n            </Box>\r\n            {status ? <DocumentStatus status={status} /> : null}\r\n          </Flex>\r\n        </FlexWrapper>\r\n        <DisconnectButton type=\"button\">\r\n          <Cross width=\"12px\" />\r\n        </DisconnectButton>\r\n      </Flex>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport { RelationDragPreview };\r\nexport type { RelationDragPreviewProps };\r\n", "import * as React from 'react';\r\n\r\nimport { useQueryParams, SubNav } from '@strapi/admin/strapi-admin';\r\nimport { Divider, Flex, TextInput, useCollator, useFilter } from '@strapi/design-system';\r\nimport { Cross, Search } from '@strapi/icons';\r\nimport { parse, stringify } from 'qs';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { useContentTypeSchema } from '../hooks/useContentTypeSchema';\r\nimport { useTypedSelector } from '../modules/hooks';\r\nimport { getTranslation } from '../utils/translations';\r\n\r\nimport type { ContentManagerLink } from '../hooks/useContentManagerInitData';\r\n\r\nconst LeftMenu = () => {\r\n  const [search, setSearch] = React.useState('');\r\n  const [{ query }] = useQueryParams<{ plugins?: object }>();\r\n  const { formatMessage, locale } = useIntl();\r\n\r\n  const collectionTypeLinks = useTypedSelector(\r\n    (state) => state['content-manager'].app.collectionTypeLinks\r\n  );\r\n\r\n  const singleTypeLinks = useTypedSelector((state) => state['content-manager'].app.singleTypeLinks);\r\n  const { schemas } = useContentTypeSchema();\r\n\r\n  const { startsWith } = useFilter(locale, {\r\n    sensitivity: 'base',\r\n  });\r\n\r\n  const formatter = useCollator(locale, {\r\n    sensitivity: 'base',\r\n  });\r\n\r\n  const menu = React.useMemo(\r\n    () =>\r\n      [\r\n        {\r\n          id: 'collectionTypes',\r\n          title: formatMessage({\r\n            id: getTranslation('components.LeftMenu.collection-types'),\r\n            defaultMessage: 'Collection Types',\r\n          }),\r\n          searchable: true,\r\n          links: collectionTypeLinks,\r\n        },\r\n        {\r\n          id: 'singleTypes',\r\n          title: formatMessage({\r\n            id: getTranslation('components.LeftMenu.single-types'),\r\n            defaultMessage: 'Single Types',\r\n          }),\r\n          searchable: true,\r\n          links: singleTypeLinks,\r\n        },\r\n      ].map((section) => ({\r\n        ...section,\r\n        links: section.links\r\n          /**\r\n           * Filter by the search value\r\n           */\r\n          .filter((link) => startsWith(link.title, search))\r\n          /**\r\n           * Sort correctly using the language\r\n           */\r\n          .sort((a, b) => formatter.compare(a.title, b.title))\r\n          /**\r\n           * Apply the formated strings to the links from react-intl\r\n           */\r\n          .map((link) => {\r\n            return {\r\n              ...link,\r\n              title: formatMessage({ id: link.title, defaultMessage: link.title }),\r\n            };\r\n          }),\r\n      })),\r\n    [collectionTypeLinks, search, singleTypeLinks, startsWith, formatMessage, formatter]\r\n  );\r\n\r\n  const handleClear = () => {\r\n    setSearch('');\r\n  };\r\n\r\n  const handleChangeSearch = ({ target: { value } }: { target: { value: string } }) => {\r\n    setSearch(value);\r\n  };\r\n\r\n  const label = formatMessage({\r\n    id: getTranslation('header.name'),\r\n    defaultMessage: 'Content Manager',\r\n  });\r\n\r\n  const getPluginsParamsForLink = (link: ContentManagerLink) => {\r\n    const schema = schemas.find((schema) => schema.uid === link.uid);\r\n    const isI18nEnabled = Boolean((schema?.pluginOptions?.i18n as any)?.localized);\r\n\r\n    // The search params have the i18n plugin\r\n    if (query.plugins && 'i18n' in query.plugins) {\r\n      // Prepare removal of i18n from the plugins search params\r\n      const { i18n, ...restPlugins } = query.plugins;\r\n\r\n      // i18n is not enabled, remove it from the plugins search params\r\n      if (!isI18nEnabled) {\r\n        return restPlugins;\r\n      }\r\n\r\n      // i18n is enabled, put the plugins search params back together\r\n      return { i18n, ...restPlugins };\r\n    }\r\n\r\n    return query.plugins;\r\n  };\r\n\r\n  return (\r\n    <SubNav.Main aria-label={label}>\r\n      <SubNav.Header label={label} />\r\n      <Divider background=\"neutral150\" />\r\n      <Flex padding={5} gap={3} direction={'column'} alignItems={'stretch'}>\r\n        <TextInput\r\n          startAction={<Search fill=\"neutral500\" />}\r\n          value={search}\r\n          onChange={handleChangeSearch}\r\n          aria-label=\"Search\"\r\n          placeholder={formatMessage({\r\n            id: 'content-manager.components.LeftMenu.Search.label',\r\n            defaultMessage: 'Search for a content type',\r\n          })}\r\n          endAction={<Cross onClick={handleClear} fill=\"neutral500\" cursor=\"pointer\" />}\r\n          size=\"S\"\r\n        />\r\n      </Flex>\r\n      <SubNav.Sections>\r\n        {menu.map((section) => {\r\n          return (\r\n            <SubNav.Section key={section.id} label={section.title}>\r\n              {section.links.map((link) => {\r\n                return (\r\n                  <SubNav.Link\r\n                    key={link.uid}\r\n                    to={{\r\n                      pathname: link.to,\r\n                      search: stringify({\r\n                        ...parse(link.search ?? ''),\r\n                        plugins: getPluginsParamsForLink(link),\r\n                      }),\r\n                    }}\r\n                    label={link.title}\r\n                  />\r\n                );\r\n              })}\r\n            </SubNav.Section>\r\n          );\r\n        })}\r\n      </SubNav.Sections>\r\n    </SubNav.Main>\r\n  );\r\n};\r\n\r\nexport { LeftMenu };\r\n", "import { useEffect } from 'react';\r\n\r\nimport {\r\n  useAuth,\r\n  type Permission,\r\n  useNotification,\r\n  useStrapiApp,\r\n  useAPIErrorHandler,\r\n} from '@strapi/admin/strapi-admin';\r\nimport { useNotifyAT } from '@strapi/design-system';\r\nimport { stringify } from 'qs';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { COLLECTION_TYPES, SINGLE_TYPES } from '../constants/collections';\r\nimport { HOOKS } from '../constants/hooks';\r\nimport { AppState, setInitialData } from '../modules/app';\r\nimport { useTypedDispatch, useTypedSelector } from '../modules/hooks';\r\nimport { useGetAllContentTypeSettingsQuery } from '../services/contentTypes';\r\nimport { useGetInitialDataQuery } from '../services/init';\r\nimport { getTranslation } from '../utils/translations';\r\n\r\nimport type { Component } from '../../../shared/contracts/components';\r\nimport type {\r\n  ContentType,\r\n  FindContentTypesSettings,\r\n} from '../../../shared/contracts/content-types';\r\nimport type { GetInitData } from '../../../shared/contracts/init';\r\n\r\nconst { MUTATE_COLLECTION_TYPES_LINKS, MUTATE_SINGLE_TYPES_LINKS } = HOOKS;\r\n\r\ninterface ContentManagerLink {\r\n  permissions: Permission[];\r\n  search: string | null;\r\n  kind: string;\r\n  title: string;\r\n  to: string;\r\n  uid: string;\r\n  name: string;\r\n  isDisplayed: boolean;\r\n}\r\n\r\nconst useContentManagerInitData = (): AppState => {\r\n  const { toggleNotification } = useNotification();\r\n  const dispatch = useTypedDispatch();\r\n  const runHookWaterfall = useStrapiApp(\r\n    'useContentManagerInitData',\r\n    (state) => state.runHookWaterfall\r\n  );\r\n  const { notifyStatus } = useNotifyAT();\r\n  const { formatMessage } = useIntl();\r\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler(getTranslation);\r\n  const checkUserHasPermissions = useAuth(\r\n    'useContentManagerInitData',\r\n    (state) => state.checkUserHasPermissions\r\n  );\r\n\r\n  const state = useTypedSelector((state) => state['content-manager'].app);\r\n\r\n  const initialDataQuery = useGetInitialDataQuery(undefined, {\r\n    /**\r\n     * TODO: remove this when the CTB has been refactored to use redux-toolkit-query\r\n     * and it can invalidate the cache on mutation\r\n     */\r\n    refetchOnMountOrArgChange: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (initialDataQuery.data) {\r\n      notifyStatus(\r\n        formatMessage({\r\n          id: getTranslation('App.schemas.data-loaded'),\r\n          defaultMessage: 'The schemas have been successfully loaded.',\r\n        })\r\n      );\r\n    }\r\n  }, [formatMessage, initialDataQuery.data, notifyStatus]);\r\n\r\n  useEffect(() => {\r\n    if (initialDataQuery.error) {\r\n      toggleNotification({ type: 'danger', message: formatAPIError(initialDataQuery.error) });\r\n    }\r\n  }, [formatAPIError, initialDataQuery.error, toggleNotification]);\r\n\r\n  const contentTypeSettingsQuery = useGetAllContentTypeSettingsQuery();\r\n\r\n  useEffect(() => {\r\n    if (contentTypeSettingsQuery.error) {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatAPIError(contentTypeSettingsQuery.error),\r\n      });\r\n    }\r\n  }, [formatAPIError, contentTypeSettingsQuery.error, toggleNotification]);\r\n\r\n  const formatData = async (\r\n    components: Component[],\r\n    contentTypes: ContentType[],\r\n    fieldSizes: GetInitData.Response['data']['fieldSizes'],\r\n    contentTypeConfigurations: FindContentTypesSettings.Response['data']\r\n  ) => {\r\n    /**\r\n     * We group these by the two types we support. We do with an object because we can use default\r\n     * values of arrays to make sure we always have an array to manipulate further on if, for example,\r\n     * a user has not made any single types.\r\n     *\r\n     * This means we have to manually add new content types to this hook if we add a new type – but\r\n     * the safety is worth it.\r\n     */\r\n    const { collectionType: collectionTypeLinks, singleType: singleTypeLinks } =\r\n      contentTypes.reduce<{\r\n        collectionType: ContentType[];\r\n        singleType: ContentType[];\r\n      }>(\r\n        (acc, model) => {\r\n          acc[model.kind].push(model);\r\n          return acc;\r\n        },\r\n        {\r\n          collectionType: [],\r\n          singleType: [],\r\n        }\r\n      );\r\n    const collectionTypeSectionLinks = generateLinks(\r\n      collectionTypeLinks,\r\n      'collectionTypes',\r\n      contentTypeConfigurations\r\n    );\r\n    const singleTypeSectionLinks = generateLinks(singleTypeLinks, 'singleTypes');\r\n\r\n    // Collection Types verifications\r\n    const collectionTypeLinksPermissions = await Promise.all(\r\n      collectionTypeSectionLinks.map(({ permissions }) => checkUserHasPermissions(permissions))\r\n    );\r\n\r\n    const authorizedCollectionTypeLinks = collectionTypeSectionLinks.filter(\r\n      (_, index) => collectionTypeLinksPermissions[index].length > 0\r\n    );\r\n\r\n    // Single Types verifications\r\n    const singleTypeLinksPermissions = await Promise.all(\r\n      singleTypeSectionLinks.map(({ permissions }) => checkUserHasPermissions(permissions))\r\n    );\r\n    const authorizedSingleTypeLinks = singleTypeSectionLinks.filter(\r\n      (_, index) => singleTypeLinksPermissions[index].length > 0\r\n    );\r\n    const { ctLinks } = runHookWaterfall(MUTATE_COLLECTION_TYPES_LINKS, {\r\n      ctLinks: authorizedCollectionTypeLinks,\r\n      models: contentTypes,\r\n    });\r\n    const { stLinks } = runHookWaterfall(MUTATE_SINGLE_TYPES_LINKS, {\r\n      stLinks: authorizedSingleTypeLinks,\r\n      models: contentTypes,\r\n    });\r\n\r\n    dispatch(\r\n      setInitialData({\r\n        authorizedCollectionTypeLinks: ctLinks,\r\n        authorizedSingleTypeLinks: stLinks,\r\n        components,\r\n        contentTypeSchemas: contentTypes,\r\n        fieldSizes,\r\n      })\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (initialDataQuery.data && contentTypeSettingsQuery.data) {\r\n      formatData(\r\n        initialDataQuery.data.components,\r\n        initialDataQuery.data.contentTypes,\r\n        initialDataQuery.data.fieldSizes,\r\n        contentTypeSettingsQuery.data\r\n      );\r\n    }\r\n  }, [initialDataQuery.data, contentTypeSettingsQuery.data]);\r\n\r\n  return { ...state };\r\n};\r\n\r\nconst generateLinks = (\r\n  links: ContentType[],\r\n  type: 'collectionTypes' | 'singleTypes',\r\n  configurations: FindContentTypesSettings.Response['data'] = []\r\n) => {\r\n  return links\r\n    .filter((link) => link.isDisplayed)\r\n    .map((link) => {\r\n      const collectionTypesPermissions = [\r\n        { action: 'plugin::content-manager.explorer.create', subject: link.uid },\r\n        { action: 'plugin::content-manager.explorer.read', subject: link.uid },\r\n      ];\r\n      const singleTypesPermissions = [\r\n        { action: 'plugin::content-manager.explorer.read', subject: link.uid },\r\n      ];\r\n      const permissions =\r\n        type === 'collectionTypes' ? collectionTypesPermissions : singleTypesPermissions;\r\n\r\n      const currentContentTypeConfig = configurations.find(({ uid }) => uid === link.uid);\r\n\r\n      let search = null;\r\n\r\n      if (currentContentTypeConfig) {\r\n        const searchParams = {\r\n          page: 1,\r\n          pageSize: currentContentTypeConfig.settings.pageSize,\r\n          sort: `${currentContentTypeConfig.settings.defaultSortBy}:${currentContentTypeConfig.settings.defaultSortOrder}`,\r\n        };\r\n\r\n        search = stringify(searchParams, { encode: false });\r\n      }\r\n\r\n      return {\r\n        permissions,\r\n        search,\r\n        kind: link.kind,\r\n        title: link.info.displayName,\r\n        to: `/content-manager/${link.kind === 'collectionType' ? COLLECTION_TYPES : SINGLE_TYPES}/${\r\n          link.uid\r\n        }`,\r\n        uid: link.uid,\r\n        // Used for the list item key in the helper plugin\r\n        name: link.uid,\r\n        isDisplayed: link.isDisplayed,\r\n      } satisfies ContentManagerLink;\r\n    });\r\n};\r\n\r\nexport { useContentManagerInitData };\r\nexport type { ContentManagerLink };\r\n"],
  "mappings": "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",
  "names": ["React", "import_jsx_runtime", "import_jsx_runtime", "import_jsx_runtime", "schema", "import_qs", "state", "import_jsx_runtime"]
}
