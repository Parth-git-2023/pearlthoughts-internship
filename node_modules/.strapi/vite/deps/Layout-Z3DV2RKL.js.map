{
  "version": 3,
  "sources": ["../../../../../packages/core/admin/admin/src/hooks/useSettingsMenu.ts", "../../../../../packages/core/admin/admin/src/pages/Settings/components/SettingsNav.tsx", "../../../../../packages/core/admin/admin/src/pages/Settings/Layout.tsx"],
  "sourcesContent": ["import * as React from 'react';\r\n\r\nimport sortBy from 'lodash/sortBy';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { SETTINGS_LINKS_CE, SettingsMenuLink } from '../constants';\r\nimport { useAppInfo } from '../features/AppInfo';\r\nimport { useAuth } from '../features/Auth';\r\nimport { useStrapiApp } from '../features/StrapiApp';\r\nimport { selectAdminPermissions } from '../selectors';\r\nimport { PermissionMap } from '../types/permissions';\r\n\r\nimport { useEnterprise } from './useEnterprise';\r\n\r\nimport type {\r\n  StrapiAppSetting,\r\n  StrapiAppSettingLink as IStrapiAppSettingLink,\r\n} from '../core/apis/router';\r\n\r\nconst formatLinks = (menu: SettingsMenuSection[]): SettingsMenuSectionWithDisplayedLinks[] =>\r\n  menu.map((menuSection) => {\r\n    const formattedLinks = menuSection.links.map((link) => ({\r\n      ...link,\r\n      isDisplayed: false,\r\n    }));\r\n\r\n    return { ...menuSection, links: formattedLinks };\r\n  });\r\n\r\ninterface SettingsMenuLinkWithPermissions extends SettingsMenuLink {\r\n  permissions: IStrapiAppSettingLink['permissions'];\r\n  hasNotification?: boolean;\r\n}\r\n\r\ninterface StrapiAppSettingsLink extends IStrapiAppSettingLink {\r\n  licenseOnly?: never;\r\n  hasNotification?: never;\r\n}\r\n\r\ninterface SettingsMenuSection extends Omit<StrapiAppSetting, 'links'> {\r\n  links: Array<SettingsMenuLinkWithPermissions | StrapiAppSettingsLink>;\r\n}\r\n\r\ninterface SettingsMenuLinkWithPermissionsAndDisplayed extends SettingsMenuLinkWithPermissions {\r\n  isDisplayed: boolean;\r\n}\r\n\r\ninterface StrapiAppSettingLinkWithDisplayed extends StrapiAppSettingsLink {\r\n  isDisplayed: boolean;\r\n}\r\n\r\ninterface SettingsMenuSectionWithDisplayedLinks extends Omit<SettingsMenuSection, 'links'> {\r\n  links: Array<SettingsMenuLinkWithPermissionsAndDisplayed | StrapiAppSettingLinkWithDisplayed>;\r\n}\r\n\r\ntype SettingsMenu = SettingsMenuSectionWithDisplayedLinks[];\r\n\r\nconst useSettingsMenu = (): {\r\n  isLoading: boolean;\r\n  menu: SettingsMenu;\r\n} => {\r\n  const [{ isLoading, menu }, setData] = React.useState<{\r\n    isLoading: boolean;\r\n    menu: SettingsMenu;\r\n  }>({\r\n    isLoading: true,\r\n    menu: [],\r\n  });\r\n  const checkUserHasPermission = useAuth(\r\n    'useSettingsMenu',\r\n    (state) => state.checkUserHasPermissions\r\n  );\r\n  const shouldUpdateStrapi = useAppInfo('useSettingsMenu', (state) => state.shouldUpdateStrapi);\r\n  const settings = useStrapiApp('useSettingsMenu', (state) => state.settings);\r\n  const permissions = useSelector(selectAdminPermissions);\r\n\r\n  /**\r\n   * memoize the return value of this function to avoid re-computing it on every render\r\n   * because it's used in an effect it ends up re-running recursively.\r\n   */\r\n  const ceLinks = React.useMemo(() => SETTINGS_LINKS_CE(), []);\r\n\r\n  const { admin: adminLinks, global: globalLinks } = useEnterprise(\r\n    ceLinks,\r\n    async () => (await import('../../../ee/admin/src/constants')).SETTINGS_LINKS_EE(),\r\n    {\r\n      combine(ceLinks, eeLinks) {\r\n        return {\r\n          admin: [...eeLinks.admin, ...ceLinks.admin],\r\n          global: [...ceLinks.global, ...eeLinks.global],\r\n        };\r\n      },\r\n      defaultValue: {\r\n        admin: [],\r\n        global: [],\r\n      },\r\n    }\r\n  );\r\n\r\n  const addPermissions = React.useCallback(\r\n    (link: SettingsMenuLink) => {\r\n      if (!link.id) {\r\n        throw new Error('The settings menu item must have an id attribute.');\r\n      }\r\n\r\n      return {\r\n        ...link,\r\n        permissions: permissions.settings?.[link.id as keyof PermissionMap['settings']]?.main ?? [],\r\n      } satisfies SettingsMenuLinkWithPermissions;\r\n    },\r\n    [permissions.settings]\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    const getData = async () => {\r\n      interface MenuLinkPermission {\r\n        hasPermission: boolean;\r\n        sectionIndex: number;\r\n        linkIndex: number;\r\n      }\r\n\r\n      const buildMenuPermissions = (sections: SettingsMenuSectionWithDisplayedLinks[]) =>\r\n        Promise.all(\r\n          sections.reduce<Promise<MenuLinkPermission>[]>((acc, section, sectionIndex) => {\r\n            const linksWithPermissions = section.links.map(async (link, linkIndex) => ({\r\n              hasPermission: (await checkUserHasPermission(link.permissions)).length > 0,\r\n              sectionIndex,\r\n              linkIndex,\r\n            }));\r\n\r\n            return [...acc, ...linksWithPermissions];\r\n          }, [])\r\n        );\r\n\r\n      const menuPermissions = await buildMenuPermissions(sections);\r\n\r\n      setData((prev) => {\r\n        return {\r\n          ...prev,\r\n          isLoading: false,\r\n          menu: sections.map((section, sectionIndex) => ({\r\n            ...section,\r\n            links: section.links.map((link, linkIndex) => {\r\n              const permission = menuPermissions.find(\r\n                (permission) =>\r\n                  permission.sectionIndex === sectionIndex && permission.linkIndex === linkIndex\r\n              );\r\n\r\n              return {\r\n                ...link,\r\n                isDisplayed: Boolean(permission?.hasPermission),\r\n              };\r\n            }),\r\n          })),\r\n        };\r\n      });\r\n    };\r\n\r\n    const { global, ...otherSections } = settings;\r\n    const sections = formatLinks([\r\n      {\r\n        ...global,\r\n        links: sortBy([...global.links, ...globalLinks.map(addPermissions)], (link) => link.id).map(\r\n          (link) => ({\r\n            ...link,\r\n            hasNotification: link.id === '000-application-infos' && shouldUpdateStrapi,\r\n          })\r\n        ),\r\n      },\r\n      {\r\n        id: 'permissions',\r\n        intlLabel: { id: 'Settings.permissions', defaultMessage: 'Administration Panel' },\r\n        links: adminLinks.map(addPermissions),\r\n      },\r\n      ...Object.values(otherSections),\r\n    ]);\r\n\r\n    getData();\r\n  }, [\r\n    adminLinks,\r\n    globalLinks,\r\n    settings,\r\n    shouldUpdateStrapi,\r\n    addPermissions,\r\n    checkUserHasPermission,\r\n  ]);\r\n\r\n  return {\r\n    isLoading,\r\n    menu: menu.map((menuItem) => ({\r\n      ...menuItem,\r\n      links: menuItem.links.filter((link) => link.isDisplayed),\r\n    })),\r\n  };\r\n};\r\n\r\nexport { useSettingsMenu };\r\nexport type { SettingsMenu };\r\n", "import { Badge, Divider } from '@strapi/design-system';\r\nimport { Lightning } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { SubNav } from '../../../components/SubNav';\r\nimport { useTracking } from '../../../features/Tracking';\r\nimport { SettingsMenu } from '../../../hooks/useSettingsMenu';\r\n\r\ninterface SettingsNavProps {\r\n  menu: SettingsMenu;\r\n}\r\n\r\nconst StyledBadge = styled(Badge)`\r\n  border-radius: 50%;\r\n  padding: ${({ theme }) => theme.spaces[2]};\r\n  height: 2rem;\r\n`;\r\n\r\nconst SettingsNav = ({ menu }: SettingsNavProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const { trackUsage } = useTracking();\r\n  const { pathname } = useLocation();\r\n\r\n  const filteredMenu = menu.filter(\r\n    (section) => !section.links.every((link) => link.isDisplayed === false)\r\n  );\r\n\r\n  const sections = filteredMenu.map((section) => {\r\n    return {\r\n      ...section,\r\n      title: section.intlLabel,\r\n      links: section.links.map((link) => {\r\n        return {\r\n          ...link,\r\n          title: link.intlLabel,\r\n          name: link.id,\r\n        };\r\n      }),\r\n    };\r\n  });\r\n\r\n  const label = formatMessage({\r\n    id: 'global.settings',\r\n    defaultMessage: 'Settings',\r\n  });\r\n\r\n  const handleClickOnLink = (destination: string) => () => {\r\n    trackUsage('willNavigate', { from: pathname, to: destination });\r\n  };\r\n\r\n  return (\r\n    <SubNav.Main aria-label={label}>\r\n      <SubNav.Header label={label} />\r\n      <Divider background=\"neutral150\" marginBottom={5} />\r\n      <SubNav.Sections>\r\n        {sections.map((section) => (\r\n          <SubNav.Section key={section.id} label={formatMessage(section.intlLabel)}>\r\n            {section.links.map((link) => {\r\n              return (\r\n                <SubNav.Link\r\n                  to={link.to}\r\n                  onClick={handleClickOnLink(link.to)}\r\n                  key={link.id}\r\n                  label={formatMessage(link.intlLabel)}\r\n                  endAction={\r\n                    <>\r\n                      {link?.licenseOnly && (\r\n                        <Lightning fill=\"primary600\" width=\"1.5rem\" height=\"1.5rem\" />\r\n                      )}\r\n                      {link?.hasNotification && (\r\n                        <StyledBadge\r\n                          aria-label=\"Notification\"\r\n                          backgroundColor=\"primary600\"\r\n                          textColor=\"neutral0\"\r\n                        >\r\n                          1\r\n                        </StyledBadge>\r\n                      )}\r\n                    </>\r\n                  }\r\n                />\r\n              );\r\n            })}\r\n          </SubNav.Section>\r\n        ))}\r\n      </SubNav.Sections>\r\n    </SubNav.Main>\r\n  );\r\n};\r\n\r\nexport { SettingsNav };\r\nexport type { SettingsNavProps };\r\n", "import { useIntl } from 'react-intl';\r\nimport { Navigate, Outlet, useMatch } from 'react-router-dom';\r\n\r\nimport { Layouts } from '../../components/Layouts/Layout';\r\nimport { Page } from '../../components/PageHelpers';\r\nimport { useSettingsMenu } from '../../hooks/useSettingsMenu';\r\n\r\nimport { SettingsNav } from './components/SettingsNav';\r\n\r\nconst Layout = () => {\r\n  /**\r\n   * This ensures we're capturing the settingId from the URL\r\n   * but also lets any nesting after that pass.\r\n   */\r\n  const match = useMatch('/settings/:settingId/*');\r\n  const { formatMessage } = useIntl();\r\n  const { isLoading, menu } = useSettingsMenu();\r\n\r\n  // Since the useSettingsMenu hook can make API calls in order to check the links permissions\r\n  // We need to add a loading state to prevent redirecting the user while permissions are being checked\r\n  if (isLoading) {\r\n    return <Page.Loading />;\r\n  }\r\n\r\n  if (!match?.params.settingId) {\r\n    return <Navigate to=\"application-infos\" />;\r\n  }\r\n\r\n  return (\r\n    <Layouts.Root sideNav={<SettingsNav menu={menu} />}>\r\n      <Page.Title>\r\n        {formatMessage({\r\n          id: 'global.settings',\r\n          defaultMessage: 'Settings',\r\n        })}\r\n      </Page.Title>\r\n      <Outlet />\r\n    </Layouts.Root>\r\n  );\r\n};\r\n\r\nexport { Layout };\r\n"],
  "mappings": "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",
  "names": ["ceLinks", "sections", "permission", "sortBy", "import_jsx_runtime"]
}
