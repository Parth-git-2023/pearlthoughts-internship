{
  "version": 3,
  "sources": ["../../../../../packages/core/admin/admin/src/pages/Settings/pages/ApiTokens/ListView.tsx"],
  "sourcesContent": ["import * as React from 'react';\r\n\r\nimport { EmptyStateLayout, LinkButton } from '@strapi/design-system';\r\nimport { Plus } from '@strapi/icons';\r\nimport { EmptyDocuments } from '@strapi/icons/symbols';\r\nimport * as qs from 'qs';\r\nimport { useIntl } from 'react-intl';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\n\r\nimport { useGuidedTour } from '../../../../components/GuidedTour/Provider';\r\nimport { Layouts } from '../../../../components/Layouts/Layout';\r\nimport { Page } from '../../../../components/PageHelpers';\r\nimport { tours as unstable_tours } from '../../../../components/UnstableGuidedTour/Tours';\r\nimport { useTypedSelector } from '../../../../core/store/hooks';\r\nimport { useNotification } from '../../../../features/Notifications';\r\nimport { useTracking } from '../../../../features/Tracking';\r\nimport { useAPIErrorHandler } from '../../../../hooks/useAPIErrorHandler';\r\nimport { useOnce } from '../../../../hooks/useOnce';\r\nimport { useRBAC } from '../../../../hooks/useRBAC';\r\nimport { useDeleteAPITokenMutation, useGetAPITokensQuery } from '../../../../services/apiTokens';\r\nimport { API_TOKEN_TYPE } from '../../components/Tokens/constants';\r\nimport { Table } from '../../components/Tokens/Table';\r\n\r\nimport type { Data } from '@strapi/types';\r\n\r\nconst TABLE_HEADERS = [\r\n  {\r\n    name: 'name',\r\n    label: {\r\n      id: 'Settings.apiTokens.ListView.headers.name',\r\n      defaultMessage: 'Name',\r\n    },\r\n    sortable: true,\r\n  },\r\n  {\r\n    name: 'description',\r\n    label: {\r\n      id: 'Settings.apiTokens.ListView.headers.description',\r\n      defaultMessage: 'Description',\r\n    },\r\n    sortable: false,\r\n  },\r\n  {\r\n    name: 'createdAt',\r\n    label: {\r\n      id: 'Settings.apiTokens.ListView.headers.createdAt',\r\n      defaultMessage: 'Created at',\r\n    },\r\n    sortable: false,\r\n  },\r\n  {\r\n    name: 'lastUsedAt',\r\n    label: {\r\n      id: 'Settings.apiTokens.ListView.headers.lastUsedAt',\r\n      defaultMessage: 'Last used',\r\n    },\r\n    sortable: false,\r\n  },\r\n];\r\n\r\nexport const ListView = () => {\r\n  const { formatMessage } = useIntl();\r\n  const { toggleNotification } = useNotification();\r\n  const permissions = useTypedSelector(\r\n    (state) => state.admin_app.permissions.settings?.['api-tokens']\r\n  );\r\n  const {\r\n    allowedActions: { canRead, canCreate, canDelete, canUpdate },\r\n  } = useRBAC(permissions);\r\n  const navigate = useNavigate();\r\n  const { trackUsage } = useTracking();\r\n  const startSection = useGuidedTour('ListView', (state) => state.startSection);\r\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\r\n\r\n  React.useEffect(() => {\r\n    startSection('apiTokens');\r\n  }, [startSection]);\r\n\r\n  React.useEffect(() => {\r\n    navigate({ search: qs.stringify({ sort: 'name:ASC' }, { encode: false }) });\r\n  }, [navigate]);\r\n\r\n  const headers = TABLE_HEADERS.map((header) => ({\r\n    ...header,\r\n    label: formatMessage(header.label),\r\n  }));\r\n\r\n  useOnce(() => {\r\n    trackUsage('willAccessTokenList', {\r\n      tokenType: API_TOKEN_TYPE,\r\n    });\r\n  });\r\n\r\n  const { data: apiTokens = [], isLoading, error } = useGetAPITokensQuery();\r\n\r\n  React.useEffect(() => {\r\n    if (error) {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatAPIError(error),\r\n      });\r\n    }\r\n  }, [error, formatAPIError, toggleNotification]);\r\n\r\n  React.useEffect(() => {\r\n    trackUsage('didAccessTokenList', { number: apiTokens.length, tokenType: API_TOKEN_TYPE });\r\n  }, [apiTokens, trackUsage]);\r\n\r\n  const [deleteToken] = useDeleteAPITokenMutation();\r\n\r\n  const handleDelete = async (id: Data.ID) => {\r\n    try {\r\n      const res = await deleteToken(id);\r\n\r\n      if ('error' in res) {\r\n        toggleNotification({\r\n          type: 'danger',\r\n          message: formatAPIError(res.error),\r\n        });\r\n\r\n        return;\r\n      }\r\n\r\n      trackUsage('didDeleteToken');\r\n    } catch {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatMessage({\r\n          id: 'notification.error',\r\n          defaultMessage: 'Something went wrong',\r\n        }),\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Page.Title>\r\n        {formatMessage(\r\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\r\n          { name: 'API Tokens' }\r\n        )}\r\n      </Page.Title>\r\n      <Layouts.Header\r\n        title={formatMessage({ id: 'Settings.apiTokens.title', defaultMessage: 'API Tokens' })}\r\n        subtitle={formatMessage({\r\n          id: 'Settings.apiTokens.description',\r\n          defaultMessage: 'List of generated tokens to consume the API',\r\n        })}\r\n        primaryAction={\r\n          canCreate && (\r\n            <unstable_tours.apiTokens.CreateAnAPIToken>\r\n              <LinkButton\r\n                tag={Link}\r\n                data-testid=\"create-api-token-button\"\r\n                startIcon={<Plus />}\r\n                size=\"S\"\r\n                onClick={() =>\r\n                  trackUsage('willAddTokenFromList', {\r\n                    tokenType: API_TOKEN_TYPE,\r\n                  })\r\n                }\r\n                to=\"/settings/api-tokens/create\"\r\n              >\r\n                {formatMessage({\r\n                  id: 'Settings.apiTokens.create',\r\n                  defaultMessage: 'Create new API Token',\r\n                })}\r\n              </LinkButton>\r\n            </unstable_tours.apiTokens.CreateAnAPIToken>\r\n          )\r\n        }\r\n      />\r\n      {!canRead ? (\r\n        <Page.NoPermissions />\r\n      ) : (\r\n        <Page.Main aria-busy={isLoading}>\r\n          <unstable_tours.apiTokens.Introduction>\r\n            <Layouts.Content>\r\n              {apiTokens.length > 0 && (\r\n                <Table\r\n                  permissions={{ canRead, canDelete, canUpdate }}\r\n                  headers={headers}\r\n                  isLoading={isLoading}\r\n                  onConfirmDelete={handleDelete}\r\n                  tokens={apiTokens}\r\n                  tokenType={API_TOKEN_TYPE}\r\n                />\r\n              )}\r\n              {canCreate && apiTokens.length === 0 ? (\r\n                <EmptyStateLayout\r\n                  icon={<EmptyDocuments width=\"16rem\" />}\r\n                  content={formatMessage({\r\n                    id: 'Settings.apiTokens.addFirstToken',\r\n                    defaultMessage: 'Add your first API Token',\r\n                  })}\r\n                  action={\r\n                    <LinkButton\r\n                      tag={Link}\r\n                      variant=\"secondary\"\r\n                      startIcon={<Plus />}\r\n                      to=\"/settings/api-tokens/create\"\r\n                    >\r\n                      {formatMessage({\r\n                        id: 'Settings.apiTokens.addNewToken',\r\n                        defaultMessage: 'Add new API Token',\r\n                      })}\r\n                    </LinkButton>\r\n                  }\r\n                />\r\n              ) : null}\r\n              {!canCreate && apiTokens.length === 0 ? (\r\n                <EmptyStateLayout\r\n                  icon={<EmptyDocuments width=\"16rem\" />}\r\n                  content={formatMessage({\r\n                    id: 'Settings.apiTokens.emptyStateLayout',\r\n                    defaultMessage: 'You donâ€™t have any content yet...',\r\n                  })}\r\n                />\r\n              ) : null}\r\n            </Layouts.Content>\r\n          </unstable_tours.apiTokens.Introduction>\r\n        </Page.Main>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport const ProtectedListView = () => {\r\n  const permissions = useTypedSelector(\r\n    (state) => state.admin_app.permissions.settings?.['api-tokens'].main\r\n  );\r\n\r\n  return (\r\n    <Page.Protect permissions={permissions}>\r\n      <ListView />\r\n    </Page.Protect>\r\n  );\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
