{
  "version": 3,
  "sources": ["../../../../../packages/core/admin/admin/src/components/Table.tsx", "../../../../../packages/core/admin/admin/src/hooks/useControllableState.ts"],
  "sourcesContent": ["/**\r\n * TODO: honestly, half of this stuff should come straight from\r\n * the design-system and then we can just wrap round the bits for\r\n * the i18n & router interactions.\r\n *\r\n * So we'll do that in v2 of the DS.\r\n */\r\n\r\nimport * as React from 'react';\r\n\r\nimport {\r\n  Flex,\r\n  Typography,\r\n  Th,\r\n  Tbody,\r\n  Td,\r\n  Tooltip,\r\n  IconButton,\r\n  Thead,\r\n  Tr,\r\n  RawTrProps,\r\n  Checkbox,\r\n  Loader,\r\n  Table as DSTable,\r\n  EmptyStateLayout,\r\n  EmptyStateLayoutProps,\r\n  TableProps,\r\n  RawTdProps,\r\n} from '@strapi/design-system';\r\nimport { CaretDown } from '@strapi/icons';\r\nimport { EmptyDocuments } from '@strapi/icons/symbols';\r\nimport { useIntl } from 'react-intl';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { useControllableState } from '../hooks/useControllableState';\r\nimport { useQueryParams } from '../hooks/useQueryParams';\r\n\r\nimport { createContext } from './Context';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Root\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface BaseRow {\r\n  id: string | number;\r\n  [key: string]: any;\r\n}\r\n\r\ninterface TableHeader<TData = object, THeader = object> {\r\n  /**\r\n   * Typically used by plugins to render a custom cell\r\n   */\r\n  cellFormatter?: (data: TData, header: Omit<THeader, 'cellFormatter'>) => React.ReactNode;\r\n  label: string;\r\n  name: string;\r\n  searchable?: boolean;\r\n  sortable?: boolean;\r\n}\r\n\r\ninterface TableContextValue<TRow extends BaseRow, THeader extends TableHeader<TRow, THeader>>\r\n  extends Pick<TableProps, 'footer'> {\r\n  colCount: number;\r\n  hasHeaderCheckbox: boolean;\r\n  headers: THeader[];\r\n  isLoading: boolean;\r\n  rowCount: number;\r\n  rows: TRow[];\r\n  setHasHeaderCheckbox: (value: boolean) => void;\r\n  selectedRows: TRow[];\r\n  selectRow: (row: TRow | TRow[]) => void;\r\n}\r\n\r\nconst [TableProvider, useTable] = createContext<TableContextValue<any, any>>('Table');\r\n\r\ninterface RootProps<TRow extends BaseRow, THeader extends TableHeader<TRow, THeader>>\r\n  extends Partial<\r\n    Pick<\r\n      TableContextValue<TRow, THeader>,\r\n      'footer' | 'headers' | 'isLoading' | 'rows' | 'selectedRows'\r\n    >\r\n  > {\r\n  children?: React.ReactNode;\r\n  defaultSelectedRows?: TRow[];\r\n  onSelectedRowsChange?: (selectedRows: TRow[]) => void;\r\n}\r\n\r\nconst Root = <TRow extends BaseRow, THeader extends TableHeader<TRow, THeader>>({\r\n  children,\r\n  defaultSelectedRows,\r\n  footer,\r\n  headers = [],\r\n  isLoading = false,\r\n  onSelectedRowsChange,\r\n  rows = [],\r\n  selectedRows: selectedRowsProps,\r\n}: RootProps<TRow, THeader>) => {\r\n  const [selectedRows = [], setSelectedRows] = useControllableState({\r\n    prop: selectedRowsProps,\r\n    defaultProp: defaultSelectedRows,\r\n    onChange: onSelectedRowsChange,\r\n  });\r\n  const [hasHeaderCheckbox, setHasHeaderCheckbox] = React.useState(false);\r\n\r\n  const rowCount = rows.length + 1;\r\n  const colCount = hasHeaderCheckbox ? headers.length + 1 : headers.length;\r\n\r\n  const selectRow: TableContextValue<TRow, THeader>['selectRow'] = (row) => {\r\n    if (Array.isArray(row)) {\r\n      setSelectedRows(row);\r\n    } else {\r\n      setSelectedRows((prev = []) => {\r\n        const currentRowIndex = prev.findIndex((r) => r.id === row.id);\r\n        if (currentRowIndex > -1) {\r\n          return prev.toSpliced(currentRowIndex, 1);\r\n        }\r\n\r\n        return [...prev, row];\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <TableProvider\r\n      colCount={colCount}\r\n      hasHeaderCheckbox={hasHeaderCheckbox}\r\n      setHasHeaderCheckbox={setHasHeaderCheckbox}\r\n      footer={footer}\r\n      headers={headers}\r\n      isLoading={isLoading}\r\n      rowCount={rowCount}\r\n      rows={rows}\r\n      selectedRows={selectedRows}\r\n      selectRow={selectRow}\r\n    >\r\n      {children}\r\n    </TableProvider>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Content\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst Content = ({ children }: Table.ContentProps) => {\r\n  const rowCount = useTable('Content', (state) => state.rowCount);\r\n  const colCount = useTable('Content', (state) => state.colCount);\r\n  const footer = useTable('Content', (state) => state.footer);\r\n\r\n  return (\r\n    <DSTable rowCount={rowCount} colCount={colCount} footer={footer}>\r\n      {children}\r\n    </DSTable>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Head\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst Head = ({ children }: Table.HeadProps) => {\r\n  return (\r\n    <Thead>\r\n      <Tr>{children}</Tr>\r\n    </Thead>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * HeaderCell\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\n/**\r\n * @description A header cell in your table, internally will set the query params for sorting to\r\n * be passed to your data-fetching function.\r\n */\r\nconst HeaderCell = <TData, THead>({ name, label, sortable }: TableHeader<TData, THead>) => {\r\n  const [{ query }, setQuery] = useQueryParams<{ sort?: `${string}:${'ASC' | 'DESC'}` }>();\r\n  const sort = query?.sort ?? '';\r\n  const [sortBy, sortOrder] = sort.split(':');\r\n  const { formatMessage } = useIntl();\r\n  const isSorted = sortBy === name;\r\n\r\n  const sortLabel = formatMessage(\r\n    { id: 'components.TableHeader.sort', defaultMessage: 'Sort on {label}' },\r\n    { label }\r\n  );\r\n\r\n  const handleClickSort = () => {\r\n    if (sortable) {\r\n      setQuery({\r\n        sort: `${name}:${isSorted && sortOrder === 'ASC' ? 'DESC' : 'ASC'}`,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Th\r\n      action={\r\n        isSorted &&\r\n        sortable && (\r\n          <IconButton label={sortLabel} onClick={handleClickSort} variant=\"ghost\">\r\n            <SortIcon $isUp={sortOrder === 'ASC'} />\r\n          </IconButton>\r\n        )\r\n      }\r\n    >\r\n      <Tooltip label={sortable ? sortLabel : label}>\r\n        <Typography\r\n          textColor=\"neutral600\"\r\n          tag={!isSorted && sortable ? 'button' : 'span'}\r\n          onClick={handleClickSort}\r\n          variant=\"sigma\"\r\n        >\r\n          {label}\r\n        </Typography>\r\n      </Tooltip>\r\n    </Th>\r\n  );\r\n};\r\n\r\nconst SortIcon = styled(CaretDown)<{\r\n  $isUp: boolean;\r\n}>`\r\n  transform: ${({ $isUp }) => `rotate(${$isUp ? '180' : '0'}deg)`};\r\n`;\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ActionBar\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst ActionBar = ({ children }: Table.ActionBarProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const selectedRows = useTable('ActionBar', (state) => state.selectedRows);\r\n\r\n  if (selectedRows.length === 0) return null;\r\n\r\n  return (\r\n    <Flex gap={2}>\r\n      <Typography variant=\"omega\" textColor=\"neutral500\">\r\n        {formatMessage(\r\n          {\r\n            id: 'content-manager.components.TableDelete.label',\r\n            defaultMessage: '{number, plural, one {# row} other {# rows}} selected',\r\n          },\r\n          { number: selectedRows.length }\r\n        )}\r\n      </Typography>\r\n      {children}\r\n    </Flex>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * HeaderCheckboxCell\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst HeaderCheckboxCell = () => {\r\n  const rows = useTable('HeaderCheckboxCell', (state) => state.rows);\r\n  const selectedRows = useTable('HeaderCheckboxCell', (state) => state.selectedRows);\r\n  const selectRow = useTable('HeaderCheckboxCell', (state) => state.selectRow);\r\n  const setHasHeaderCheckbox = useTable(\r\n    'HeaderCheckboxCell',\r\n    (state) => state.setHasHeaderCheckbox\r\n  );\r\n\r\n  const { formatMessage } = useIntl();\r\n\r\n  const areAllEntriesSelected = selectedRows.length === rows.length && rows.length > 0;\r\n  const isIndeterminate = !areAllEntriesSelected && selectedRows.length > 0;\r\n\r\n  React.useEffect(() => {\r\n    setHasHeaderCheckbox(true);\r\n\r\n    return () => setHasHeaderCheckbox(false);\r\n  }, [setHasHeaderCheckbox]);\r\n\r\n  const handleSelectAll = () => {\r\n    if (!areAllEntriesSelected) {\r\n      selectRow(rows);\r\n    } else {\r\n      selectRow([]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Th>\r\n      <Checkbox\r\n        aria-label={formatMessage({\r\n          id: 'global.select-all-entries',\r\n          defaultMessage: 'Select all entries',\r\n        })}\r\n        disabled={rows.length === 0}\r\n        checked={isIndeterminate ? 'indeterminate' : areAllEntriesSelected}\r\n        onCheckedChange={handleSelectAll}\r\n      />\r\n    </Th>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Empty\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst Empty = (props: Table.EmptyProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  const rows = useTable('Empty', (state) => state.rows);\r\n  const isLoading = useTable('Empty', (state) => state.isLoading);\r\n  const colCount = useTable('Empty', (state) => state.colCount);\r\n\r\n  /**\r\n   * If we're loading or we have some data, we don't show the empty state.\r\n   */\r\n  if (rows.length > 0 || isLoading) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Tbody>\r\n      <Tr>\r\n        <Td colSpan={colCount}>\r\n          <EmptyStateLayout\r\n            content={formatMessage({\r\n              id: 'app.components.EmptyStateLayout.content-document',\r\n              defaultMessage: 'No content found',\r\n            })}\r\n            hasRadius\r\n            icon={<EmptyDocuments width=\"16rem\" />}\r\n            {...props}\r\n          />\r\n        </Td>\r\n      </Tr>\r\n    </Tbody>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * LoadingBody\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst Loading = ({ children = 'Loading content' }: Table.LoadingProps) => {\r\n  const isLoading = useTable('Loading', (state) => state.isLoading);\r\n  const colCount = useTable('Loading', (state) => state.colCount);\r\n\r\n  if (!isLoading) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Tbody>\r\n      <Tr>\r\n        <Td colSpan={colCount}>\r\n          <Flex justifyContent=\"center\" padding={11} background=\"neutral0\">\r\n            <Loader>{children}</Loader>\r\n          </Flex>\r\n        </Td>\r\n      </Tr>\r\n    </Tbody>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Body\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst Body = ({ children }: Table.BodyProps) => {\r\n  const isLoading = useTable('Body', (state) => state.isLoading);\r\n  const rows = useTable('Body', (state) => state.rows);\r\n\r\n  if (isLoading || rows.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  return <Tbody>{children}</Tbody>;\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Row\r\n * -----------------------------------------------------------------------------------------------*/\r\nconst Row = (props: Table.RowProps) => {\r\n  return <Tr {...props} />;\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Cell\r\n * -----------------------------------------------------------------------------------------------*/\r\nconst Cell = (props: Table.CellProps) => {\r\n  return <Td {...props} />;\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Row\r\n * -----------------------------------------------------------------------------------------------*/\r\nconst CheckboxCell = ({ id, ...props }: Table.CheckboxCellProps) => {\r\n  const rows = useTable('CheckboxCell', (state) => state.rows);\r\n  const selectedRows = useTable('CheckboxCell', (state) => state.selectedRows);\r\n  const selectRow = useTable('CheckboxCell', (state) => state.selectRow);\r\n\r\n  const { formatMessage } = useIntl();\r\n\r\n  const handleSelectRow = () => {\r\n    selectRow(rows.find((row) => row.id === id));\r\n  };\r\n\r\n  const isChecked = selectedRows.findIndex((row) => row.id === id) > -1;\r\n\r\n  return (\r\n    <Cell {...props} onClick={(e) => e.stopPropagation()}>\r\n      <Checkbox\r\n        aria-label={formatMessage(\r\n          {\r\n            id: 'app.component.table.select.one-entry',\r\n            defaultMessage: `Select {target}`,\r\n          },\r\n          { target: id }\r\n        )}\r\n        disabled={rows.length === 0}\r\n        checked={isChecked}\r\n        onCheckedChange={handleSelectRow}\r\n      />\r\n    </Cell>\r\n  );\r\n};\r\n/* -------------------------------------------------------------------------------------------------\r\n * Exports\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\n/**\r\n * @alpha we may move this component to the design-system.\r\n * @public\r\n * @description A generic table component composition. Internally handles the state of the table\r\n * such as selected rows, loading state, and more assuming the correct pieces are put togther.\r\n * @example\r\n * ```tsx\r\n * interace Data {\r\n *  id: string;\r\n *  name: string;\r\n *  email: string;\r\n * }\r\n *\r\n * const ListView = () => {\r\n *  const { data, isLoading } = useGetData<Data>();\r\n *\r\n *  const headers: Table.Header<Data>[] = [\r\n *    {\r\n *      label: 'Name',\r\n *      name: 'name',\r\n *      sortable: true,\r\n *    },\r\n *    {\r\n *      label: 'Email',\r\n *      name: 'email',\r\n *      sortable: true,\r\n *    },\r\n *  ];\r\n *\r\n *  return (\r\n *    <Table.Root rows={data} headers={headers} isLoading={isLoading}>\r\n *      <Table.Content>\r\n *        <Table.Head>\r\n *          {headers.map((head) => (\r\n *            <Table.HeaderCell key={head.name} {...head} />\r\n *          ))}\r\n *        </Table.Head>\r\n *        <Table.Body>\r\n *          <Table.Loading />\r\n *          <Table.Empty />\r\n *          {data.map((row) => (\r\n *            <Table.Row key={row.id}>\r\n *              <Table.Cell>{row.name}</Table.Cell>\r\n *              <Table.Cell>{row.email}</Table.Cell>\r\n *            </Table.Row>\r\n *          ))}\r\n *        </Table.Body>\r\n *      </Table.Content>\r\n *    </Table.Root>\r\n *  );\r\n * };\r\n * ```\r\n */\r\nconst Table = {\r\n  Root,\r\n  Content,\r\n  ActionBar,\r\n  Head,\r\n  HeaderCell,\r\n  HeaderCheckboxCell,\r\n  Body,\r\n  CheckboxCell,\r\n  Cell,\r\n  Row,\r\n  Loading,\r\n  Empty,\r\n};\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nnamespace Table {\r\n  export type Props<\r\n    TData extends BaseRow,\r\n    THeader extends TableHeader<TData, THeader> = TableHeader<TData, TableHeader>,\r\n  > = RootProps<TData, THeader>;\r\n  export interface ActionBarProps {\r\n    children?: React.ReactNode;\r\n  }\r\n\r\n  export interface ContentProps {\r\n    children: React.ReactNode;\r\n  }\r\n\r\n  export type Header<TData, THeader> = TableHeader<TData, THeader>;\r\n\r\n  export interface HeadProps {\r\n    children: React.ReactNode;\r\n  }\r\n\r\n  export interface EmptyProps extends Partial<EmptyStateLayoutProps> {}\r\n\r\n  export interface LoadingProps {\r\n    children?: React.ReactNode;\r\n  }\r\n\r\n  export interface BodyProps {\r\n    children: React.ReactNode;\r\n  }\r\n\r\n  export interface RowProps extends RawTrProps {}\r\n\r\n  export interface CellProps extends RawTdProps {}\r\n\r\n  export interface CheckboxCellProps extends Pick<BaseRow, 'id'>, Omit<RawTdProps, 'id'> {}\r\n}\r\n\r\nexport { Table, useTable };\r\n", "import * as React from 'react';\r\n\r\nimport { useCallbackRef } from '@strapi/design-system';\r\n\r\ntype UseControllableStateParams<T> = {\r\n  prop?: T | undefined;\r\n  defaultProp?: T | undefined;\r\n  onChange?: (state: T) => void;\r\n};\r\n\r\ntype SetStateFn<T> = (prevState?: T) => T;\r\n\r\nfunction useControllableState<T>({\r\n  prop,\r\n  defaultProp,\r\n  onChange = () => {},\r\n}: UseControllableStateParams<T>) {\r\n  const [uncontrolledProp, setUncontrolledProp] = useUncontrolledState({ defaultProp, onChange });\r\n  const isControlled = prop !== undefined;\r\n  const value = isControlled ? prop : uncontrolledProp;\r\n  const handleChange = useCallbackRef(onChange);\r\n\r\n  const setValue: React.Dispatch<React.SetStateAction<T | undefined>> = React.useCallback(\r\n    (nextValue) => {\r\n      if (isControlled) {\r\n        const setter = nextValue as SetStateFn<T>;\r\n        const value = typeof nextValue === 'function' ? setter(prop) : nextValue;\r\n        if (value !== prop) handleChange(value as T);\r\n      } else {\r\n        setUncontrolledProp(nextValue);\r\n      }\r\n    },\r\n    [isControlled, prop, setUncontrolledProp, handleChange]\r\n  );\r\n\r\n  return [value, setValue] as const;\r\n}\r\n\r\nfunction useUncontrolledState<T>({\r\n  defaultProp,\r\n  onChange,\r\n}: Omit<UseControllableStateParams<T>, 'prop'>) {\r\n  const uncontrolledState = React.useState<T | undefined>(defaultProp);\r\n  const [value] = uncontrolledState;\r\n  const prevValueRef = React.useRef(value);\r\n  const handleChange = useCallbackRef(onChange);\r\n\r\n  React.useEffect(() => {\r\n    if (prevValueRef.current !== value) {\r\n      handleChange(value as T);\r\n      prevValueRef.current = value;\r\n    }\r\n  }, [value, prevValueRef, handleChange]);\r\n\r\n  return uncontrolledState;\r\n}\r\n\r\nexport { useControllableState };\r\n"],
  "mappings": "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",
  "names": ["React", "value", "Table"]
}
