{
  "version": 3,
  "sources": ["../../../../../packages/core/content-type-builder/admin/src/pages/ListView/ListView.tsx", "../../../../../packages/core/content-type-builder/admin/src/components/List.tsx", "../../../../../node_modules/@dnd-kit/modifiers/src/createSnapModifier.ts", "../../../../../node_modules/@dnd-kit/modifiers/src/restrictToHorizontalAxis.ts", "../../../../../node_modules/@dnd-kit/modifiers/src/utilities/restrictToBoundingRect.ts", "../../../../../node_modules/@dnd-kit/modifiers/src/restrictToParentElement.ts", "../../../../../node_modules/@dnd-kit/modifiers/src/restrictToFirstScrollableAncestor.ts", "../../../../../node_modules/@dnd-kit/modifiers/src/restrictToVerticalAxis.ts", "../../../../../node_modules/@dnd-kit/modifiers/src/restrictToWindowEdges.ts", "../../../../../node_modules/@dnd-kit/modifiers/src/snapCenterToCursor.ts", "../../../../../packages/core/content-type-builder/admin/src/components/AttributeRow.tsx", "../../../../../packages/core/content-type-builder/admin/src/icons/Curve.tsx", "../../../../../packages/core/content-type-builder/admin/src/utils/getAttributeDisplayedType.ts", "../../../../../packages/core/content-type-builder/admin/src/components/ComponentList.tsx", "../../../../../packages/core/content-type-builder/admin/src/components/ComponentRow.tsx", "../../../../../packages/core/content-type-builder/admin/src/components/DisplayedType.tsx", "../../../../../packages/core/content-type-builder/admin/src/components/DynamicZoneList.tsx", "../../../../../packages/core/content-type-builder/admin/src/components/ComponentCard/ComponentCard.tsx", "../../../../../packages/core/content-type-builder/admin/src/components/ComponentCard/ComponentIcon/ComponentIcon.tsx", "../../../../../packages/core/content-type-builder/admin/src/components/Footers.tsx", "../../../../../packages/core/content-type-builder/admin/src/pages/ListView/LinkToCMSettingsView.tsx"],
  "sourcesContent": ["/* eslint-disable import/no-default-export */\r\nimport { useTracking, Layouts } from '@strapi/admin/strapi-admin';\r\nimport { Box, Button, Flex, Typography } from '@strapi/design-system';\r\nimport { Information, Pencil, Plus } from '@strapi/icons';\r\nimport upperFirst from 'lodash/upperFirst';\r\nimport { useIntl } from 'react-intl';\r\nimport { Navigate, useParams } from 'react-router-dom';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { useDataManager } from '../../components/DataManager/useDataManager';\r\nimport { useFormModalNavigation } from '../../components/FormModalNavigation/useFormModalNavigation';\r\nimport { List } from '../../components/List';\r\nimport { getTrad } from '../../utils/getTrad';\r\n\r\nimport { LinkToCMSettingsView } from './LinkToCMSettingsView';\r\n\r\nimport type { Internal } from '@strapi/types';\r\n\r\nconst LayoutsHeaderCustom = styled(Layouts.Header)`\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  white-space: nowrap;\r\n`;\r\n\r\nconst ListView = () => {\r\n  const { isInDevelopmentMode, contentTypes, components, isLoading } = useDataManager();\r\n  const { formatMessage } = useIntl();\r\n  const { trackUsage } = useTracking();\r\n\r\n  const { contentTypeUid, componentUid } = useParams<{\r\n    contentTypeUid: Internal.UID.ContentType;\r\n    componentUid: Internal.UID.Component;\r\n  }>();\r\n\r\n  const { onOpenModalAddComponentsToDZ, onOpenModalAddField, onOpenModalEditSchema } =\r\n    useFormModalNavigation();\r\n\r\n  const type = contentTypeUid\r\n    ? contentTypes[contentTypeUid]\r\n    : componentUid\r\n      ? components[componentUid]\r\n      : null;\r\n\r\n  if (isLoading) {\r\n    return null;\r\n  }\r\n\r\n  if (!type) {\r\n    const allowedEndpoints = Object.values(contentTypes)\r\n      .filter((ct) => ct.visible === true && !ct.plugin)\r\n      .map((ct) => ct.uid)\r\n      .sort();\r\n\r\n    if (allowedEndpoints.length > 0) {\r\n      return <Navigate to={`/plugins/content-type-builder/content-types/${allowedEndpoints[0]}`} />;\r\n    }\r\n\r\n    return <Navigate to=\"/plugins/content-type-builder/content-types/create-content-type\" />;\r\n  }\r\n\r\n  const isFromPlugin = 'plugin' in type && type?.plugin !== undefined;\r\n\r\n  const forTarget = contentTypeUid ? 'contentType' : 'component';\r\n\r\n  const label = type?.info?.displayName ?? '';\r\n\r\n  const canEdit = isInDevelopmentMode && !isFromPlugin;\r\n\r\n  const handleClickAddComponentToDZ = (dynamicZoneTarget?: string) => {\r\n    onOpenModalAddComponentsToDZ({ dynamicZoneTarget, targetUid: type.uid });\r\n  };\r\n\r\n  const onEdit = () => {\r\n    if ('kind' in type) {\r\n      if (type?.kind === 'collectionType') {\r\n        trackUsage('willEditNameOfContentType');\r\n      }\r\n\r\n      if (type?.kind === 'singleType') {\r\n        trackUsage('willEditNameOfSingleType');\r\n      }\r\n\r\n      onOpenModalEditSchema({\r\n        modalType: forTarget,\r\n        forTarget: forTarget,\r\n        targetUid: type.uid,\r\n        kind: type?.kind,\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    onOpenModalEditSchema({\r\n      modalType: forTarget,\r\n      forTarget: forTarget,\r\n      targetUid: type.uid,\r\n    });\r\n  };\r\n\r\n  const addNewFieldLabel = formatMessage({\r\n    id: getTrad('table.button.no-fields'),\r\n    defaultMessage: 'Add new field',\r\n  });\r\n\r\n  const addAnotherFieldLabel = formatMessage({\r\n    id: getTrad('button.attributes.add.another'),\r\n    defaultMessage: 'Add another field',\r\n  });\r\n\r\n  const isDeleted = type.status === 'REMOVED';\r\n\r\n  const primaryAction = isInDevelopmentMode && (\r\n    <Flex gap={2}>\r\n      <LinkToCMSettingsView\r\n        key=\"link-to-cm-settings-view\"\r\n        type={type}\r\n        disabled={type.status === 'NEW' || isDeleted}\r\n      />\r\n      <Button\r\n        startIcon={<Pencil />}\r\n        variant=\"tertiary\"\r\n        onClick={onEdit}\r\n        disabled={!canEdit || isDeleted}\r\n      >\r\n        {formatMessage({\r\n          id: 'app.utils.edit',\r\n          defaultMessage: 'Edit',\r\n        })}\r\n      </Button>\r\n      <Button\r\n        startIcon={<Plus />}\r\n        variant=\"secondary\"\r\n        minWidth=\"max-content\"\r\n        onClick={() => {\r\n          onOpenModalAddField({ forTarget, targetUid: type.uid });\r\n        }}\r\n        disabled={isDeleted}\r\n      >\r\n        {type.attributes.length === 0 ? addNewFieldLabel : addAnotherFieldLabel}\r\n      </Button>\r\n    </Flex>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {isDeleted && (\r\n        <Flex background=\"danger100\" justifyContent={'center'} padding={4}>\r\n          <Flex gap={2}>\r\n            <Information fill=\"danger600\" height=\"2rem\" width=\"2rem\" />\r\n            <Typography>\r\n              {formatMessage(\r\n                {\r\n                  id: getTrad('table.warning.deleted'),\r\n                  defaultMessage: `This {kind} has been deleted`,\r\n                },\r\n                {\r\n                  kind: type.modelType === 'contentType' ? 'Content Type' : 'Component',\r\n                }\r\n              )}\r\n            </Typography>\r\n          </Flex>\r\n        </Flex>\r\n      )}\r\n      <LayoutsHeaderCustom id=\"title\" primaryAction={primaryAction} title={upperFirst(label)} />\r\n      <Layouts.Content>\r\n        <Box\r\n          background=\"neutral0\"\r\n          shadow=\"filterShadow\"\r\n          hasRadius\r\n          overflow=\"auto\"\r\n          borderColor=\"neutral150\"\r\n        >\r\n          <List type={type} addComponentToDZ={handleClickAddComponentToDZ} isMain />\r\n        </Box>\r\n      </Layouts.Content>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ListView;\r\n", "import { useState } from 'react';\r\n\r\nimport {\r\n  DndContext,\r\n  closestCenter,\r\n  PointerSensor,\r\n  useSensor,\r\n  useSensors,\r\n  DragEndEvent,\r\n  DragStartEvent,\r\n  DragOverlay,\r\n  UniqueIdentifier,\r\n} from '@dnd-kit/core';\r\nimport { restrictToVerticalAxis } from '@dnd-kit/modifiers';\r\nimport { SortableContext, verticalListSortingStrategy, useSortable } from '@dnd-kit/sortable';\r\nimport { CSS } from '@dnd-kit/utilities';\r\nimport { useTracking } from '@strapi/admin/strapi-admin';\r\nimport { Box, Button, EmptyStateLayout } from '@strapi/design-system';\r\nimport { Plus } from '@strapi/icons';\r\nimport { EmptyDocuments } from '@strapi/icons/symbols';\r\nimport { createPortal } from 'react-dom';\r\nimport { useIntl } from 'react-intl';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { getTrad } from '../utils/getTrad';\r\n\r\nimport { AttributeRow, type AttributeRowProps } from './AttributeRow';\r\nimport { useDataManager } from './DataManager/useDataManager';\r\nimport { NestedTFooter, TFooter } from './Footers';\r\nimport { useFormModalNavigation } from './FormModalNavigation/useFormModalNavigation';\r\n\r\nimport type { Component, ContentType } from '../types';\r\nimport type { UID } from '@strapi/types';\r\n\r\nexport const ListGrid = styled(Box)`\r\n  white-space: nowrap;\r\n  list-style: none;\r\n  list-style-type: none;\r\n`;\r\n\r\ntype ListProps = {\r\n  addComponentToDZ?: () => void;\r\n  firstLoopComponentUid?: UID.Component | null;\r\n  isFromDynamicZone?: boolean;\r\n  isMain?: boolean;\r\n  secondLoopComponentUid?: UID.Component | null;\r\n  isSub?: boolean;\r\n  type: ContentType | Component;\r\n};\r\n\r\nconst SortableRow = (props: AttributeRowProps) => {\r\n  const { isInDevelopmentMode } = useDataManager();\r\n\r\n  const {\r\n    isDragging,\r\n    attributes,\r\n    listeners,\r\n    setNodeRef,\r\n    transform,\r\n    transition,\r\n    setActivatorNodeRef,\r\n  } = useSortable({\r\n    disabled:\r\n      !isInDevelopmentMode || props.item.status === 'REMOVED' || props.type.status === 'REMOVED',\r\n    id: props.item.id,\r\n    data: { index: props.item.index },\r\n  });\r\n\r\n  const style = {\r\n    transform: CSS.Transform.toString({\r\n      x: transform?.x ?? 0,\r\n      y: transform?.y ?? 0,\r\n      scaleX: 1,\r\n      scaleY: 1,\r\n    }),\r\n    transition,\r\n  };\r\n\r\n  return (\r\n    <AttributeRow\r\n      ref={setNodeRef}\r\n      handleRef={setActivatorNodeRef}\r\n      isDragging={isDragging}\r\n      attributes={attributes}\r\n      listeners={listeners}\r\n      style={style}\r\n      {...props}\r\n    />\r\n  );\r\n};\r\n\r\nexport const List = ({\r\n  addComponentToDZ,\r\n  firstLoopComponentUid,\r\n  isFromDynamicZone = false,\r\n  isMain = false,\r\n  isSub = false,\r\n  secondLoopComponentUid,\r\n  type,\r\n}: ListProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const { trackUsage } = useTracking();\r\n  const { isInDevelopmentMode, moveAttribute } = useDataManager();\r\n  const { onOpenModalAddField } = useFormModalNavigation();\r\n\r\n  const items = type?.attributes.map((item, index) => {\r\n    return {\r\n      id: `${type.uid}_${item.name}`,\r\n      index,\r\n      ...item,\r\n    };\r\n  });\r\n\r\n  const [activeId, setActiveId] = useState<UniqueIdentifier | null>(null);\r\n\r\n  const isDeleted = type?.status === 'REMOVED';\r\n\r\n  const sensors = useSensors(useSensor(PointerSensor));\r\n\r\n  function handlerDragStart({ active }: DragStartEvent) {\r\n    if (!active) {\r\n      return;\r\n    }\r\n\r\n    setActiveId(active.id);\r\n  }\r\n\r\n  function handleDragEnd(event: DragEndEvent) {\r\n    const { active, over } = event;\r\n\r\n    setActiveId(null);\r\n\r\n    if (over) {\r\n      if (active.id !== over.id) {\r\n        moveAttribute({\r\n          forTarget: type.modelType,\r\n          targetUid: type.uid,\r\n          from: active.data.current!.index,\r\n          to: over.data.current!.index,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  const activeItem = items.find((item) => item.id === activeId);\r\n\r\n  const onClickAddField = () => {\r\n    if (isDeleted) {\r\n      return;\r\n    }\r\n\r\n    trackUsage('hasClickedCTBAddFieldBanner');\r\n\r\n    onOpenModalAddField({ forTarget: type?.modelType, targetUid: type.uid });\r\n  };\r\n\r\n  if (type?.attributes.length === 0 && isMain) {\r\n    return (\r\n      <EmptyStateLayout\r\n        action={\r\n          <Button onClick={onClickAddField} size=\"L\" startIcon={<Plus />} variant=\"secondary\">\r\n            {formatMessage({\r\n              id: getTrad('table.button.no-fields'),\r\n              defaultMessage: 'Add new field',\r\n            })}\r\n          </Button>\r\n        }\r\n        content={formatMessage(\r\n          type.modelType === 'contentType'\r\n            ? {\r\n                id: getTrad('table.content.no-fields.collection-type'),\r\n                defaultMessage: 'Add your first field to this Collection-Type',\r\n              }\r\n            : {\r\n                id: getTrad('table.content.no-fields.component'),\r\n                defaultMessage: 'Add your first field to this component',\r\n              }\r\n        )}\r\n        hasRadius\r\n        icon={<EmptyDocuments width=\"16rem\" />}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <DndContext\r\n      sensors={sensors}\r\n      collisionDetection={closestCenter}\r\n      onDragEnd={handleDragEnd}\r\n      onDragStart={handlerDragStart}\r\n      onDragCancel={() => setActiveId(null)}\r\n      modifiers={[restrictToVerticalAxis]}\r\n    >\r\n      <ListGrid tag=\"ul\">\r\n        {createPortal(\r\n          <DragOverlay zIndex={10}>\r\n            {activeItem && (\r\n              <AttributeRow\r\n                isOverlay\r\n                item={activeItem}\r\n                firstLoopComponentUid={firstLoopComponentUid}\r\n                isFromDynamicZone={isFromDynamicZone}\r\n                secondLoopComponentUid={secondLoopComponentUid}\r\n                type={type}\r\n                addComponentToDZ={addComponentToDZ}\r\n              />\r\n            )}\r\n          </DragOverlay>,\r\n          document.body\r\n        )}\r\n        <SortableContext items={items} strategy={verticalListSortingStrategy}>\r\n          {items.map((item) => {\r\n            return (\r\n              <SortableRow\r\n                key={item.id}\r\n                item={item}\r\n                firstLoopComponentUid={firstLoopComponentUid}\r\n                isFromDynamicZone={isFromDynamicZone}\r\n                secondLoopComponentUid={secondLoopComponentUid}\r\n                type={type}\r\n                addComponentToDZ={addComponentToDZ}\r\n              />\r\n            );\r\n          })}\r\n        </SortableContext>\r\n      </ListGrid>\r\n\r\n      {isMain && isInDevelopmentMode && (\r\n        <TFooter\r\n          cursor={isDeleted ? 'normal' : 'pointer'}\r\n          icon={<Plus />}\r\n          onClick={onClickAddField}\r\n          color={isDeleted ? 'neutral' : 'primary'}\r\n        >\r\n          {formatMessage({\r\n            id: getTrad(\r\n              `form.button.add.field.to.${type.modelType === 'component' ? 'component' : type.kind}`\r\n            ),\r\n            defaultMessage: 'Add another field',\r\n          })}\r\n        </TFooter>\r\n      )}\r\n      {isSub && isInDevelopmentMode && (\r\n        <NestedTFooter\r\n          cursor={isDeleted ? 'normal' : 'pointer'}\r\n          icon={<Plus />}\r\n          onClick={onClickAddField}\r\n          color={isFromDynamicZone && !isDeleted ? 'primary' : 'neutral'}\r\n        >\r\n          {formatMessage({\r\n            id: getTrad(`form.button.add.field.to.component`),\r\n            defaultMessage: 'Add another field',\r\n          })}\r\n        </NestedTFooter>\r\n      )}\r\n    </DndContext>\r\n  );\r\n};\r\n", "import type {Modifier} from '@dnd-kit/core';\n\nexport function createSnapModifier(gridSize: number): Modifier {\n  return ({transform}) => ({\n    ...transform,\n    x: Math.ceil(transform.x / gridSize) * gridSize,\n    y: Math.ceil(transform.y / gridSize) * gridSize,\n  });\n}\n", "import type {Modifier} from '@dnd-kit/core';\n\nexport const restrictToHorizontalAxis: Modifier = ({transform}) => {\n  return {\n    ...transform,\n    y: 0,\n  };\n};\n", "import type {ClientRect} from '@dnd-kit/core';\nimport type {Transform} from '@dnd-kit/utilities';\n\nexport function restrictToBoundingRect(\n  transform: Transform,\n  rect: ClientRect,\n  boundingRect: ClientRect\n): Transform {\n  const value = {\n    ...transform,\n  };\n\n  if (rect.top + transform.y <= boundingRect.top) {\n    value.y = boundingRect.top - rect.top;\n  } else if (\n    rect.bottom + transform.y >=\n    boundingRect.top + boundingRect.height\n  ) {\n    value.y = boundingRect.top + boundingRect.height - rect.bottom;\n  }\n\n  if (rect.left + transform.x <= boundingRect.left) {\n    value.x = boundingRect.left - rect.left;\n  } else if (\n    rect.right + transform.x >=\n    boundingRect.left + boundingRect.width\n  ) {\n    value.x = boundingRect.left + boundingRect.width - rect.right;\n  }\n\n  return value;\n}\n", "import type {Modifier} from '@dnd-kit/core';\nimport {restrictToBoundingRect} from './utilities';\n\nexport const restrictToParentElement: Modifier = ({\n  containerNodeRect,\n  draggingNodeRect,\n  transform,\n}) => {\n  if (!draggingNodeRect || !containerNodeRect) {\n    return transform;\n  }\n\n  return restrictToBoundingRect(transform, draggingNodeRect, containerNodeRect);\n};\n", "import type {Modifier} from '@dnd-kit/core';\nimport {restrictToBoundingRect} from './utilities';\n\nexport const restrictToFirstScrollableAncestor: Modifier = ({\n  draggingNodeRect,\n  transform,\n  scrollableAncestorRects,\n}) => {\n  const firstScrollableAncestorRect = scrollableAncestorRects[0];\n\n  if (!draggingNodeRect || !firstScrollableAncestorRect) {\n    return transform;\n  }\n\n  return restrictToBoundingRect(\n    transform,\n    draggingNodeRect,\n    firstScrollableAncestorRect\n  );\n};\n", "import type {Modifier} from '@dnd-kit/core';\n\nexport const restrictToVerticalAxis: Modifier = ({transform}) => {\n  return {\n    ...transform,\n    x: 0,\n  };\n};\n", "import type {Modifier} from '@dnd-kit/core';\n\nimport {restrictToBoundingRect} from './utilities';\n\nexport const restrictToWindowEdges: Modifier = ({\n  transform,\n  draggingNodeRect,\n  windowRect,\n}) => {\n  if (!draggingNodeRect || !windowRect) {\n    return transform;\n  }\n\n  return restrictToBoundingRect(transform, draggingNodeRect, windowRect);\n};\n", "import type {Modifier} from '@dnd-kit/core';\nimport {getEventCoordinates} from '@dnd-kit/utilities';\n\nexport const snapCenterToCursor: Modifier = ({\n  activatorEvent,\n  draggingNodeRect,\n  transform,\n}) => {\n  if (draggingNodeRect && activatorEvent) {\n    const activatorCoordinates = getEventCoordinates(activatorEvent);\n\n    if (!activatorCoordinates) {\n      return transform;\n    }\n\n    const offsetX = activatorCoordinates.x - draggingNodeRect.left;\n    const offsetY = activatorCoordinates.y - draggingNodeRect.top;\n\n    return {\n      ...transform,\n      x: transform.x + offsetX - draggingNodeRect.width / 2,\n      y: transform.y + offsetY - draggingNodeRect.height / 2,\n    };\n  }\n\n  return transform;\n};\n", "import { forwardRef, memo, useState } from 'react';\r\n\r\nimport { ConfirmDialog } from '@strapi/admin/strapi-admin';\r\nimport { Box, Flex, IconButton, Typography, Link, Badge, Dialog } from '@strapi/design-system';\r\nimport { ChevronDown, Drag, Lock, Pencil, Trash } from '@strapi/icons';\r\nimport get from 'lodash/get';\r\nimport upperFirst from 'lodash/upperFirst';\r\nimport { useIntl } from 'react-intl';\r\nimport { Link as NavLink } from 'react-router-dom';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { Curve } from '../icons/Curve';\r\nimport { checkDependentRows } from '../utils/conditions';\r\nimport { getAttributeDisplayedType } from '../utils/getAttributeDisplayedType';\r\nimport { getRelationType } from '../utils/getRelationType';\r\nimport { getTrad } from '../utils/getTrad';\r\n\r\nimport { AttributeIcon } from './AttributeIcon';\r\nimport { ComponentList } from './ComponentList';\r\nimport { useDataManager } from './DataManager/useDataManager';\r\nimport { DisplayedType } from './DisplayedType';\r\nimport { DynamicZoneList } from './DynamicZoneList';\r\nimport { useFormModalNavigation } from './FormModalNavigation/useFormModalNavigation';\r\nimport { StatusBadge } from './Status';\r\n\r\nimport type { AnyAttribute, Component, ContentType } from '../types';\r\nimport type { DraggableAttributes, DraggableSyntheticListeners } from '@dnd-kit/core';\r\nimport type { UID } from '@strapi/types';\r\n\r\nexport const GridWrapper = styled(Flex)<{ $isOverlay?: boolean; $isDragging?: boolean }>`\r\n  justify-content: space-between;\r\n\r\n  border-top: ${({ theme, $isOverlay }) =>\r\n    $isOverlay ? 'none' : `1px solid ${theme.colors.neutral150}`};\r\n\r\n  padding-top: ${({ theme }) => theme.spaces[4]};\r\n  padding-bottom: ${({ theme }) => theme.spaces[4]};\r\n\r\n  opacity: ${({ $isDragging }) => ($isDragging ? 0 : 1)};\r\n  align-items: center;\r\n`;\r\n\r\nexport type AttributeRowProps = {\r\n  item: {\r\n    id: string;\r\n    index: number;\r\n  } & AnyAttribute;\r\n  firstLoopComponentUid?: UID.Component | null;\r\n  isFromDynamicZone?: boolean;\r\n  addComponentToDZ?: () => void;\r\n  secondLoopComponentUid?: UID.Component | null;\r\n  type: ContentType | Component;\r\n  isDragging?: boolean;\r\n  style?: Record<string, unknown>;\r\n  listeners?: DraggableSyntheticListeners;\r\n  attributes?: DraggableAttributes;\r\n  isOverlay?: boolean;\r\n  handleRef?: (element: HTMLElement | null) => void;\r\n};\r\n\r\nconst StyledAttributeRow = styled(Box)`\r\n  list-style: none;\r\n  list-style-type: none;\r\n`;\r\n\r\nexport const AttributeRow = forwardRef<HTMLLIElement, AttributeRowProps>((props, ref) => {\r\n  const { style, ...rest } = props;\r\n\r\n  return (\r\n    <StyledAttributeRow\r\n      tag=\"li\"\r\n      ref={ref}\r\n      {...props.attributes}\r\n      style={style}\r\n      background=\"neutral0\"\r\n      shadow={props.isOverlay ? 'filterShadow' : 'none'}\r\n      aria-label={props.item.name}\r\n    >\r\n      <MemoizedRow {...rest} />\r\n    </StyledAttributeRow>\r\n  );\r\n});\r\n\r\nconst MemoizedRow = memo((props: Omit<AttributeRowProps, 'style'>) => {\r\n  const {\r\n    item,\r\n    firstLoopComponentUid,\r\n    isFromDynamicZone,\r\n    addComponentToDZ,\r\n    secondLoopComponentUid,\r\n    type,\r\n    isDragging,\r\n    isOverlay,\r\n    handleRef,\r\n    listeners,\r\n  } = props;\r\n  const shouldHideNestedInfos = isOverlay || isDragging;\r\n\r\n  const [isOpen, setIsOpen] = useState<boolean>(true);\r\n\r\n  const isTypeDeleted = type.status === 'REMOVED';\r\n\r\n  const { contentTypes, removeAttribute, isInDevelopmentMode } = useDataManager();\r\n  const { onOpenModalEditField, onOpenModalEditCustomField } = useFormModalNavigation();\r\n\r\n  const { formatMessage } = useIntl();\r\n  const [showConfirmDialog, setShowConfirmDialog] = useState(false);\r\n\r\n  const isDeleted = item.status === 'REMOVED';\r\n\r\n  const isMorph = item.type === 'relation' && item.relation.includes('morph');\r\n  const ico = ['integer', 'biginteger', 'float', 'decimal'].includes(item.type)\r\n    ? 'number'\r\n    : item.type;\r\n\r\n  const targetContentType = item.type === 'relation' ? get(contentTypes, item.target) : null;\r\n  const isPluginContentType = get(targetContentType, 'plugin');\r\n\r\n  const src = 'target' in item && item.target ? 'relation' : ico;\r\n\r\n  const handleDelete = (e: React.MouseEvent) => {\r\n    e.stopPropagation();\r\n    const dependentRows = checkDependentRows(contentTypes, item.name);\r\n    if (dependentRows.length > 0) {\r\n      setShowConfirmDialog(true);\r\n    } else {\r\n      removeAttribute({\r\n        forTarget: type.modelType,\r\n        targetUid: type.uid,\r\n        attributeToRemoveName: item.name,\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleConfirmDelete = () => {\r\n    removeAttribute({\r\n      forTarget: type.modelType,\r\n      targetUid: type.uid,\r\n      attributeToRemoveName: item.name,\r\n    });\r\n    setShowConfirmDialog(false);\r\n  };\r\n\r\n  const handleCancelDelete = () => {\r\n    setShowConfirmDialog(false);\r\n  };\r\n\r\n  const handleClick = () => {\r\n    if (isMorph) {\r\n      return;\r\n    }\r\n\r\n    if (item.configurable !== false) {\r\n      const editTargetUid = (secondLoopComponentUid || firstLoopComponentUid || type.uid)!;\r\n\r\n      const attributeType = getAttributeDisplayedType(item.type);\r\n      const step = item.type === 'component' ? '2' : null;\r\n\r\n      if (item.customField) {\r\n        onOpenModalEditCustomField({\r\n          forTarget: type.modelType,\r\n          targetUid: editTargetUid,\r\n          attributeName: item.name,\r\n          attributeType,\r\n          customFieldUid: item.customField,\r\n        });\r\n      } else {\r\n        onOpenModalEditField({\r\n          forTarget: type.modelType,\r\n          targetUid: editTargetUid,\r\n          attributeName: item.name,\r\n          attributeType,\r\n          step,\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  let loopNumber;\r\n\r\n  if (secondLoopComponentUid && firstLoopComponentUid) {\r\n    loopNumber = 2;\r\n  } else if (firstLoopComponentUid) {\r\n    loopNumber = 1;\r\n  } else {\r\n    loopNumber = 0;\r\n  }\r\n\r\n  const canEdit = !isTypeDeleted && !isDeleted;\r\n  const canDelete = !isTypeDeleted && !isDeleted;\r\n\r\n  const cursor = isTypeDeleted || isDeleted ? 'not-allowed' : 'move';\r\n\r\n  const canClick = isInDevelopmentMode && item.configurable !== false && !isMorph && canEdit;\r\n\r\n  return (\r\n    <>\r\n      <GridWrapper\r\n        $isOverlay={isOverlay}\r\n        $isDragging={isDragging}\r\n        onClick={canClick ? handleClick : undefined}\r\n        paddingLeft={4}\r\n        paddingRight={4}\r\n      >\r\n        <Flex alignItems=\"center\" overflow=\"hidden\" gap={2}>\r\n          {loopNumber !== 0 && !isOverlay && (\r\n            <Curve color={isFromDynamicZone ? 'primary200' : 'neutral150'} />\r\n          )}\r\n          {isInDevelopmentMode && (\r\n            <IconButton\r\n              cursor={cursor}\r\n              role=\"Handle\"\r\n              ref={handleRef}\r\n              {...listeners}\r\n              variant=\"ghost\"\r\n              withTooltip={false}\r\n              label={`${formatMessage({\r\n                id: 'app.utils.drag',\r\n                defaultMessage: 'Drag',\r\n              })} ${item.name}`}\r\n              disabled={isTypeDeleted || isDeleted}\r\n            >\r\n              <Drag />\r\n            </IconButton>\r\n          )}\r\n          <Flex gap={4}>\r\n            <Flex gap={4} alignItems=\"center\">\r\n              <AttributeIcon type={src} customField={item.customField} />\r\n              <Typography\r\n                textColor=\"neutral800\"\r\n                fontWeight=\"bold\"\r\n                textDecoration={isDeleted ? 'line-through' : 'none'}\r\n                ellipsis\r\n                overflow=\"hidden\"\r\n              >\r\n                {item.name}\r\n                {'required' in item && item.required && (\r\n                  <Typography textColor=\"danger600\">*&nbsp;</Typography>\r\n                )}\r\n              </Typography>\r\n            </Flex>\r\n            <Flex>\r\n              <Typography textColor=\"neutral600\">\r\n                <DisplayedType\r\n                  type={item.type}\r\n                  customField={item.customField}\r\n                  repeatable={'repeatable' in item && item.repeatable}\r\n                  multiple={'multiple' in item && item.multiple}\r\n                />\r\n                {'conditions' in item &&\r\n                  item.conditions &&\r\n                  Object.keys(item.conditions).length > 0 && <Badge margin={4}>conditional</Badge>}\r\n                {item.type === 'relation' && (\r\n                  <>\r\n                    &nbsp;({getRelationType(item.relation, item.targetAttribute)})&nbsp;\r\n                    {targetContentType &&\r\n                      formatMessage({\r\n                        id: getTrad('modelPage.attribute.with'),\r\n                        defaultMessage: 'with',\r\n                      })}\r\n                    &nbsp;\r\n                    {targetContentType && (\r\n                      <Link\r\n                        onClick={(e) => e.stopPropagation()}\r\n                        tag={NavLink}\r\n                        to={`/plugins/content-type-builder/content-types/${targetContentType.uid}`}\r\n                      >\r\n                        {upperFirst(targetContentType.info.displayName)}\r\n                      </Link>\r\n                    )}\r\n                    {isPluginContentType &&\r\n                      `(${formatMessage({\r\n                        id: getTrad(`from`),\r\n                        defaultMessage: 'from',\r\n                      })}: ${isPluginContentType})`}\r\n                  </>\r\n                )}\r\n                {item.type === 'component' && <ComponentLink uid={item.component} />}\r\n              </Typography>\r\n            </Flex>\r\n          </Flex>\r\n        </Flex>\r\n\r\n        <Box>\r\n          <Flex justifyContent=\"flex-end\" gap={1} onClick={(e) => e.stopPropagation()}>\r\n            <>\r\n              <Box>{item.status && <StatusBadge status={item.status} />}</Box>\r\n              {['component', 'dynamiczone'].includes(item.type) && (\r\n                <IconButton\r\n                  onClick={(e) => {\r\n                    e.preventDefault();\r\n                    e.stopPropagation();\r\n\r\n                    if (isOpen) {\r\n                      setIsOpen(false);\r\n                    } else {\r\n                      setIsOpen(true);\r\n                    }\r\n                  }}\r\n                  aria-expanded={isOpen}\r\n                  label={formatMessage({\r\n                    id: 'app.utils.toggle',\r\n                    defaultMessage: 'Toggle',\r\n                  })}\r\n                  variant=\"ghost\"\r\n                  withTooltip={false}\r\n                >\r\n                  <ChevronDown\r\n                    aria-hidden\r\n                    fill=\"neutral500\"\r\n                    style={{\r\n                      transform: `rotate(${isOpen ? '0deg' : '-90deg'})`,\r\n                      transition: 'transform 0.5s',\r\n                    }}\r\n                  />\r\n                </IconButton>\r\n              )}\r\n              {isInDevelopmentMode && item.configurable !== false ? (\r\n                <>\r\n                  {!isMorph && (\r\n                    <IconButton\r\n                      onClick={handleClick}\r\n                      label={`${formatMessage({\r\n                        id: 'app.utils.edit',\r\n                        defaultMessage: 'Edit',\r\n                      })} ${item.name}`}\r\n                      variant=\"ghost\"\r\n                      disabled={!canEdit}\r\n                    >\r\n                      <Pencil />\r\n                    </IconButton>\r\n                  )}\r\n                  <IconButton\r\n                    onClick={handleDelete}\r\n                    label={`${formatMessage({\r\n                      id: 'global.delete',\r\n                      defaultMessage: 'Delete',\r\n                    })} ${item.name}`}\r\n                    variant=\"ghost\"\r\n                    disabled={!canDelete}\r\n                  >\r\n                    <Trash />\r\n                  </IconButton>\r\n                  <Dialog.Root open={showConfirmDialog} onOpenChange={setShowConfirmDialog}>\r\n                    <ConfirmDialog onConfirm={handleConfirmDelete} onCancel={handleCancelDelete}>\r\n                      <Box>\r\n                        <Typography>\r\n                          {formatMessage({\r\n                            id: getTrad(\r\n                              'popUpWarning.bodyMessage.delete-attribute-with-conditions'\r\n                            ),\r\n                            defaultMessage:\r\n                              'The following fields have conditions that depend on this field: ',\r\n                          })}\r\n                          <Typography fontWeight=\"bold\">\r\n                            {checkDependentRows(contentTypes, item.name)\r\n                              .map(({ attribute }) => attribute)\r\n                              .join(', ')}\r\n                          </Typography>\r\n                          {formatMessage({\r\n                            id: getTrad(\r\n                              'popUpWarning.bodyMessage.delete-attribute-with-conditions-end'\r\n                            ),\r\n                            defaultMessage: '. Are you sure you want to delete it?',\r\n                          })}\r\n                        </Typography>\r\n                      </Box>\r\n                    </ConfirmDialog>\r\n                  </Dialog.Root>\r\n                </>\r\n              ) : (\r\n                <Flex padding={2}>\r\n                  <Lock fill=\"neutral500\" />\r\n                </Flex>\r\n              )}\r\n            </>\r\n          </Flex>\r\n        </Box>\r\n      </GridWrapper>\r\n\r\n      <SubRow $shouldHideNestedInfos={shouldHideNestedInfos} $isOpen={isOpen}>\r\n        {item.type === 'component' && (\r\n          <ComponentList\r\n            {...item}\r\n            isFromDynamicZone={isFromDynamicZone}\r\n            firstLoopComponentUid={firstLoopComponentUid}\r\n          />\r\n        )}\r\n\r\n        {item.type === 'dynamiczone' && (\r\n          <DynamicZoneList\r\n            {...item}\r\n            disabled={isTypeDeleted || item.status === 'REMOVED'}\r\n            addComponent={addComponentToDZ!}\r\n            forTarget={type.modelType}\r\n            targetUid={type.uid}\r\n          />\r\n        )}\r\n      </SubRow>\r\n    </>\r\n  );\r\n});\r\n\r\nconst SubRow = styled(Box)<{ $isOpen: boolean; $shouldHideNestedInfos?: boolean }>`\r\n  display: ${({ $shouldHideNestedInfos }) => ($shouldHideNestedInfos ? 'none' : 'block')};\r\n  max-height: ${({ $isOpen }) => ($isOpen ? '9999px' : '0px')};\r\n  overflow: hidden;\r\n\r\n  transition: ${({ $isOpen }) =>\r\n    $isOpen ? 'max-height 1s ease-in-out' : 'max-height 0.5s cubic-bezier(0, 1, 0, 1)'};\r\n`;\r\n\r\nconst ComponentLink = ({ uid }: { uid: UID.Component }) => {\r\n  const { components } = useDataManager();\r\n  const type = get(components, uid);\r\n\r\n  return (\r\n    <>\r\n      &nbsp;(\r\n      <Link\r\n        onClick={(e) => e.stopPropagation()}\r\n        tag={NavLink}\r\n        to={`/plugins/content-type-builder/component-categories/${type.category}/${type.uid}`}\r\n      >\r\n        {upperFirst(type.info.displayName)}\r\n      </Link>\r\n      )\r\n    </>\r\n  );\r\n};\r\n", "import { Box } from '@strapi/design-system';\r\nimport { styled } from 'styled-components';\r\n\r\nconst StyledBox = styled(Box)`\r\n  position: absolute;\r\n  left: -3.4rem;\r\n  top: 0px;\r\n\r\n  &:before {\r\n    content: '';\r\n    width: 0.4rem;\r\n    height: 1.2rem;\r\n    background: ${({ theme, color }) => theme.colors[color!]};\r\n    display: block;\r\n  }\r\n`;\r\n\r\nconst Svg = styled.svg`\r\n  position: relative;\r\n  flex-shrink: 0;\r\n  transform: translate(-0.5px, -1px);\r\n\r\n  * {\r\n    fill: ${({ theme, color }) => theme.colors[color!]};\r\n  }\r\n`;\r\n\r\ninterface CurveProps {\r\n  color: string;\r\n}\r\n\r\nexport const Curve = (props: CurveProps) => (\r\n  <StyledBox>\r\n    <Svg\r\n      width=\"20\"\r\n      height=\"23\"\r\n      viewBox=\"0 0 20 23\"\r\n      fill=\"none\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      {...props}\r\n    >\r\n      <path\r\n        fillRule=\"evenodd\"\r\n        clipRule=\"evenodd\"\r\n        d=\"M7.02477 14.7513C8.65865 17.0594 11.6046 18.6059 17.5596 18.8856C18.6836 18.9384 19.5976 19.8435 19.5976 20.9688V20.9688C19.5976 22.0941 18.6841 23.0125 17.5599 22.9643C10.9409 22.6805 6.454 20.9387 3.75496 17.1258C0.937988 13.1464 0.486328 7.39309 0.486328 0.593262H4.50974C4.50974 7.54693 5.06394 11.9813 7.02477 14.7513Z\"\r\n      />\r\n    </Svg>\r\n  </StyledBox>\r\n);\r\n", "export const getAttributeDisplayedType = (type: string) => {\r\n  let displayedType;\r\n\r\n  switch (type) {\r\n    case 'date':\r\n    case 'datetime':\r\n    case 'time':\r\n    case 'timestamp':\r\n      displayedType = 'date';\r\n      break;\r\n    case 'integer':\r\n    case 'biginteger':\r\n    case 'decimal':\r\n    case 'float':\r\n      displayedType = 'number';\r\n      break;\r\n    case 'string':\r\n    case 'text':\r\n      displayedType = 'text';\r\n      break;\r\n    case '':\r\n      displayedType = 'relation';\r\n      break;\r\n    default:\r\n      displayedType = type;\r\n  }\r\n\r\n  return displayedType;\r\n};\r\n", "import { Box } from '@strapi/design-system';\r\nimport get from 'lodash/get';\r\n\r\nimport { ComponentRow } from './ComponentRow';\r\nimport { useDataManager } from './DataManager/useDataManager';\r\nimport { List } from './List';\r\n\r\nimport type { UID } from '@strapi/types';\r\n\r\ninterface ComponentListProps {\r\n  component: UID.Component;\r\n  firstLoopComponentUid?: UID.Component | null;\r\n  isFromDynamicZone?: boolean;\r\n}\r\n\r\nexport const ComponentList = ({\r\n  component,\r\n  isFromDynamicZone = false,\r\n  firstLoopComponentUid,\r\n}: ComponentListProps) => {\r\n  const { components } = useDataManager();\r\n  const type = get(components, component);\r\n\r\n  return (\r\n    <ComponentRow $isChildOfDynamicZone={isFromDynamicZone} className=\"component-row\">\r\n      <List\r\n        type={type}\r\n        firstLoopComponentUid={firstLoopComponentUid || component}\r\n        isFromDynamicZone={isFromDynamicZone}\r\n        isSub\r\n        secondLoopComponentUid={firstLoopComponentUid ? component : null}\r\n      />\r\n    </ComponentRow>\r\n  );\r\n};\r\n", "import { Box } from '@strapi/design-system';\r\nimport { styled } from 'styled-components';\r\n\r\nexport const ComponentRow = styled(Box)<{\r\n  $isFromDynamicZone?: boolean;\r\n  $isChildOfDynamicZone?: boolean;\r\n}>`\r\n  &.component-row,\r\n  &.dynamiczone-row {\r\n    position: relative;\r\n\r\n    > ul:first-of-type {\r\n      padding: 0 0 0 104px;\r\n      position: relative;\r\n\r\n      &::before {\r\n        content: '';\r\n        width: 0.4rem;\r\n        height: ${({ $isFromDynamicZone }) =>\r\n          $isFromDynamicZone ? 'calc(100% - 65px)' : 'calc(100%)'};\r\n        position: absolute;\r\n        left: 7rem;\r\n        border-radius: 4px;\r\n\r\n        ${({ $isFromDynamicZone, $isChildOfDynamicZone, theme }) => {\r\n          if ($isChildOfDynamicZone) {\r\n            return `background-color: ${theme.colors.primary200};`;\r\n          }\r\n\r\n          if ($isFromDynamicZone) {\r\n            return `background-color: ${theme.colors.primary200};`;\r\n          }\r\n\r\n          return `background: ${theme.colors.neutral150};`;\r\n        }}\r\n      }\r\n    }\r\n  }\r\n\r\n  &.dynamiczone-row > ul:first-of-type {\r\n    padding: 0;\r\n  }\r\n`;\r\n", "import { useIntl } from 'react-intl';\r\n\r\nimport { getTrad } from '../utils/getTrad';\r\n\r\ntype DisplayedTypeProps = {\r\n  type: string;\r\n  customField?: string | null;\r\n  repeatable?: boolean;\r\n  multiple?: boolean;\r\n};\r\n\r\nexport const DisplayedType = ({\r\n  type,\r\n  customField = null,\r\n  repeatable = false,\r\n  multiple = false,\r\n}: DisplayedTypeProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  let readableType = type;\r\n\r\n  if (['integer', 'biginteger', 'float', 'decimal'].includes(type)) {\r\n    readableType = 'number';\r\n  } else if (['string'].includes(type)) {\r\n    readableType = 'text';\r\n  }\r\n\r\n  if (customField) {\r\n    return formatMessage({\r\n      id: getTrad('attribute.customField'),\r\n      defaultMessage: 'Custom field',\r\n    });\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {repeatable &&\r\n        formatMessage({\r\n          id: getTrad('component.repeatable'),\r\n          defaultMessage: 'Repeatable',\r\n        })}\r\n      {multiple &&\r\n        formatMessage({\r\n          id: getTrad('media.multiple'),\r\n          defaultMessage: 'Multiple',\r\n        })}\r\n      &nbsp;\r\n      {formatMessage({\r\n        id: getTrad(`attribute.${readableType}`),\r\n        defaultMessage: type,\r\n      })}\r\n    </>\r\n  );\r\n};\r\n", "import { ComponentType, useState } from 'react';\r\n\r\nimport { Box, Flex, Typography } from '@strapi/design-system';\r\nimport { Plus } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { getTrad } from '../utils/getTrad';\r\n\r\nimport { ComponentCard } from './ComponentCard';\r\nimport { ComponentList } from './ComponentList';\r\nimport { ComponentRow } from './ComponentRow';\r\nimport { useDataManager } from './DataManager/useDataManager';\r\n\r\nimport type { Internal, Struct } from '@strapi/types';\r\n\r\ninterface DynamicZoneListProps {\r\n  addComponent: (name?: string) => void;\r\n  components: Array<Internal.UID.Component>;\r\n  customRowComponent?: ComponentType<any>;\r\n  name?: string;\r\n  forTarget: Struct.ModelType;\r\n  targetUid: Internal.UID.Schema;\r\n  disabled?: boolean;\r\n}\r\n\r\nconst StyledAddIcon = styled(Plus)<{ disabled?: boolean }>`\r\n  width: 3.2rem;\r\n  height: 3.2rem;\r\n  padding: 0.9rem;\r\n  border-radius: 6.4rem;\r\n  background: ${({ theme, disabled }) =>\r\n    disabled ? theme.colors.neutral100 : theme.colors.primary100};\r\n  path {\r\n    fill: ${({ theme, disabled }) =>\r\n      disabled ? theme.colors.neutral600 : theme.colors.primary600};\r\n  }\r\n`;\r\n\r\nconst ComponentStack = styled(Flex)`\r\n  flex-shrink: 0;\r\n  width: 14rem;\r\n  height: 8rem;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nexport const DynamicZoneList = ({\r\n  components = [],\r\n  addComponent,\r\n  name,\r\n  forTarget,\r\n  targetUid,\r\n  disabled = false,\r\n}: DynamicZoneListProps) => {\r\n  const { isInDevelopmentMode } = useDataManager();\r\n  const [activeTab, setActiveTab] = useState(0);\r\n  const { formatMessage } = useIntl();\r\n\r\n  const toggle = (tab: number) => {\r\n    if (activeTab !== tab) {\r\n      setActiveTab(tab);\r\n    }\r\n  };\r\n\r\n  const handleClickAdd = () => {\r\n    addComponent(name);\r\n  };\r\n\r\n  return (\r\n    <ComponentRow className=\"dynamiczone-row\" $isFromDynamicZone>\r\n      <Box>\r\n        <Box padding={2} paddingLeft=\"104px\">\r\n          <Flex role=\"tablist\" gap={2} wrap=\"wrap\">\r\n            {isInDevelopmentMode && (\r\n              <button\r\n                type=\"button\"\r\n                onClick={handleClickAdd}\r\n                disabled={disabled}\r\n                style={{\r\n                  cursor: disabled ? 'not-allowed' : 'pointer',\r\n                }}\r\n              >\r\n                <ComponentStack direction=\"column\" alignItems=\"stretch\" gap={1}>\r\n                  <StyledAddIcon disabled={disabled} />\r\n                  <Typography\r\n                    variant=\"pi\"\r\n                    fontWeight=\"bold\"\r\n                    textColor={disabled ? 'neutral600' : 'primary600'}\r\n                  >\r\n                    {formatMessage({\r\n                      id: getTrad('button.component.add'),\r\n                      defaultMessage: 'Add a component',\r\n                    })}\r\n                  </Typography>\r\n                </ComponentStack>\r\n              </button>\r\n            )}\r\n            {components.map((component, index) => {\r\n              return (\r\n                <ComponentCard\r\n                  key={component}\r\n                  dzName={name || ''}\r\n                  index={index}\r\n                  component={component}\r\n                  isActive={activeTab === index}\r\n                  isInDevelopmentMode={isInDevelopmentMode}\r\n                  onClick={() => toggle(index)}\r\n                  forTarget={forTarget}\r\n                  targetUid={targetUid}\r\n                  disabled={disabled}\r\n                />\r\n              );\r\n            })}\r\n          </Flex>\r\n        </Box>\r\n        <Box>\r\n          {components.map((component, index) => {\r\n            return (\r\n              <Box\r\n                id={`dz-${name}-panel-${index}`}\r\n                role=\"tabpanel\"\r\n                aria-labelledby={`dz-${name}-tab-${index}`}\r\n                key={component}\r\n                style={{ display: activeTab === index ? 'block' : 'none' }}\r\n              >\r\n                <ComponentList isFromDynamicZone component={component} key={component} />\r\n              </Box>\r\n            );\r\n          })}\r\n        </Box>\r\n      </Box>\r\n    </ComponentRow>\r\n  );\r\n};\r\n", "import { Box, Flex, Typography } from '@strapi/design-system';\r\nimport { Cross } from '@strapi/icons';\r\nimport get from 'lodash/get';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { useDataManager } from '../DataManager/useDataManager';\r\n\r\nimport { ComponentIcon } from './ComponentIcon';\r\n\r\nimport type { Internal, Struct } from '@strapi/types';\r\n\r\ninterface ComponentCardProps {\r\n  component: string;\r\n  dzName: string;\r\n  index: number;\r\n  isActive?: boolean;\r\n  isInDevelopmentMode?: boolean;\r\n  onClick?: () => void;\r\n  forTarget: Struct.ModelType;\r\n  targetUid: Internal.UID.Schema;\r\n  disabled?: boolean;\r\n}\r\n\r\nconst CloseButton = styled(Box)`\r\n  position: absolute;\r\n  display: none;\r\n  top: 5px;\r\n  right: 0.8rem;\r\n\r\n  svg {\r\n    width: 1rem;\r\n    height: 1rem;\r\n\r\n    path {\r\n      fill: ${({ theme }) => theme.colors.primary600};\r\n    }\r\n  }\r\n`;\r\n\r\nconst ComponentBox = styled(Flex)`\r\n  width: 14rem;\r\n  height: 8rem;\r\n  position: relative;\r\n  border: 1px solid ${({ theme }) => theme.colors.neutral200};\r\n  background: ${({ theme }) => theme.colors.neutral100};\r\n  border-radius: ${({ theme }) => theme.borderRadius};\r\n  max-width: 100%;\r\n\r\n  &.active,\r\n  &:focus,\r\n  &:hover {\r\n    border: 1px solid ${({ theme }) => theme.colors.primary200};\r\n    background: ${({ theme }) => theme.colors.primary100};\r\n    color: ${({ theme }) => theme.colors.primary600};\r\n\r\n    ${CloseButton} {\r\n      display: block;\r\n    }\r\n\r\n    /* > ComponentIcon */\r\n    > div:first-child {\r\n      background: ${({ theme }) => theme.colors.primary200};\r\n      color: ${({ theme }) => theme.colors.primary600};\r\n\r\n      svg {\r\n        path {\r\n          fill: ${({ theme }) => theme.colors.primary600};\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ComponentCard = ({\r\n  component,\r\n  dzName,\r\n  index,\r\n  isActive = false,\r\n  isInDevelopmentMode = false,\r\n  onClick,\r\n  forTarget,\r\n  targetUid,\r\n  disabled,\r\n}: ComponentCardProps) => {\r\n  const { components, removeComponentFromDynamicZone } = useDataManager();\r\n  const type = get(components, component);\r\n  const { icon, displayName } = type?.info || {};\r\n\r\n  const onClose = (e: any) => {\r\n    e.stopPropagation();\r\n    removeComponentFromDynamicZone({\r\n      forTarget,\r\n      targetUid,\r\n      dzName,\r\n      componentToRemoveIndex: index,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <ComponentBox\r\n      alignItems=\"center\"\r\n      direction=\"column\"\r\n      className={isActive ? 'active' : ''}\r\n      borderRadius=\"borderRadius\"\r\n      justifyContent=\"center\"\r\n      paddingLeft={4}\r\n      paddingRight={4}\r\n      shrink={0}\r\n      onClick={onClick}\r\n      role=\"tab\"\r\n      tabIndex={isActive ? 0 : -1}\r\n      cursor=\"pointer\"\r\n      aria-selected={isActive}\r\n      aria-controls={`dz-${dzName}-panel-${index}`}\r\n      id={`dz-${dzName}-tab-${index}`}\r\n    >\r\n      <ComponentIcon icon={icon} isActive={isActive} />\r\n\r\n      <Box marginTop={1} maxWidth=\"100%\">\r\n        <Typography variant=\"pi\" fontWeight=\"bold\" ellipsis>\r\n          {displayName}\r\n        </Typography>\r\n      </Box>\r\n\r\n      {isInDevelopmentMode && !disabled && (\r\n        <CloseButton cursor=\"pointer\" tag=\"button\" onClick={onClose}>\r\n          <Cross />\r\n        </CloseButton>\r\n      )}\r\n    </ComponentBox>\r\n  );\r\n};\r\n", "import { Flex } from '@strapi/design-system';\r\n\r\nimport { COMPONENT_ICONS } from '../../IconPicker/constants';\r\n\r\ninterface ComponentIconProps {\r\n  isActive?: boolean;\r\n  icon?: keyof typeof COMPONENT_ICONS;\r\n}\r\n\r\nexport const ComponentIcon = ({ isActive = false, icon = 'dashboard' }: ComponentIconProps) => {\r\n  const Icon = COMPONENT_ICONS[icon] || COMPONENT_ICONS.dashboard;\r\n\r\n  return (\r\n    <Flex\r\n      alignItems=\"center\"\r\n      background={isActive ? 'primary200' : 'neutral200'}\r\n      justifyContent=\"center\"\r\n      height={8}\r\n      width={8}\r\n      borderRadius=\"50%\"\r\n    >\r\n      <Icon height=\"2rem\" width=\"2rem\" />\r\n    </Flex>\r\n  );\r\n};\r\n", "import type { ReactNode } from 'react';\r\n\r\nimport { Box, Divider, Flex, TFooterProps, Typography } from '@strapi/design-system';\r\nimport { styled } from 'styled-components';\r\n\r\nconst IconBox = styled(Box)`\r\n  height: 2.4rem;\r\n  width: 2.4rem;\r\n  border-radius: 50%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  svg {\r\n    height: 1rem;\r\n    width: 1rem;\r\n  }\r\n\r\n  svg path {\r\n    fill: ${({ theme, color }) => theme.colors[`${color}600`]};\r\n  }\r\n`;\r\n\r\nconst ButtonBox = styled(Box)`\r\n  border-radius: 0 0 ${({ theme }) => theme.borderRadius} ${({ theme }) => theme.borderRadius};\r\n  display: block;\r\n  width: 100%;\r\n  border: none;\r\n  position: relative;\r\n`;\r\n\r\ninterface NestedTFooterProps extends TFooterProps {\r\n  color: string;\r\n  children: ReactNode;\r\n  icon: ReactNode;\r\n  onClick?: () => void;\r\n}\r\n\r\nexport const NestedTFooter = ({ children, icon, color, ...props }: NestedTFooterProps) => {\r\n  return (\r\n    <ButtonBox\r\n      paddingBottom={4}\r\n      paddingTop={4}\r\n      paddingLeft=\"6rem\"\r\n      tag=\"button\"\r\n      type=\"button\"\r\n      {...props}\r\n    >\r\n      <Flex>\r\n        <IconBox color={color} aria-hidden background={`${color}200`}>\r\n          {icon}\r\n        </IconBox>\r\n        <Box paddingLeft={3}>\r\n          <Typography variant=\"pi\" fontWeight=\"bold\" textColor={`${color}600`}>\r\n            {children}\r\n          </Typography>\r\n        </Box>\r\n      </Flex>\r\n    </ButtonBox>\r\n  );\r\n};\r\n\r\nexport const TFooter = ({ children, icon, color, ...props }: TFooterProps & { color: string }) => {\r\n  return (\r\n    <div>\r\n      <Divider />\r\n      <ButtonBox tag=\"button\" background={`${color}100`} padding={5} {...props}>\r\n        <Flex>\r\n          <IconBox color={color} aria-hidden background={`${color}200`}>\r\n            {icon}\r\n          </IconBox>\r\n          <Box paddingLeft={3}>\r\n            <Typography variant=\"pi\" fontWeight=\"bold\" textColor={`${color}600`}>\r\n              {children}\r\n            </Typography>\r\n          </Box>\r\n        </Flex>\r\n      </ButtonBox>\r\n    </div>\r\n  );\r\n};\r\n", "import { memo } from 'react';\r\n\r\nimport { type Permission, useRBAC } from '@strapi/admin/strapi-admin';\r\nimport { Button } from '@strapi/design-system';\r\nimport { ListPlus } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { styled } from 'styled-components';\r\n\r\nimport type { Component, ContentType } from '../../types';\r\n\r\nconst cmPermissions: Record<string, Permission[]> = {\r\n  collectionTypesConfigurations: [\r\n    {\r\n      action: 'plugin::content-manager.collection-types.configure-view',\r\n      subject: null,\r\n    },\r\n  ],\r\n  componentsConfigurations: [\r\n    {\r\n      action: 'plugin::content-manager.components.configure-layout',\r\n      subject: null,\r\n    },\r\n  ],\r\n  singleTypesConfigurations: [\r\n    {\r\n      action: 'plugin::content-manager.single-types.configure-view',\r\n      subject: null,\r\n    },\r\n  ],\r\n};\r\n\r\nconst getPermission = (type: Component | ContentType) => {\r\n  if (type.modelType === 'contentType') {\r\n    if (type.kind === 'singleType') {\r\n      return cmPermissions.singleTypesConfigurations;\r\n    }\r\n\r\n    return cmPermissions.collectionTypesConfigurations;\r\n  }\r\n\r\n  return cmPermissions.componentsConfigurations;\r\n};\r\n\r\ninterface LinkToCMSettingsViewProps {\r\n  disabled: boolean;\r\n  type: Component | ContentType;\r\n}\r\n\r\nconst getLink = (type: Component | ContentType) => {\r\n  switch (type.modelType) {\r\n    case 'contentType':\r\n      switch (type.kind) {\r\n        case 'singleType':\r\n          return `/content-manager/single-types/${type.uid}/configurations/edit`;\r\n        case 'collectionType':\r\n          return `/content-manager/collection-types/${type.uid}/configurations/edit`;\r\n      }\r\n    case 'component':\r\n      return `/content-manager/components/${type.uid}/configurations/edit`;\r\n  }\r\n};\r\n\r\nconst StyledButton = styled(Button)`\r\n  white-space: nowrap;\r\n`;\r\n\r\nexport const LinkToCMSettingsView = memo(({ disabled, type }: LinkToCMSettingsViewProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const navigate = useNavigate();\r\n  const permissionsToApply = getPermission(type);\r\n\r\n  const label = formatMessage({\r\n    id: 'content-type-builder.form.button.configure-view',\r\n    defaultMessage: 'Configure the view',\r\n  });\r\n\r\n  const handleClick = () => {\r\n    if (disabled) {\r\n      return false;\r\n    }\r\n\r\n    const link = getLink(type);\r\n\r\n    navigate(link);\r\n\r\n    return false;\r\n  };\r\n\r\n  const { isLoading, allowedActions } = useRBAC(permissionsToApply);\r\n\r\n  if (isLoading) {\r\n    return null;\r\n  }\r\n\r\n  if (!allowedActions.canConfigureView && !allowedActions.canConfigureLayout) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <StyledButton\r\n      startIcon={<ListPlus />}\r\n      variant=\"tertiary\"\r\n      onClick={handleClick}\r\n      disabled={disabled}\r\n    >\r\n      {label}\r\n    </StyledButton>\r\n  );\r\n});\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,IAAAA,qBAAuB;;;ACJvB,IAAAC,gBAAyB;;;IMEZC,yBAAmC,UAAA;MAAC;IAACC;;AAChD,SAAO;IACL,GAAGA;IACHC,GAAG;;AAEN;;;ANaD,uBAA6B;;;ASpB7B,IAAAC,gBAA2C;AAK3C,IAAAC,cAAgB;AAChB,wBAAuB;;;ACmCjB;AAtCN,IAAM,YAAY,GAAO,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBASV,CAAC,EAAE,OAAO,MAAM,MAAM,MAAM,OAAO,KAAM,CAAC;AAAA;AAAA;AAAA;AAK5D,IAAM,MAAM,GAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAMP,CAAC,EAAE,OAAO,MAAM,MAAM,MAAM,OAAO,KAAM,CAAC;AAAA;AAAA;AAQ/C,IAAM,QAAQ,CAAC,cACpB,wBAAC,aACC;AAAA,EAAC;AAAA;AAAA,IACC,OAAM;AAAA,IACN,QAAO;AAAA,IACP,SAAQ;AAAA,IACR,MAAK;AAAA,IACL,OAAM;AAAA,IACL,GAAG;AAAA,IAEJ;AAAA,MAAC;AAAA;AAAA,QACC,UAAS;AAAA,QACT,UAAS;AAAA,QACT,GAAE;AAAA;AAAA,IACJ;AAAA;AACF,GACF;;;AC/CK,IAAM,4BAA4B,CAAC,SAAiB;AACzD,MAAI;AAEJ,UAAQ,MAAM;AAAA,IACZ,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AACH,sBAAgB;AAChB;AAAA,IACF,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AACH,sBAAgB;AAChB;AAAA,IACF,KAAK;AAAA,IACL,KAAK;AACH,sBAAgB;AAChB;AAAA,IACF,KAAK;AACH,sBAAgB;AAChB;AAAA,IACF;AACE,sBAAgB;AAAA,EACpB;AAEA,SAAO;AACT;;;AC3BA,iBAAgB;;;ACET,IAAM,eAAe,GAAO,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAepB,CAAC,EAAE,mBAAmB,MAC9B,qBAAqB,sBAAsB,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA,UAKvD,CAAC,EAAE,oBAAoB,uBAAuB,MAAM,MAAM;AAC1D,MAAI,uBAAuB;AACzB,WAAO,qBAAqB,MAAM,OAAO,UAAU;AAAA,EACrD;AAEA,MAAI,oBAAoB;AACtB,WAAO,qBAAqB,MAAM,OAAO,UAAU;AAAA,EACrD;AAEA,SAAO,eAAe,MAAM,OAAO,UAAU;AAC/C,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ADTH,IAAAC,sBAAA;AAVC,IAAM,gBAAgB,CAAC;AAAA,EAC5B;AAAA,EACA,oBAAoB;AAAA,EACpB;AACF,MAA0B;AACxB,QAAM,EAAE,WAAW,IAAI,eAAe;AACtC,QAAM,WAAO,WAAAC,SAAI,YAAY,SAAS;AAEtC,aACE,yBAAC,gBAAa,uBAAuB,mBAAmB,WAAU,iBAChE;AAAA,IAAC;AAAA;AAAA,MACC;AAAA,MACA,uBAAuB,yBAAyB;AAAA,MAChD;AAAA,MACA,OAAK;AAAA,MACL,wBAAwB,wBAAwB,YAAY;AAAA;AAAA,EAC9D,GACF;AAEJ;;;AECI,IAAAC,sBAAA;AAxBG,IAAM,gBAAgB,CAAC;AAAA,EAC5B;AAAA,EACA,cAAc;AAAA,EACd,aAAa;AAAA,EACb,WAAW;AACb,MAA0B;AACxB,QAAM,EAAE,cAAc,IAAI,QAAQ;AAElC,MAAI,eAAe;AAEnB,MAAI,CAAC,WAAW,cAAc,SAAS,SAAS,EAAE,SAAS,IAAI,GAAG;AAChE,mBAAe;AAAA,EACjB,WAAW,CAAC,QAAQ,EAAE,SAAS,IAAI,GAAG;AACpC,mBAAe;AAAA,EACjB;AAEA,MAAI,aAAa;AACf,WAAO,cAAc;AAAA,MACnB,IAAI,QAAQ,uBAAuB;AAAA,MACnC,gBAAgB;AAAA,IAClB,CAAC;AAAA,EACH;AAEA,aACE,0DACG;AAAA,kBACC,cAAc;AAAA,MACZ,IAAI,QAAQ,sBAAsB;AAAA,MAClC,gBAAgB;AAAA,IAClB,CAAC;AAAA,IACF,YACC,cAAc;AAAA,MACZ,IAAI,QAAQ,gBAAgB;AAAA,MAC5B,gBAAgB;AAAA,IAClB,CAAC;AAAA,IAAE;AAAA,IAEJ,cAAc;AAAA,MACb,IAAI,QAAQ,aAAa,YAAY,EAAE;AAAA,MACvC,gBAAgB;AAAA,IAClB,CAAC;AAAA,KACH;AAEJ;;;ACrDA,mBAAwC;;;ACExC,IAAAC,cAAgB;;;ACmBV,IAAAC,sBAAA;AAZC,IAAM,gBAAgB,CAAC,EAAE,WAAW,OAAO,OAAO,YAAY,MAA0B;AAC7F,QAAM,OAAO,gBAAgB,IAAI,KAAK,gBAAgB;AAEtD,aACE;AAAA,IAAC;AAAA;AAAA,MACC,YAAW;AAAA,MACX,YAAY,WAAW,eAAe;AAAA,MACtC,gBAAe;AAAA,MACf,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,cAAa;AAAA,MAEb,uCAAC,QAAK,QAAO,QAAO,OAAM,QAAO;AAAA;AAAA,EACnC;AAEJ;;;AD2EI,IAAAC,sBAAA;AA5EJ,IAAM,cAAc,GAAO,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAWhB,CAAC,EAAE,MAAM,MAAM,MAAM,OAAO,UAAU;AAAA;AAAA;AAAA;AAKpD,IAAM,eAAe,GAAO,IAAI;AAAA;AAAA;AAAA;AAAA,sBAIV,CAAC,EAAE,MAAM,MAAM,MAAM,OAAO,UAAU;AAAA,gBAC5C,CAAC,EAAE,MAAM,MAAM,MAAM,OAAO,UAAU;AAAA,mBACnC,CAAC,EAAE,MAAM,MAAM,MAAM,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAM5B,CAAC,EAAE,MAAM,MAAM,MAAM,OAAO,UAAU;AAAA,kBAC5C,CAAC,EAAE,MAAM,MAAM,MAAM,OAAO,UAAU;AAAA,aAC3C,CAAC,EAAE,MAAM,MAAM,MAAM,OAAO,UAAU;AAAA;AAAA,MAE7C,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAMG,CAAC,EAAE,MAAM,MAAM,MAAM,OAAO,UAAU;AAAA,eAC3C,CAAC,EAAE,MAAM,MAAM,MAAM,OAAO,UAAU;AAAA;AAAA;AAAA;AAAA,kBAInC,CAAC,EAAE,MAAM,MAAM,MAAM,OAAO,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAOjD,IAAM,gBAAgB,CAAC;AAAA,EAC5B;AAAA,EACA;AAAA,EACA;AAAA,EACA,WAAW;AAAA,EACX,sBAAsB;AAAA,EACtB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,MAA0B;AACxB,QAAM,EAAE,YAAY,+BAA+B,IAAI,eAAe;AACtE,QAAM,WAAO,YAAAC,SAAI,YAAY,SAAS;AACtC,QAAM,EAAE,MAAM,YAAY,KAAI,6BAAM,SAAQ,CAAC;AAE7C,QAAM,UAAU,CAAC,MAAW;AAC1B,MAAE,gBAAgB;AAClB,mCAA+B;AAAA,MAC7B;AAAA,MACA;AAAA,MACA;AAAA,MACA,wBAAwB;AAAA,IAC1B,CAAC;AAAA,EACH;AAEA,aACE;AAAA,IAAC;AAAA;AAAA,MACC,YAAW;AAAA,MACX,WAAU;AAAA,MACV,WAAW,WAAW,WAAW;AAAA,MACjC,cAAa;AAAA,MACb,gBAAe;AAAA,MACf,aAAa;AAAA,MACb,cAAc;AAAA,MACd,QAAQ;AAAA,MACR;AAAA,MACA,MAAK;AAAA,MACL,UAAU,WAAW,IAAI;AAAA,MACzB,QAAO;AAAA,MACP,iBAAe;AAAA,MACf,iBAAe,MAAM,MAAM,UAAU,KAAK;AAAA,MAC1C,IAAI,MAAM,MAAM,QAAQ,KAAK;AAAA,MAE7B;AAAA,qCAAC,iBAAc,MAAY,UAAoB;AAAA,YAE/C,yBAAC,OAAI,WAAW,GAAG,UAAS,QAC1B,uCAAC,cAAW,SAAQ,MAAK,YAAW,QAAO,UAAQ,MAChD,uBACH,GACF;AAAA,QAEC,uBAAuB,CAAC,gBACvB,yBAAC,eAAY,QAAO,WAAU,KAAI,UAAS,SAAS,SAClD,uCAAC,iBAAM,GACT;AAAA;AAAA;AAAA,EAEJ;AAEJ;;;ADhDgB,IAAAC,sBAAA;AAzDhB,IAAM,gBAAgB,GAAO,aAAI;AAAA;AAAA;AAAA;AAAA;AAAA,gBAKjB,CAAC,EAAE,OAAO,SAAS,MAC/B,WAAW,MAAM,OAAO,aAAa,MAAM,OAAO,UAAU;AAAA;AAAA,YAEpD,CAAC,EAAE,OAAO,SAAS,MACzB,WAAW,MAAM,OAAO,aAAa,MAAM,OAAO,UAAU;AAAA;AAAA;AAIlE,IAAM,iBAAiB,GAAO,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQ3B,IAAM,kBAAkB,CAAC;AAAA,EAC9B,aAAa,CAAC;AAAA,EACd;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,WAAW;AACb,MAA4B;AAC1B,QAAM,EAAE,oBAAoB,IAAI,eAAe;AAC/C,QAAM,CAAC,WAAW,YAAY,QAAI,uBAAS,CAAC;AAC5C,QAAM,EAAE,cAAc,IAAI,QAAQ;AAElC,QAAM,SAAS,CAAC,QAAgB;AAC9B,QAAI,cAAc,KAAK;AACrB,mBAAa,GAAG;AAAA,IAClB;AAAA,EACF;AAEA,QAAM,iBAAiB,MAAM;AAC3B,iBAAa,IAAI;AAAA,EACnB;AAEA,aACE,yBAAC,gBAAa,WAAU,mBAAkB,oBAAkB,MAC1D,wCAAC,OACC;AAAA,iCAAC,OAAI,SAAS,GAAG,aAAY,SAC3B,wCAAC,QAAK,MAAK,WAAU,KAAK,GAAG,MAAK,QAC/B;AAAA,iCACC;AAAA,QAAC;AAAA;AAAA,UACC,MAAK;AAAA,UACL,SAAS;AAAA,UACT;AAAA,UACA,OAAO;AAAA,YACL,QAAQ,WAAW,gBAAgB;AAAA,UACrC;AAAA,UAEA,wCAAC,kBAAe,WAAU,UAAS,YAAW,WAAU,KAAK,GAC3D;AAAA,yCAAC,iBAAc,UAAoB;AAAA,gBACnC;AAAA,cAAC;AAAA;AAAA,gBACC,SAAQ;AAAA,gBACR,YAAW;AAAA,gBACX,WAAW,WAAW,eAAe;AAAA,gBAEpC,wBAAc;AAAA,kBACb,IAAI,QAAQ,sBAAsB;AAAA,kBAClC,gBAAgB;AAAA,gBAClB,CAAC;AAAA;AAAA,YACH;AAAA,aACF;AAAA;AAAA,MACF;AAAA,MAED,WAAW,IAAI,CAAC,WAAW,UAAU;AACpC,mBACE;AAAA,UAAC;AAAA;AAAA,YAEC,QAAQ,QAAQ;AAAA,YAChB;AAAA,YACA;AAAA,YACA,UAAU,cAAc;AAAA,YACxB;AAAA,YACA,SAAS,MAAM,OAAO,KAAK;AAAA,YAC3B;AAAA,YACA;AAAA,YACA;AAAA;AAAA,UATK;AAAA,QAUP;AAAA,MAEJ,CAAC;AAAA,OACH,GACF;AAAA,QACA,yBAAC,OACE,qBAAW,IAAI,CAAC,WAAW,UAAU;AACpC,iBACE;AAAA,QAAC;AAAA;AAAA,UACC,IAAI,MAAM,IAAI,UAAU,KAAK;AAAA,UAC7B,MAAK;AAAA,UACL,mBAAiB,MAAM,IAAI,QAAQ,KAAK;AAAA,UAExC,OAAO,EAAE,SAAS,cAAc,QAAQ,UAAU,OAAO;AAAA,UAEzD,uCAAC,iBAAc,mBAAiB,MAAC,aAA2B,SAAW;AAAA;AAAA,QAHlE;AAAA,MAIP;AAAA,IAEJ,CAAC,GACH;AAAA,KACF,GACF;AAEJ;;;ANxDM,IAAAC,sBAAA;AAjDC,IAAM,cAAc,GAAO,IAAI;AAAA;AAAA;AAAA,gBAGtB,CAAC,EAAE,OAAO,WAAW,MACjC,aAAa,SAAS,aAAa,MAAM,OAAO,UAAU,EAAE;AAAA;AAAA,iBAE/C,CAAC,EAAE,MAAM,MAAM,MAAM,OAAO,CAAC,CAAC;AAAA,oBAC3B,CAAC,EAAE,MAAM,MAAM,MAAM,OAAO,CAAC,CAAC;AAAA;AAAA,aAErC,CAAC,EAAE,YAAY,MAAO,cAAc,IAAI,CAAE;AAAA;AAAA;AAsBvD,IAAM,qBAAqB,GAAO,GAAG;AAAA;AAAA;AAAA;AAK9B,IAAM,mBAAe,0BAA6C,CAAC,OAAO,QAAQ;AACvF,QAAM,EAAE,OAAO,GAAG,KAAK,IAAI;AAE3B,aACE;AAAA,IAAC;AAAA;AAAA,MACC,KAAI;AAAA,MACJ;AAAA,MACC,GAAG,MAAM;AAAA,MACV;AAAA,MACA,YAAW;AAAA,MACX,QAAQ,MAAM,YAAY,iBAAiB;AAAA,MAC3C,cAAY,MAAM,KAAK;AAAA,MAEvB,uCAAC,eAAa,GAAG,MAAM;AAAA;AAAA,EACzB;AAEJ,CAAC;AAED,IAAM,kBAAc,oBAAK,CAAC,UAA4C;AACpE,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,IAAI;AACJ,QAAM,wBAAwB,aAAa;AAE3C,QAAM,CAAC,QAAQ,SAAS,QAAI,wBAAkB,IAAI;AAElD,QAAM,gBAAgB,KAAK,WAAW;AAEtC,QAAM,EAAE,cAAc,iBAAiB,oBAAoB,IAAI,eAAe;AAC9E,QAAM,EAAE,sBAAsB,2BAA2B,IAAI,uBAAuB;AAEpF,QAAM,EAAE,cAAc,IAAI,QAAQ;AAClC,QAAM,CAAC,mBAAmB,oBAAoB,QAAI,wBAAS,KAAK;AAEhE,QAAM,YAAY,KAAK,WAAW;AAElC,QAAM,UAAU,KAAK,SAAS,cAAc,KAAK,SAAS,SAAS,OAAO;AAC1E,QAAM,MAAM,CAAC,WAAW,cAAc,SAAS,SAAS,EAAE,SAAS,KAAK,IAAI,IACxE,WACA,KAAK;AAET,QAAM,oBAAoB,KAAK,SAAS,iBAAa,YAAAC,SAAI,cAAc,KAAK,MAAM,IAAI;AACtF,QAAM,0BAAsB,YAAAA,SAAI,mBAAmB,QAAQ;AAE3D,QAAM,MAAM,YAAY,QAAQ,KAAK,SAAS,aAAa;AAE3D,QAAM,eAAe,CAAC,MAAwB;AAC5C,MAAE,gBAAgB;AAClB,UAAM,gBAAgB,mBAAmB,cAAc,KAAK,IAAI;AAChE,QAAI,cAAc,SAAS,GAAG;AAC5B,2BAAqB,IAAI;AAAA,IAC3B,OAAO;AACL,sBAAgB;AAAA,QACd,WAAW,KAAK;AAAA,QAChB,WAAW,KAAK;AAAA,QAChB,uBAAuB,KAAK;AAAA,MAC9B,CAAC;AAAA,IACH;AAAA,EACF;AAEA,QAAM,sBAAsB,MAAM;AAChC,oBAAgB;AAAA,MACd,WAAW,KAAK;AAAA,MAChB,WAAW,KAAK;AAAA,MAChB,uBAAuB,KAAK;AAAA,IAC9B,CAAC;AACD,yBAAqB,KAAK;AAAA,EAC5B;AAEA,QAAM,qBAAqB,MAAM;AAC/B,yBAAqB,KAAK;AAAA,EAC5B;AAEA,QAAM,cAAc,MAAM;AACxB,QAAI,SAAS;AACX;AAAA,IACF;AAEA,QAAI,KAAK,iBAAiB,OAAO;AAC/B,YAAM,gBAAiB,0BAA0B,yBAAyB,KAAK;AAE/E,YAAM,gBAAgB,0BAA0B,KAAK,IAAI;AACzD,YAAM,OAAO,KAAK,SAAS,cAAc,MAAM;AAE/C,UAAI,KAAK,aAAa;AACpB,mCAA2B;AAAA,UACzB,WAAW,KAAK;AAAA,UAChB,WAAW;AAAA,UACX,eAAe,KAAK;AAAA,UACpB;AAAA,UACA,gBAAgB,KAAK;AAAA,QACvB,CAAC;AAAA,MACH,OAAO;AACL,6BAAqB;AAAA,UACnB,WAAW,KAAK;AAAA,UAChB,WAAW;AAAA,UACX,eAAe,KAAK;AAAA,UACpB;AAAA,UACA;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EACF;AAEA,MAAI;AAEJ,MAAI,0BAA0B,uBAAuB;AACnD,iBAAa;AAAA,EACf,WAAW,uBAAuB;AAChC,iBAAa;AAAA,EACf,OAAO;AACL,iBAAa;AAAA,EACf;AAEA,QAAM,UAAU,CAAC,iBAAiB,CAAC;AACnC,QAAM,YAAY,CAAC,iBAAiB,CAAC;AAErC,QAAM,SAAS,iBAAiB,YAAY,gBAAgB;AAE5D,QAAM,WAAW,uBAAuB,KAAK,iBAAiB,SAAS,CAAC,WAAW;AAEnF,aACE,0DACE;AAAA;AAAA,MAAC;AAAA;AAAA,QACC,YAAY;AAAA,QACZ,aAAa;AAAA,QACb,SAAS,WAAW,cAAc;AAAA,QAClC,aAAa;AAAA,QACb,cAAc;AAAA,QAEd;AAAA,wCAAC,QAAK,YAAW,UAAS,UAAS,UAAS,KAAK,GAC9C;AAAA,2BAAe,KAAK,CAAC,iBACpB,yBAAC,SAAM,OAAO,oBAAoB,eAAe,cAAc;AAAA,YAEhE,2BACC;AAAA,cAAC;AAAA;AAAA,gBACC;AAAA,gBACA,MAAK;AAAA,gBACL,KAAK;AAAA,gBACJ,GAAG;AAAA,gBACJ,SAAQ;AAAA,gBACR,aAAa;AAAA,gBACb,OAAO,GAAG,cAAc;AAAA,kBACtB,IAAI;AAAA,kBACJ,gBAAgB;AAAA,gBAClB,CAAC,CAAC,IAAI,KAAK,IAAI;AAAA,gBACf,UAAU,iBAAiB;AAAA,gBAE3B,uCAAC,iBAAK;AAAA;AAAA,YACR;AAAA,gBAEF,0BAAC,QAAK,KAAK,GACT;AAAA,4CAAC,QAAK,KAAK,GAAG,YAAW,UACvB;AAAA,6CAAC,iBAAc,MAAM,KAAK,aAAa,KAAK,aAAa;AAAA,oBACzD;AAAA,kBAAC;AAAA;AAAA,oBACC,WAAU;AAAA,oBACV,YAAW;AAAA,oBACX,gBAAgB,YAAY,iBAAiB;AAAA,oBAC7C,UAAQ;AAAA,oBACR,UAAS;AAAA,oBAER;AAAA,2BAAK;AAAA,sBACL,cAAc,QAAQ,KAAK,gBAC1B,yBAAC,cAAW,WAAU,aAAY,gBAAO;AAAA;AAAA;AAAA,gBAE7C;AAAA,iBACF;AAAA,kBACA,yBAAC,QACC,wCAAC,cAAW,WAAU,cACpB;AAAA;AAAA,kBAAC;AAAA;AAAA,oBACC,MAAM,KAAK;AAAA,oBACX,aAAa,KAAK;AAAA,oBAClB,YAAY,gBAAgB,QAAQ,KAAK;AAAA,oBACzC,UAAU,cAAc,QAAQ,KAAK;AAAA;AAAA,gBACvC;AAAA,gBACC,gBAAgB,QACf,KAAK,cACL,OAAO,KAAK,KAAK,UAAU,EAAE,SAAS,SAAK,yBAAC,SAAM,QAAQ,GAAG,yBAAW;AAAA,gBACzE,KAAK,SAAS,kBACb,0DAAE;AAAA;AAAA,kBACQ,gBAAgB,KAAK,UAAU,KAAK,eAAe;AAAA,kBAAE;AAAA,kBAC5D,qBACC,cAAc;AAAA,oBACZ,IAAI,QAAQ,0BAA0B;AAAA,oBACtC,gBAAgB;AAAA,kBAClB,CAAC;AAAA,kBAAE;AAAA,kBAEJ,yBACC;AAAA,oBAAC;AAAA;AAAA,sBACC,SAAS,CAAC,MAAM,EAAE,gBAAgB;AAAA,sBAClC,KAAKC;AAAA,sBACL,IAAI,+CAA+C,kBAAkB,GAAG;AAAA,sBAEvE,gCAAAC,SAAW,kBAAkB,KAAK,WAAW;AAAA;AAAA,kBAChD;AAAA,kBAED,uBACC,IAAI,cAAc;AAAA,oBAChB,IAAI,QAAQ,MAAM;AAAA,oBAClB,gBAAgB;AAAA,kBAClB,CAAC,CAAC,KAAK,mBAAmB;AAAA,mBAC9B;AAAA,gBAED,KAAK,SAAS,mBAAe,yBAAC,iBAAc,KAAK,KAAK,WAAW;AAAA,iBACpE,GACF;AAAA,eACF;AAAA,aACF;AAAA,cAEA,yBAAC,OACC,uCAAC,QAAK,gBAAe,YAAW,KAAK,GAAG,SAAS,CAAC,MAAM,EAAE,gBAAgB,GACxE,wEACE;AAAA,yCAAC,OAAK,eAAK,cAAU,yBAAC,eAAY,QAAQ,KAAK,QAAQ,GAAG;AAAA,YACzD,CAAC,aAAa,aAAa,EAAE,SAAS,KAAK,IAAI,SAC9C;AAAA,cAAC;AAAA;AAAA,gBACC,SAAS,CAAC,MAAM;AACd,oBAAE,eAAe;AACjB,oBAAE,gBAAgB;AAElB,sBAAI,QAAQ;AACV,8BAAU,KAAK;AAAA,kBACjB,OAAO;AACL,8BAAU,IAAI;AAAA,kBAChB;AAAA,gBACF;AAAA,gBACA,iBAAe;AAAA,gBACf,OAAO,cAAc;AAAA,kBACnB,IAAI;AAAA,kBACJ,gBAAgB;AAAA,gBAClB,CAAC;AAAA,gBACD,SAAQ;AAAA,gBACR,aAAa;AAAA,gBAEb;AAAA,kBAAC;AAAA;AAAA,oBACC,eAAW;AAAA,oBACX,MAAK;AAAA,oBACL,OAAO;AAAA,sBACL,WAAW,UAAU,SAAS,SAAS,QAAQ;AAAA,sBAC/C,YAAY;AAAA,oBACd;AAAA;AAAA,gBACF;AAAA;AAAA,YACF;AAAA,YAED,uBAAuB,KAAK,iBAAiB,YAC5C,0DACG;AAAA,eAAC,eACA;AAAA,gBAAC;AAAA;AAAA,kBACC,SAAS;AAAA,kBACT,OAAO,GAAG,cAAc;AAAA,oBACtB,IAAI;AAAA,oBACJ,gBAAgB;AAAA,kBAClB,CAAC,CAAC,IAAI,KAAK,IAAI;AAAA,kBACf,SAAQ;AAAA,kBACR,UAAU,CAAC;AAAA,kBAEX,uCAAC,iBAAO;AAAA;AAAA,cACV;AAAA,kBAEF;AAAA,gBAAC;AAAA;AAAA,kBACC,SAAS;AAAA,kBACT,OAAO,GAAG,cAAc;AAAA,oBACtB,IAAI;AAAA,oBACJ,gBAAgB;AAAA,kBAClB,CAAC,CAAC,IAAI,KAAK,IAAI;AAAA,kBACf,SAAQ;AAAA,kBACR,UAAU,CAAC;AAAA,kBAEX,uCAAC,gBAAM;AAAA;AAAA,cACT;AAAA,kBACA,yBAAC,OAAO,MAAP,EAAY,MAAM,mBAAmB,cAAc,sBAClD,uCAAC,iBAAc,WAAW,qBAAqB,UAAU,oBACvD,uCAAC,OACC,wCAAC,cACE;AAAA,8BAAc;AAAA,kBACb,IAAI;AAAA,oBACF;AAAA,kBACF;AAAA,kBACA,gBACE;AAAA,gBACJ,CAAC;AAAA,oBACD,yBAAC,cAAW,YAAW,QACpB,6BAAmB,cAAc,KAAK,IAAI,EACxC,IAAI,CAAC,EAAE,UAAU,MAAM,SAAS,EAChC,KAAK,IAAI,GACd;AAAA,gBACC,cAAc;AAAA,kBACb,IAAI;AAAA,oBACF;AAAA,kBACF;AAAA,kBACA,gBAAgB;AAAA,gBAClB,CAAC;AAAA,iBACH,GACF,GACF,GACF;AAAA,eACF,QAEA,yBAAC,QAAK,SAAS,GACb,uCAAC,iBAAK,MAAK,cAAa,GAC1B;AAAA,aAEJ,GACF,GACF;AAAA;AAAA;AAAA,IACF;AAAA,QAEA,0BAAC,UAAO,wBAAwB,uBAAuB,SAAS,QAC7D;AAAA,WAAK,SAAS,mBACb;AAAA,QAAC;AAAA;AAAA,UACE,GAAG;AAAA,UACJ;AAAA,UACA;AAAA;AAAA,MACF;AAAA,MAGD,KAAK,SAAS,qBACb;AAAA,QAAC;AAAA;AAAA,UACE,GAAG;AAAA,UACJ,UAAU,iBAAiB,KAAK,WAAW;AAAA,UAC3C,cAAc;AAAA,UACd,WAAW,KAAK;AAAA,UAChB,WAAW,KAAK;AAAA;AAAA,MAClB;AAAA,OAEJ;AAAA,KACF;AAEJ,CAAC;AAED,IAAM,SAAS,GAAO,GAAG;AAAA,aACZ,CAAC,EAAE,uBAAuB,MAAO,yBAAyB,SAAS,OAAQ;AAAA,gBACxE,CAAC,EAAE,QAAQ,MAAO,UAAU,WAAW,KAAM;AAAA;AAAA;AAAA,gBAG7C,CAAC,EAAE,QAAQ,MACvB,UAAU,8BAA8B,0CAA0C;AAAA;AAGtF,IAAM,gBAAgB,CAAC,EAAE,IAAI,MAA8B;AACzD,QAAM,EAAE,WAAW,IAAI,eAAe;AACtC,QAAM,WAAO,YAAAF,SAAI,YAAY,GAAG;AAEhC,aACE,0DAAE;AAAA;AAAA,QAEA;AAAA,MAAC;AAAA;AAAA,QACC,SAAS,CAAC,MAAM,EAAE,gBAAgB;AAAA,QAClC,KAAKC;AAAA,QACL,IAAI,sDAAsD,KAAK,QAAQ,IAAI,KAAK,GAAG;AAAA,QAElF,gCAAAC,SAAW,KAAK,KAAK,WAAW;AAAA;AAAA,IACnC;AAAA,IAAO;AAAA,KAET;AAEJ;;;AS7XM,IAAAC,sBAAA;AA3CN,IAAM,UAAU,GAAO,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAcd,CAAC,EAAE,OAAO,MAAM,MAAM,MAAM,OAAO,GAAG,KAAK,KAAK,CAAC;AAAA;AAAA;AAI7D,IAAM,YAAY,GAAO,GAAG;AAAA,uBACL,CAAC,EAAE,MAAM,MAAM,MAAM,YAAY,IAAI,CAAC,EAAE,MAAM,MAAM,MAAM,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AActF,IAAM,gBAAgB,CAAC,EAAE,UAAU,MAAM,OAAO,GAAG,MAAM,MAA0B;AACxF,aACE;AAAA,IAAC;AAAA;AAAA,MACC,eAAe;AAAA,MACf,YAAY;AAAA,MACZ,aAAY;AAAA,MACZ,KAAI;AAAA,MACJ,MAAK;AAAA,MACJ,GAAG;AAAA,MAEJ,wCAAC,QACC;AAAA,qCAAC,WAAQ,OAAc,eAAW,MAAC,YAAY,GAAG,KAAK,OACpD,gBACH;AAAA,YACA,yBAAC,OAAI,aAAa,GAChB,uCAAC,cAAW,SAAQ,MAAK,YAAW,QAAO,WAAW,GAAG,KAAK,OAC3D,UACH,GACF;AAAA,SACF;AAAA;AAAA,EACF;AAEJ;AAEO,IAAM,UAAU,CAAC,EAAE,UAAU,MAAM,OAAO,GAAG,MAAM,MAAwC;AAChG,aACE,0BAAC,SACC;AAAA,iCAAC,WAAQ;AAAA,QACT,yBAAC,aAAU,KAAI,UAAS,YAAY,GAAG,KAAK,OAAO,SAAS,GAAI,GAAG,OACjE,wCAAC,QACC;AAAA,mCAAC,WAAQ,OAAc,eAAW,MAAC,YAAY,GAAG,KAAK,OACpD,gBACH;AAAA,UACA,yBAAC,OAAI,aAAa,GAChB,uCAAC,cAAW,SAAQ,MAAK,YAAW,QAAO,WAAW,GAAG,KAAK,OAC3D,UACH,GACF;AAAA,OACF,GACF;AAAA,KACF;AAEJ;;;AlBDI,IAAAC,sBAAA;AA7CG,IAAM,WAAW,GAAO,GAAG;AAAA;AAAA;AAAA;AAAA;AAgBlC,IAAM,cAAc,CAAC,UAA6B;AAChD,QAAM,EAAE,oBAAoB,IAAI,eAAe;AAE/C,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,IAAI,YAAY;AAAA,IACd,UACE,CAAC,uBAAuB,MAAM,KAAK,WAAW,aAAa,MAAM,KAAK,WAAW;AAAA,IACnF,IAAI,MAAM,KAAK;AAAA,IACf,MAAM,EAAE,OAAO,MAAM,KAAK,MAAM;AAAA,EAClC,CAAC;AAED,QAAM,QAAQ;AAAA,IACZ,WAAW,IAAI,UAAU,SAAS;AAAA,MAChC,IAAG,uCAAW,MAAK;AAAA,MACnB,IAAG,uCAAW,MAAK;AAAA,MACnB,QAAQ;AAAA,MACR,QAAQ;AAAA,IACV,CAAC;AAAA,IACD;AAAA,EACF;AAEA,aACE;AAAA,IAAC;AAAA;AAAA,MACC,KAAK;AAAA,MACL,WAAW;AAAA,MACX;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACC,GAAG;AAAA;AAAA,EACN;AAEJ;AAEO,IAAM,OAAO,CAAC;AAAA,EACnB;AAAA,EACA;AAAA,EACA,oBAAoB;AAAA,EACpB,SAAS;AAAA,EACT,QAAQ;AAAA,EACR;AAAA,EACA;AACF,MAAiB;AACf,QAAM,EAAE,cAAc,IAAI,QAAQ;AAClC,QAAM,EAAE,WAAW,IAAI,YAAY;AACnC,QAAM,EAAE,qBAAqB,cAAc,IAAI,eAAe;AAC9D,QAAM,EAAE,oBAAoB,IAAI,uBAAuB;AAEvD,QAAM,QAAQ,6BAAM,WAAW,IAAI,CAAC,MAAM,UAAU;AAClD,WAAO;AAAA,MACL,IAAI,GAAG,KAAK,GAAG,IAAI,KAAK,IAAI;AAAA,MAC5B;AAAA,MACA,GAAG;AAAA,IACL;AAAA,EACF;AAEA,QAAM,CAAC,UAAU,WAAW,QAAI,wBAAkC,IAAI;AAEtE,QAAM,aAAY,6BAAM,YAAW;AAEnC,QAAM,UAAU,WAAW,UAAU,aAAa,CAAC;AAEnD,WAAS,iBAAiB,EAAE,OAAO,GAAmB;AACpD,QAAI,CAAC,QAAQ;AACX;AAAA,IACF;AAEA,gBAAY,OAAO,EAAE;AAAA,EACvB;AAEA,WAAS,cAAc,OAAqB;AAC1C,UAAM,EAAE,QAAQ,KAAK,IAAI;AAEzB,gBAAY,IAAI;AAEhB,QAAI,MAAM;AACR,UAAI,OAAO,OAAO,KAAK,IAAI;AACzB,sBAAc;AAAA,UACZ,WAAW,KAAK;AAAA,UAChB,WAAW,KAAK;AAAA,UAChB,MAAM,OAAO,KAAK,QAAS;AAAA,UAC3B,IAAI,KAAK,KAAK,QAAS;AAAA,QACzB,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EACF;AAEA,QAAM,aAAa,MAAM,KAAK,CAAC,SAAS,KAAK,OAAO,QAAQ;AAE5D,QAAM,kBAAkB,MAAM;AAC5B,QAAI,WAAW;AACb;AAAA,IACF;AAEA,eAAW,6BAA6B;AAExC,wBAAoB,EAAE,WAAW,6BAAM,WAAW,WAAW,KAAK,IAAI,CAAC;AAAA,EACzE;AAEA,OAAI,6BAAM,WAAW,YAAW,KAAK,QAAQ;AAC3C,eACE;AAAA,MAAC;AAAA;AAAA,QACC,YACE,yBAAC,UAAO,SAAS,iBAAiB,MAAK,KAAI,eAAW,yBAAC,iBAAK,GAAI,SAAQ,aACrE,wBAAc;AAAA,UACb,IAAI,QAAQ,wBAAwB;AAAA,UACpC,gBAAgB;AAAA,QAClB,CAAC,GACH;AAAA,QAEF,SAAS;AAAA,UACP,KAAK,cAAc,gBACf;AAAA,YACE,IAAI,QAAQ,yCAAyC;AAAA,YACrD,gBAAgB;AAAA,UAClB,IACA;AAAA,YACE,IAAI,QAAQ,mCAAmC;AAAA,YAC/C,gBAAgB;AAAA,UAClB;AAAA,QACN;AAAA,QACA,WAAS;AAAA,QACT,UAAM,yBAAC,gBAAe,OAAM,SAAQ;AAAA;AAAA,IACtC;AAAA,EAEJ;AAEA,aACE;AAAA,IAAC;AAAA;AAAA,MACC;AAAA,MACA,oBAAoB;AAAA,MACpB,WAAW;AAAA,MACX,aAAa;AAAA,MACb,cAAc,MAAM,YAAY,IAAI;AAAA,MACpC,WAAW,CAAC,sBAAsB;AAAA,MAElC;AAAA,sCAAC,YAAS,KAAI,MACX;AAAA;AAAA,gBACC,yBAAC,eAAY,QAAQ,IAClB,4BACC;AAAA,cAAC;AAAA;AAAA,gBACC,WAAS;AAAA,gBACT,MAAM;AAAA,gBACN;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA;AAAA;AAAA,YACF,GAEJ;AAAA,YACA,SAAS;AAAA,UACX;AAAA,cACA,yBAAC,mBAAgB,OAAc,UAAU,6BACtC,gBAAM,IAAI,CAAC,SAAS;AACnB,uBACE;AAAA,cAAC;AAAA;AAAA,gBAEC;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA;AAAA;AAAA,cANK,KAAK;AAAA,YAOZ;AAAA,UAEJ,CAAC,GACH;AAAA,WACF;AAAA,QAEC,UAAU,2BACT;AAAA,UAAC;AAAA;AAAA,YACC,QAAQ,YAAY,WAAW;AAAA,YAC/B,UAAM,yBAAC,iBAAK;AAAA,YACZ,SAAS;AAAA,YACT,OAAO,YAAY,YAAY;AAAA,YAE9B,wBAAc;AAAA,cACb,IAAI;AAAA,gBACF,4BAA4B,KAAK,cAAc,cAAc,cAAc,KAAK,IAAI;AAAA,cACtF;AAAA,cACA,gBAAgB;AAAA,YAClB,CAAC;AAAA;AAAA,QACH;AAAA,QAED,SAAS,2BACR;AAAA,UAAC;AAAA;AAAA,YACC,QAAQ,YAAY,WAAW;AAAA,YAC/B,UAAM,yBAAC,iBAAK;AAAA,YACZ,SAAS;AAAA,YACT,OAAO,qBAAqB,CAAC,YAAY,YAAY;AAAA,YAEpD,wBAAc;AAAA,cACb,IAAI,QAAQ,oCAAoC;AAAA,cAChD,gBAAgB;AAAA,YAClB,CAAC;AAAA;AAAA,QACH;AAAA;AAAA;AAAA,EAEJ;AAEJ;;;AmBjQA,IAAAC,gBAAqB;AAqGJ,IAAAC,uBAAA;AA1FjB,IAAM,gBAA8C;AAAA,EAClD,+BAA+B;AAAA,IAC7B;AAAA,MACE,QAAQ;AAAA,MACR,SAAS;AAAA,IACX;AAAA,EACF;AAAA,EACA,0BAA0B;AAAA,IACxB;AAAA,MACE,QAAQ;AAAA,MACR,SAAS;AAAA,IACX;AAAA,EACF;AAAA,EACA,2BAA2B;AAAA,IACzB;AAAA,MACE,QAAQ;AAAA,MACR,SAAS;AAAA,IACX;AAAA,EACF;AACF;AAEA,IAAM,gBAAgB,CAAC,SAAkC;AACvD,MAAI,KAAK,cAAc,eAAe;AACpC,QAAI,KAAK,SAAS,cAAc;AAC9B,aAAO,cAAc;AAAA,IACvB;AAEA,WAAO,cAAc;AAAA,EACvB;AAEA,SAAO,cAAc;AACvB;AAOA,IAAM,UAAU,CAAC,SAAkC;AACjD,UAAQ,KAAK,WAAW;AAAA,IACtB,KAAK;AACH,cAAQ,KAAK,MAAM;AAAA,QACjB,KAAK;AACH,iBAAO,iCAAiC,KAAK,GAAG;AAAA,QAClD,KAAK;AACH,iBAAO,qCAAqC,KAAK,GAAG;AAAA,MACxD;AAAA,IACF,KAAK;AACH,aAAO,+BAA+B,KAAK,GAAG;AAAA,EAClD;AACF;AAEA,IAAM,eAAe,GAAO,MAAM;AAAA;AAAA;AAI3B,IAAM,2BAAuB,oBAAK,CAAC,EAAE,UAAU,KAAK,MAAiC;AAC1F,QAAM,EAAE,cAAc,IAAI,QAAQ;AAClC,QAAM,WAAW,YAAY;AAC7B,QAAM,qBAAqB,cAAc,IAAI;AAE7C,QAAM,QAAQ,cAAc;AAAA,IAC1B,IAAI;AAAA,IACJ,gBAAgB;AAAA,EAClB,CAAC;AAED,QAAM,cAAc,MAAM;AACxB,QAAI,UAAU;AACZ,aAAO;AAAA,IACT;AAEA,UAAM,OAAO,QAAQ,IAAI;AAEzB,aAAS,IAAI;AAEb,WAAO;AAAA,EACT;AAEA,QAAM,EAAE,WAAW,eAAe,IAAI,QAAQ,kBAAkB;AAEhE,MAAI,WAAW;AACb,WAAO;AAAA,EACT;AAEA,MAAI,CAAC,eAAe,oBAAoB,CAAC,eAAe,oBAAoB;AAC1E,WAAO;AAAA,EACT;AAEA,aACE;AAAA,IAAC;AAAA;AAAA,MACC,eAAW,0BAAC,iBAAS;AAAA,MACrB,SAAQ;AAAA,MACR,SAAS;AAAA,MACT;AAAA,MAEC;AAAA;AAAA,EACH;AAEJ,CAAC;;;ApBvDY,IAAAC,uBAAA;AApCb,IAAM,sBAAsB,GAAO,QAAQ,MAAM;AAAA;AAAA;AAAA;AAAA;AAMjD,IAAM,WAAW,MAAM;AAxBvB;AAyBE,QAAM,EAAE,qBAAqB,cAAc,YAAY,UAAU,IAAI,eAAe;AACpF,QAAM,EAAE,cAAc,IAAI,QAAQ;AAClC,QAAM,EAAE,WAAW,IAAI,YAAY;AAEnC,QAAM,EAAE,gBAAgB,aAAa,IAAI,UAGtC;AAEH,QAAM,EAAE,8BAA8B,qBAAqB,sBAAsB,IAC/E,uBAAuB;AAEzB,QAAM,OAAO,iBACT,aAAa,cAAc,IAC3B,eACE,WAAW,YAAY,IACvB;AAEN,MAAI,WAAW;AACb,WAAO;AAAA,EACT;AAEA,MAAI,CAAC,MAAM;AACT,UAAM,mBAAmB,OAAO,OAAO,YAAY,EAChD,OAAO,CAAC,OAAO,GAAG,YAAY,QAAQ,CAAC,GAAG,MAAM,EAChD,IAAI,CAAC,OAAO,GAAG,GAAG,EAClB,KAAK;AAER,QAAI,iBAAiB,SAAS,GAAG;AAC/B,iBAAO,0BAAC,YAAS,IAAI,+CAA+C,iBAAiB,CAAC,CAAC,IAAI;AAAA,IAC7F;AAEA,eAAO,0BAAC,YAAS,IAAG,mEAAkE;AAAA,EACxF;AAEA,QAAM,eAAe,YAAY,SAAQ,6BAAM,YAAW;AAE1D,QAAM,YAAY,iBAAiB,gBAAgB;AAEnD,QAAM,UAAQ,kCAAM,SAAN,mBAAY,gBAAe;AAEzC,QAAM,UAAU,uBAAuB,CAAC;AAExC,QAAM,8BAA8B,CAAC,sBAA+B;AAClE,iCAA6B,EAAE,mBAAmB,WAAW,KAAK,IAAI,CAAC;AAAA,EACzE;AAEA,QAAM,SAAS,MAAM;AACnB,QAAI,UAAU,MAAM;AAClB,WAAI,6BAAM,UAAS,kBAAkB;AACnC,mBAAW,2BAA2B;AAAA,MACxC;AAEA,WAAI,6BAAM,UAAS,cAAc;AAC/B,mBAAW,0BAA0B;AAAA,MACvC;AAEA,4BAAsB;AAAA,QACpB,WAAW;AAAA,QACX;AAAA,QACA,WAAW,KAAK;AAAA,QAChB,MAAM,6BAAM;AAAA,MACd,CAAC;AAED;AAAA,IACF;AAEA,0BAAsB;AAAA,MACpB,WAAW;AAAA,MACX;AAAA,MACA,WAAW,KAAK;AAAA,IAClB,CAAC;AAAA,EACH;AAEA,QAAM,mBAAmB,cAAc;AAAA,IACrC,IAAI,QAAQ,wBAAwB;AAAA,IACpC,gBAAgB;AAAA,EAClB,CAAC;AAED,QAAM,uBAAuB,cAAc;AAAA,IACzC,IAAI,QAAQ,+BAA+B;AAAA,IAC3C,gBAAgB;AAAA,EAClB,CAAC;AAED,QAAM,YAAY,KAAK,WAAW;AAElC,QAAM,gBAAgB,2BACpB,2BAAC,QAAK,KAAK,GACT;AAAA;AAAA,MAAC;AAAA;AAAA,QAEC;AAAA,QACA,UAAU,KAAK,WAAW,SAAS;AAAA;AAAA,MAF/B;AAAA,IAGN;AAAA,QACA;AAAA,MAAC;AAAA;AAAA,QACC,eAAW,0BAAC,iBAAO;AAAA,QACnB,SAAQ;AAAA,QACR,SAAS;AAAA,QACT,UAAU,CAAC,WAAW;AAAA,QAErB,wBAAc;AAAA,UACb,IAAI;AAAA,UACJ,gBAAgB;AAAA,QAClB,CAAC;AAAA;AAAA,IACH;AAAA,QACA;AAAA,MAAC;AAAA;AAAA,QACC,eAAW,0BAAC,iBAAK;AAAA,QACjB,SAAQ;AAAA,QACR,UAAS;AAAA,QACT,SAAS,MAAM;AACb,8BAAoB,EAAE,WAAW,WAAW,KAAK,IAAI,CAAC;AAAA,QACxD;AAAA,QACA,UAAU;AAAA,QAET,eAAK,WAAW,WAAW,IAAI,mBAAmB;AAAA;AAAA,IACrD;AAAA,KACF;AAGF,aACE,4DACG;AAAA,qBACC,0BAAC,QAAK,YAAW,aAAY,gBAAgB,UAAU,SAAS,GAC9D,yCAAC,QAAK,KAAK,GACT;AAAA,oCAAC,iBAAY,MAAK,aAAY,QAAO,QAAO,OAAM,QAAO;AAAA,UACzD,0BAAC,cACE;AAAA,QACC;AAAA,UACE,IAAI,QAAQ,uBAAuB;AAAA,UACnC,gBAAgB;AAAA,QAClB;AAAA,QACA;AAAA,UACE,MAAM,KAAK,cAAc,gBAAgB,iBAAiB;AAAA,QAC5D;AAAA,MACF,GACF;AAAA,OACF,GACF;AAAA,QAEF,0BAAC,uBAAoB,IAAG,SAAQ,eAA8B,WAAO,mBAAAC,SAAW,KAAK,GAAG;AAAA,QACxF,0BAAC,QAAQ,SAAR,EACC;AAAA,MAAC;AAAA;AAAA,QACC,YAAW;AAAA,QACX,QAAO;AAAA,QACP,WAAS;AAAA,QACT,UAAS;AAAA,QACT,aAAY;AAAA,QAEZ,wCAAC,QAAK,MAAY,kBAAkB,6BAA6B,QAAM,MAAC;AAAA;AAAA,IAC1E,GACF;AAAA,KACF;AAEJ;AAEA,IAAO,mBAAQ;",
  "names": ["import_upperFirst", "import_react", "restrictToVerticalAxis", "transform", "x", "import_react", "import_get", "import_jsx_runtime", "get", "import_jsx_runtime", "import_get", "import_jsx_runtime", "import_jsx_runtime", "get", "import_jsx_runtime", "import_jsx_runtime", "get", "Link", "upperFirst", "import_jsx_runtime", "import_jsx_runtime", "import_react", "import_jsx_runtime", "import_jsx_runtime", "upperFirst"]
}
