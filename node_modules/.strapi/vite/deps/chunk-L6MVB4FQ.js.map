{
  "version": 3,
  "sources": ["../../../../../packages/core/admin/admin/src/hooks/useFetchClient.ts"],
  "sourcesContent": ["import * as React from 'react';\r\n\r\nimport { getFetchClient } from '../utils/getFetchClient';\r\n\r\n/**\r\n * @public\r\n * @description This is an abstraction around the native fetch exposed by a hook. It provides a simple interface to handle API calls\r\n * to the Strapi backend.\r\n * It handles request cancellations inside the hook with an {@link https://developer.mozilla.org/en-US/docs/Web/API/AbortController} AbortController.\r\n * This is typically triggered when the component is unmounted so all the requests that it is currently making are aborted.\r\n * The expected URL style includes either a protocol (such as HTTP or HTTPS) or a relative URL. The URLs with domain and path but not protocol are not allowed (ex: `www.example.com`).\r\n * @example\r\n * ```tsx\r\n * import * as React from 'react';\r\n * import { useFetchClient } from '@strapi/admin/admin';\r\n *\r\n * const MyComponent = () => {\r\n *   const [items, setItems] = React.useState([]);\r\n *   const { get } = useFetchClient();\r\n *   const requestURL = \"/some-endpoint\";\r\n *\r\n *   const handleGetData = async () => {\r\n *     const { data } = await get(requestURL);\r\n *     setItems(data.items);\r\n *   };\r\n *\r\n *   return (\r\n *    <div>\r\n *      <div>\r\n *       {\r\n *         items && items.map(item => <h2 key={item.uuid}>{item.name}</h2>))\r\n *       }\r\n *     </div>\r\n *    </div>\r\n *   );\r\n * };\r\n * ```\r\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/AbortController} AbortController.\r\n */\r\nconst useFetchClient = () => {\r\n  const controller = React.useRef<AbortController | null>(null);\r\n\r\n  if (controller.current === null) {\r\n    controller.current = new AbortController();\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    return () => {\r\n      controller.current!.abort();\r\n    };\r\n  }, []);\r\n\r\n  return React.useMemo(\r\n    () =>\r\n      getFetchClient({\r\n        signal: controller.current!.signal,\r\n      }),\r\n    []\r\n  );\r\n};\r\n\r\nexport { useFetchClient };\r\n"],
  "mappings": ";;;;;;;;;;;AAAA,YAAuB;AAuCvB,IAAM,iBAAiB,MAAM;AAC3B,QAAM,aAAmB,aAA+B,IAAI;AAE5D,MAAI,WAAW,YAAY,MAAM;AAC/B,eAAW,UAAU,IAAI,gBAAgB;AAAA,EAC3C;AAEA,EAAM,gBAAU,MAAM;AACpB,WAAO,MAAM;AACX,iBAAW,QAAS,MAAM;AAAA,IAC5B;AAAA,EACF,GAAG,CAAC,CAAC;AAEL,SAAa;AAAA,IACX,MACE,eAAe;AAAA,MACb,QAAQ,WAAW,QAAS;AAAA,IAC9B,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AACF;",
  "names": []
}
