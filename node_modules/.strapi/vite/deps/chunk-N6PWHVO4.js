import {
  reducer
} from "./chunk-TN6RTBGG.js";
import {
  DEFAULT_BULK_ACTIONS,
  DEFAULT_TABLE_ROW_ACTIONS
} from "./chunk-ALQKKCCU.js";
import {
  ActionsPanel,
  DEFAULT_ACTIONS,
  DEFAULT_HEADER_ACTIONS,
  INJECTION_ZONES,
  PLUGIN_ID,
  require_prism,
  routes,
  useGetPreviewUrlQuery
} from "./chunk-XKCYZSU4.js";
import {
  prefixPluginTranslations
} from "./chunk-J7J5CC52.js";
import {
  useForm
} from "./chunk-ZRXSF5PI.js";
import {
  useTracking
} from "./chunk-DHQERSO6.js";
import {
  useQueryParams
} from "./chunk-YQN4TQZU.js";
import {
  Link,
  useLocation,
  useNavigate
} from "./chunk-QOSJGLB6.js";
import {
  combineReducers
} from "./chunk-VJHHRLHY.js";
import {
  Box,
  Button,
  TooltipImpl
} from "./chunk-3AUSDG4O.js";
import {
  ForwardRef$1d,
  ForwardRef$1z,
  ForwardRef$3F,
  ForwardRef$4L,
  ForwardRef$4x
} from "./chunk-F5I3ZVMF.js";
import {
  useIntl
} from "./chunk-2BDXRWHF.js";
import {
  require_jsx_runtime
} from "./chunk-GAPF2DTI.js";
import {
  require_lib
} from "./chunk-IV5CMKTD.js";
import {
  __glob,
  __publicField,
  __toESM
} from "./chunk-X6GFWOGJ.js";

// ../packages/core/content-manager/admin/src/content-manager.ts
var ContentManagerPlugin = class {
  constructor() {
    /**
     * The following properties are the stored ones provided by any plugins registering with
     * the content-manager. The function calls however, need to be called at runtime in the
     * application, so instead we collate them and run them later with the complete list incl.
     * ones already registered & the context of the view.
     */
    __publicField(this, "bulkActions", [...DEFAULT_BULK_ACTIONS]);
    __publicField(this, "documentActions", [
      ...DEFAULT_ACTIONS,
      ...DEFAULT_TABLE_ROW_ACTIONS,
      ...DEFAULT_HEADER_ACTIONS
    ]);
    __publicField(this, "editViewSidePanels", [ActionsPanel]);
    __publicField(this, "headerActions", []);
  }
  addEditViewSidePanel(panels) {
    if (Array.isArray(panels)) {
      this.editViewSidePanels = [...this.editViewSidePanels, ...panels];
    } else if (typeof panels === "function") {
      this.editViewSidePanels = panels(this.editViewSidePanels);
    } else {
      throw new Error(
        `Expected the \`panels\` passed to \`addEditViewSidePanel\` to be an array or a function, but received ${getPrintableType(
          panels
        )}`
      );
    }
  }
  addDocumentAction(actions) {
    if (Array.isArray(actions)) {
      this.documentActions = [...this.documentActions, ...actions];
    } else if (typeof actions === "function") {
      this.documentActions = actions(this.documentActions);
    } else {
      throw new Error(
        `Expected the \`actions\` passed to \`addDocumentAction\` to be an array or a function, but received ${getPrintableType(
          actions
        )}`
      );
    }
  }
  addDocumentHeaderAction(actions) {
    if (Array.isArray(actions)) {
      this.headerActions = [...this.headerActions, ...actions];
    } else if (typeof actions === "function") {
      this.headerActions = actions(this.headerActions);
    } else {
      throw new Error(
        `Expected the \`actions\` passed to \`addDocumentHeaderAction\` to be an array or a function, but received ${getPrintableType(
          actions
        )}`
      );
    }
  }
  addBulkAction(actions) {
    if (Array.isArray(actions)) {
      this.bulkActions = [...this.bulkActions, ...actions];
    } else if (typeof actions === "function") {
      this.bulkActions = actions(this.bulkActions);
    } else {
      throw new Error(
        `Expected the \`actions\` passed to \`addBulkAction\` to be an array or a function, but received ${getPrintableType(
          actions
        )}`
      );
    }
  }
  get config() {
    return {
      id: PLUGIN_ID,
      name: "Content Manager",
      injectionZones: INJECTION_ZONES,
      apis: {
        addBulkAction: this.addBulkAction.bind(this),
        addDocumentAction: this.addDocumentAction.bind(this),
        addDocumentHeaderAction: this.addDocumentHeaderAction.bind(this),
        addEditViewSidePanel: this.addEditViewSidePanel.bind(this),
        getBulkActions: () => this.bulkActions,
        getDocumentActions: (position) => {
          if (position) {
            return this.documentActions.filter((action) => {
              return action.position == void 0 || [action.position].flat().includes(position);
            });
          }
          return this.documentActions;
        },
        getEditViewSidePanels: () => this.editViewSidePanels,
        getHeaderActions: () => this.headerActions
      }
    };
  }
};
var getPrintableType = (value) => {
  const nativeType = typeof value;
  if (nativeType === "object") {
    if (value === null) return "null";
    if (Array.isArray(value)) return "array";
    if (value instanceof Object && value.constructor.name !== "Object") {
      return value.constructor.name;
    }
  }
  return nativeType;
};

// ../packages/core/content-manager/admin/src/history/components/HistoryAction.tsx
var import_qs = __toESM(require_lib());
var import_jsx_runtime = __toESM(require_jsx_runtime());
var HistoryAction = ({ model, document }) => {
  const { formatMessage } = useIntl();
  const [{ query }] = useQueryParams();
  const navigate = useNavigate();
  const { trackUsage } = useTracking();
  const { pathname } = useLocation();
  const pluginsQueryParams = (0, import_qs.stringify)({ plugins: query.plugins }, { encode: false });
  if (!window.strapi.features.isEnabled("cms-content-history")) {
    return null;
  }
  const handleOnClick = () => {
    const destination = { pathname: "history", search: pluginsQueryParams };
    trackUsage("willNavigate", {
      from: pathname,
      to: `${pathname}/${destination.pathname}`
    });
    navigate(destination);
  };
  return {
    icon: (0, import_jsx_runtime.jsx)(ForwardRef$4x, {}),
    label: formatMessage({
      id: "content-manager.history.document-action",
      defaultMessage: "Content History"
    }),
    onClick: handleOnClick,
    disabled: (
      /**
       * The user is creating a new document.
       * It hasn't been saved yet, so there's no history to go to
       */
      !document || /**
       * The document has been created but the current dimension has never been saved.
       * For example, the user is creating a new locale in an existing document,
       * so there's no history for the document in that locale
       */
      !document.id || /**
       * History is only available for content types created by the user.
       * These have the `api::` prefix, as opposed to the ones created by Strapi or plugins,
       * which start with `admin::` or `plugin::`
       */
      !model.startsWith("api::")
    ),
    position: "header"
  };
};
HistoryAction.type = "history";
HistoryAction.position = "header";

// ../packages/core/content-manager/admin/src/history/index.ts
var historyAdmin = {
  bootstrap(app) {
    const { addDocumentAction } = app.getPlugin("content-manager").apis;
    addDocumentAction((actions) => {
      const indexOfDeleteAction = actions.findIndex((action) => action.type === "delete");
      actions.splice(indexOfDeleteAction, 0, HistoryAction);
      return actions;
    });
  }
};

// ../packages/core/content-manager/admin/src/modules/reducers.ts
var reducer2 = combineReducers({
  app: reducer
});

// ../packages/core/content-manager/admin/src/preview/components/PreviewSidePanel.tsx
var import_qs2 = __toESM(require_lib());
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var ConditionalTooltip = ({ isShown, label, children }) => {
  if (isShown) {
    return (0, import_jsx_runtime2.jsx)(TooltipImpl, { label, children });
  }
  return children;
};
var PreviewSidePanel = ({ model, documentId, document }) => {
  var _a;
  const { formatMessage } = useIntl();
  const { trackUsage } = useTracking();
  const { pathname } = useLocation();
  const [{ query }] = useQueryParams();
  const isModified = useForm("PreviewSidePanel", (state) => state.modified);
  const { data, error } = useGetPreviewUrlQuery({
    params: {
      contentType: model
    },
    query: {
      documentId,
      locale: document == null ? void 0 : document.locale,
      status: document == null ? void 0 : document.status
    }
  });
  if (!((_a = data == null ? void 0 : data.data) == null ? void 0 : _a.url) || error) {
    return null;
  }
  const trackNavigation = () => {
    const destinationPathname = pathname.replace(/\/$/, "") + "/preview";
    trackUsage("willNavigate", { from: pathname, to: destinationPathname });
  };
  return {
    title: formatMessage({ id: "content-manager.preview.panel.title", defaultMessage: "Preview" }),
    content: (0, import_jsx_runtime2.jsx)(
      ConditionalTooltip,
      {
        label: formatMessage({
          id: "content-manager.preview.panel.button-disabled-tooltip",
          defaultMessage: "Please save to open the preview"
        }),
        isShown: isModified,
        children: (0, import_jsx_runtime2.jsx)(Box, { cursor: "not-allowed", width: "100%", children: (0, import_jsx_runtime2.jsx)(
          Button,
          {
            variant: "tertiary",
            tag: Link,
            to: { pathname: "preview", search: (0, import_qs2.stringify)(query, { encode: false }) },
            onClick: trackNavigation,
            width: "100%",
            disabled: isModified,
            pointerEvents: isModified ? "none" : void 0,
            tabIndex: isModified ? -1 : void 0,
            children: formatMessage({
              id: "content-manager.preview.panel.button",
              defaultMessage: "Open preview"
            })
          }
        ) })
      }
    )
  };
};

// ../packages/core/content-manager/admin/src/preview/index.ts
var previewAdmin = {
  bootstrap(app) {
    const contentManagerPluginApis = app.getPlugin("content-manager").apis;
    contentManagerPluginApis.addEditViewSidePanel([PreviewSidePanel]);
  }
};

// ../packages/core/content-manager/admin/src/index.ts
var import_prismjs = __toESM(require_prism());

// import("./translations/**/*.json") in ../packages/core/content-manager/admin/src/index.ts
var globImport_translations_json = __glob({
  "./translations/ar.json": () => import("./ar-2R43F5JA.js"),
  "./translations/ca.json": () => import("./ca-GVJXXU2V.js"),
  "./translations/cs.json": () => import("./cs-2XZQGJOB.js"),
  "./translations/de.json": () => import("./de-BQFF6DJ7.js"),
  "./translations/en.json": () => import("./en-SJ72FEBA.js"),
  "./translations/es.json": () => import("./es-YLZOCTCV.js"),
  "./translations/eu.json": () => import("./eu-GK7W5YVL.js"),
  "./translations/fr.json": () => import("./fr-SG6TB5Q6.js"),
  "./translations/gu.json": () => import("./gu-WM3PV5GH.js"),
  "./translations/hi.json": () => import("./hi-TDNHOH7A.js"),
  "./translations/hu.json": () => import("./hu-OKFAY5SR.js"),
  "./translations/id.json": () => import("./id-TEXHLKOR.js"),
  "./translations/it.json": () => import("./it-B62WQ6HS.js"),
  "./translations/ja.json": () => import("./ja-N3KAB64D.js"),
  "./translations/ko.json": () => import("./ko-XPAYD6J3.js"),
  "./translations/ml.json": () => import("./ml-AOJ2OILW.js"),
  "./translations/ms.json": () => import("./ms-ZSS7KB6B.js"),
  "./translations/nl.json": () => import("./nl-YLB76NAV.js"),
  "./translations/pl.json": () => import("./pl-YYNOTXGM.js"),
  "./translations/pt-BR.json": () => import("./pt-BR-A6P6ENW4.js"),
  "./translations/pt.json": () => import("./pt-DMPLS2PT.js"),
  "./translations/ru.json": () => import("./ru-MEJPY53A.js"),
  "./translations/sa.json": () => import("./sa-NKDKDVP7.js"),
  "./translations/sk.json": () => import("./sk-WJP25BYX.js"),
  "./translations/sv.json": () => import("./sv-KJHDIVJR.js"),
  "./translations/th.json": () => import("./th-PDNXYJRF.js"),
  "./translations/tr.json": () => import("./tr-A6QDSSRZ.js"),
  "./translations/uk.json": () => import("./uk-OHPCZD42.js"),
  "./translations/vi.json": () => import("./vi-EQB5XYXS.js"),
  "./translations/zh-Hans.json": () => import("./zh-Hans-QXQSYU5H.js"),
  "./translations/zh.json": () => import("./zh-C5GYPMMR.js")
});

// ../packages/core/content-manager/admin/src/index.ts
var src_default = {
  register(app) {
    const cm = new ContentManagerPlugin();
    app.addReducers({
      [PLUGIN_ID]: reducer2
    });
    app.addMenuLink({
      to: PLUGIN_ID,
      icon: ForwardRef$3F,
      intlLabel: {
        id: `content-manager.plugin.name`,
        defaultMessage: "Content Manager"
      },
      permissions: [],
      position: 1
    });
    app.router.addRoute({
      path: "content-manager/*",
      lazy: async () => {
        const { Layout } = await import("./layout-HAXLTBTG.js");
        return {
          Component: Layout
        };
      },
      children: routes
    });
    app.registerPlugin(cm.config);
    app.widgets.register([
      {
        icon: ForwardRef$1d,
        title: {
          id: `${PLUGIN_ID}.widget.chart-entries.title`,
          defaultMessage: "Entries"
        },
        component: async () => {
          const { ChartEntriesWidget } = await import("./Widgets-FZ5DURUZ.js");
          return ChartEntriesWidget;
        },
        pluginId: PLUGIN_ID,
        id: "chart-entries",
        permissions: [{ action: "plugin::content-manager.explorer.read" }]
      },
      {
        icon: ForwardRef$1z,
        title: {
          id: `${PLUGIN_ID}.widget.last-edited.title`,
          defaultMessage: "Last edited entries"
        },
        component: async () => {
          const { LastEditedWidget } = await import("./Widgets-FZ5DURUZ.js");
          return LastEditedWidget;
        },
        pluginId: PLUGIN_ID,
        id: "last-edited-entries",
        permissions: [{ action: "plugin::content-manager.explorer.read" }]
      },
      {
        icon: ForwardRef$4L,
        title: {
          id: `${PLUGIN_ID}.widget.last-published.title`,
          defaultMessage: "Last published entries"
        },
        component: async () => {
          const { LastPublishedWidget } = await import("./Widgets-FZ5DURUZ.js");
          return LastPublishedWidget;
        },
        pluginId: PLUGIN_ID,
        id: "last-published-entries",
        permissions: [{ action: "plugin::content-manager.explorer.read" }]
      }
    ]);
  },
  bootstrap(app) {
    if (typeof historyAdmin.bootstrap === "function") {
      historyAdmin.bootstrap(app);
    }
    if (typeof previewAdmin.bootstrap === "function") {
      previewAdmin.bootstrap(app);
    }
  },
  async registerTrads({ locales }) {
    const importedTrads = await Promise.all(
      locales.map((locale) => {
        return globImport_translations_json(`./translations/${locale}.json`).then(({ default: data }) => {
          return {
            data: prefixPluginTranslations(data, PLUGIN_ID),
            locale
          };
        }).catch(() => {
          return {
            data: {},
            locale
          };
        });
      })
    );
    return Promise.resolve(importedTrads);
  }
};

export {
  src_default
};
//# sourceMappingURL=chunk-N6PWHVO4.js.map
