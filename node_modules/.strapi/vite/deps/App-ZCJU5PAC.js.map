{
  "version": 3,
  "sources": ["../../../../../packages/core/content-releases/admin/src/pages/ReleaseDetailsPage.tsx", "../../../../../packages/core/content-releases/admin/src/components/EntryValidationPopover.tsx", "../../../../../packages/core/content-releases/admin/src/components/RelativeTime.tsx", "../../../../../packages/core/content-releases/admin/src/components/ReleaseModal.tsx", "../../../../../packages/core/content-releases/admin/src/store/hooks.ts", "../../../../../packages/core/content-releases/admin/src/utils/api.ts", "../../../../../packages/core/content-releases/admin/src/pages/ReleasesPage.tsx", "../../../../../packages/core/content-releases/admin/src/pages/App.tsx"],
  "sourcesContent": ["import * as React from 'react';\r\n\r\nimport {\r\n  Page,\r\n  Pagination,\r\n  Table,\r\n  BackButton,\r\n  ConfirmDialog,\r\n  useTracking,\r\n  useAPIErrorHandler,\r\n  useNotification,\r\n  useQueryParams,\r\n  useRBAC,\r\n  isFetchError,\r\n  useStrapiApp,\r\n  Layouts,\r\n} from '@strapi/admin/strapi-admin';\r\nimport {\r\n  Button,\r\n  Flex,\r\n  Main,\r\n  Tr,\r\n  Td,\r\n  Typography,\r\n  Badge,\r\n  SingleSelect,\r\n  SingleSelectOption,\r\n  EmptyStateLayout,\r\n  LinkButton,\r\n  Dialog,\r\n  SimpleMenu,\r\n  Menu,\r\n} from '@strapi/design-system';\r\nimport { More, Pencil, Trash } from '@strapi/icons';\r\nimport { EmptyDocuments } from '@strapi/icons/symbols';\r\nimport format from 'date-fns/format';\r\nimport { utcToZonedTime } from 'date-fns-tz';\r\nimport { useIntl } from 'react-intl';\r\nimport { useParams, useNavigate, Link as ReactRouterLink, Navigate } from 'react-router-dom';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { EntryValidationPopover } from '../components/EntryValidationPopover';\r\nimport { RelativeTime } from '../components/RelativeTime';\r\nimport { ReleaseActionMenu } from '../components/ReleaseActionMenu';\r\nimport { ReleaseActionOptions } from '../components/ReleaseActionOptions';\r\nimport { ReleaseModal, FormValues } from '../components/ReleaseModal';\r\nimport { PERMISSIONS } from '../constants';\r\nimport {\r\n  GetReleaseActionsQueryParams,\r\n  useGetReleaseActionsQuery,\r\n  useGetReleaseQuery,\r\n  useGetReleaseSettingsQuery,\r\n  useUpdateReleaseMutation,\r\n  useUpdateReleaseActionMutation,\r\n  usePublishReleaseMutation,\r\n  useDeleteReleaseMutation,\r\n  releaseApi,\r\n} from '../services/release';\r\nimport { useTypedDispatch } from '../store/hooks';\r\nimport { isBaseQueryError } from '../utils/api';\r\nimport { getTimezoneOffset } from '../utils/time';\r\n\r\nimport { getBadgeProps } from './ReleasesPage';\r\n\r\nimport type {\r\n  ReleaseAction,\r\n  ReleaseActionGroupBy,\r\n} from '../../../shared/contracts/release-actions';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ReleaseDetailsLayout\r\n * -----------------------------------------------------------------------------------------------*/\r\nconst ReleaseInfoWrapper = styled(Flex)`\r\n  align-self: stretch;\r\n  border-bottom-right-radius: ${({ theme }) => theme.borderRadius};\r\n  border-bottom-left-radius: ${({ theme }) => theme.borderRadius};\r\n  border-top: 1px solid ${({ theme }) => theme.colors.neutral150};\r\n`;\r\n\r\ninterface ReleaseDetailsLayoutProps {\r\n  toggleEditReleaseModal: () => void;\r\n  toggleWarningSubmit: () => void;\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst ReleaseDetailsLayout = ({\r\n  toggleEditReleaseModal,\r\n  toggleWarningSubmit,\r\n  children,\r\n}: ReleaseDetailsLayoutProps) => {\r\n  const { formatMessage, formatDate, formatTime } = useIntl();\r\n  const { releaseId } = useParams<{ releaseId: string }>();\r\n  const {\r\n    data,\r\n    isLoading: isLoadingDetails,\r\n    error,\r\n  } = useGetReleaseQuery(\r\n    { id: releaseId! },\r\n    {\r\n      skip: !releaseId,\r\n    }\r\n  );\r\n  const [publishRelease, { isLoading: isPublishing }] = usePublishReleaseMutation();\r\n  const { toggleNotification } = useNotification();\r\n  const { formatAPIError } = useAPIErrorHandler();\r\n  const { allowedActions } = useRBAC(PERMISSIONS);\r\n  const { canUpdate, canDelete, canPublish } = allowedActions;\r\n  const dispatch = useTypedDispatch();\r\n  const { trackUsage } = useTracking();\r\n\r\n  const release = data?.data;\r\n\r\n  const handlePublishRelease = (id: string) => async () => {\r\n    const response = await publishRelease({ id });\r\n\r\n    if ('data' in response) {\r\n      // When the response returns an object with 'data', handle success\r\n      toggleNotification({\r\n        type: 'success',\r\n        message: formatMessage({\r\n          id: 'content-releases.pages.ReleaseDetails.publish-notification-success',\r\n          defaultMessage: 'Release was published successfully.',\r\n        }),\r\n      });\r\n\r\n      const { totalEntries, totalPublishedEntries, totalUnpublishedEntries } = response.data.meta;\r\n\r\n      trackUsage('didPublishRelease', {\r\n        totalEntries,\r\n        totalPublishedEntries,\r\n        totalUnpublishedEntries,\r\n      });\r\n    } else if (isFetchError(response.error)) {\r\n      // When the response returns an object with 'error', handle fetch error\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatAPIError(response.error),\r\n      });\r\n    } else {\r\n      // Otherwise, the response returns an object with 'error', handle a generic error\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleRefresh = () => {\r\n    dispatch(\r\n      releaseApi.util.invalidateTags([\r\n        { type: 'ReleaseAction', id: 'LIST' },\r\n        { type: 'Release', id: releaseId },\r\n      ])\r\n    );\r\n  };\r\n\r\n  const getCreatedByUser = () => {\r\n    if (!release?.createdBy) {\r\n      return null;\r\n    }\r\n\r\n    // Favor the username\r\n    if (release.createdBy.username) {\r\n      return release.createdBy.username;\r\n    }\r\n\r\n    // Firstname may not exist if created with SSO\r\n    if (release.createdBy.firstname) {\r\n      return `${release.createdBy.firstname} ${release.createdBy.lastname || ''}`.trim();\r\n    }\r\n\r\n    // All users must have at least an email\r\n    return release.createdBy.email;\r\n  };\r\n\r\n  if (isLoadingDetails) {\r\n    return <Page.Loading />;\r\n  }\r\n\r\n  if ((isBaseQueryError(error) && 'code' in error) || !release) {\r\n    return (\r\n      <Navigate\r\n        to=\"..\"\r\n        state={{\r\n          errors: [\r\n            {\r\n              // @ts-expect-error â€“ TODO: fix this weird error flow\r\n              code: error?.code,\r\n            },\r\n          ],\r\n        }}\r\n      />\r\n    );\r\n  }\r\n\r\n  const totalEntries = release.actions.meta.count || 0;\r\n  const hasCreatedByUser = Boolean(getCreatedByUser());\r\n\r\n  const isScheduled = release.scheduledAt && release.timezone;\r\n  const numberOfEntriesText = formatMessage(\r\n    {\r\n      id: 'content-releases.pages.Details.header-subtitle',\r\n      defaultMessage: '{number, plural, =0 {No entries} one {# entry} other {# entries}}',\r\n    },\r\n    { number: totalEntries }\r\n  );\r\n  const scheduledText = isScheduled\r\n    ? formatMessage(\r\n        {\r\n          id: 'content-releases.pages.ReleaseDetails.header-subtitle.scheduled',\r\n          defaultMessage: 'Scheduled for {date} at {time} ({offset})',\r\n        },\r\n        {\r\n          date: formatDate(new Date(release.scheduledAt!), {\r\n            weekday: 'long',\r\n            day: 'numeric',\r\n            month: 'long',\r\n            year: 'numeric',\r\n            timeZone: release.timezone!,\r\n          }),\r\n          time: formatTime(new Date(release.scheduledAt!), {\r\n            timeZone: release.timezone!,\r\n            hourCycle: 'h23',\r\n          }),\r\n          offset: getTimezoneOffset(release.timezone!, new Date(release.scheduledAt!)),\r\n        }\r\n      )\r\n    : '';\r\n\r\n  return (\r\n    <Main aria-busy={isLoadingDetails}>\r\n      <Layouts.Header\r\n        title={release.name}\r\n        subtitle={\r\n          <Flex gap={2} lineHeight={6}>\r\n            <Typography textColor=\"neutral600\" variant=\"epsilon\">\r\n              {numberOfEntriesText + (isScheduled ? ` - ${scheduledText}` : '')}\r\n            </Typography>\r\n            <Badge {...getBadgeProps(release.status)}>{release.status}</Badge>\r\n          </Flex>\r\n        }\r\n        navigationAction={<BackButton fallback=\"..\" />}\r\n        primaryAction={\r\n          !release.releasedAt && (\r\n            <Flex gap={2}>\r\n              <SimpleMenuButton\r\n                label={<More />}\r\n                variant=\"tertiary\"\r\n                endIcon={null}\r\n                paddingLeft=\"7px\"\r\n                paddingRight=\"7px\"\r\n                aria-label={formatMessage({\r\n                  id: 'content-releases.header.actions.open-release-actions',\r\n                  defaultMessage: 'Release edit and delete menu',\r\n                })}\r\n                popoverPlacement=\"bottom-end\"\r\n              >\r\n                <Menu.Item\r\n                  disabled={!canUpdate}\r\n                  onSelect={toggleEditReleaseModal}\r\n                  startIcon={<Pencil />}\r\n                >\r\n                  {formatMessage({\r\n                    id: 'content-releases.header.actions.edit',\r\n                    defaultMessage: 'Edit',\r\n                  })}\r\n                </Menu.Item>\r\n                <Menu.Item\r\n                  disabled={!canDelete}\r\n                  onSelect={toggleWarningSubmit}\r\n                  variant=\"danger\"\r\n                  startIcon={<Trash />}\r\n                >\r\n                  {formatMessage({\r\n                    id: 'content-releases.header.actions.delete',\r\n                    defaultMessage: 'Delete',\r\n                  })}\r\n                </Menu.Item>\r\n                <ReleaseInfoWrapper\r\n                  direction=\"column\"\r\n                  justifyContent=\"center\"\r\n                  alignItems=\"flex-start\"\r\n                  gap={1}\r\n                  padding={4}\r\n                >\r\n                  <Typography variant=\"pi\" fontWeight=\"bold\">\r\n                    {formatMessage({\r\n                      id: 'content-releases.header.actions.created',\r\n                      defaultMessage: 'Created',\r\n                    })}\r\n                  </Typography>\r\n                  <Typography variant=\"pi\" color=\"neutral300\">\r\n                    <RelativeTime timestamp={new Date(release.createdAt)} />\r\n                    {formatMessage(\r\n                      {\r\n                        id: 'content-releases.header.actions.created.description',\r\n                        defaultMessage:\r\n                          '{hasCreatedByUser, select, true { by {createdBy}} other { by deleted user}}',\r\n                      },\r\n                      { createdBy: getCreatedByUser(), hasCreatedByUser }\r\n                    )}\r\n                  </Typography>\r\n                </ReleaseInfoWrapper>\r\n              </SimpleMenuButton>\r\n              <Button size=\"S\" variant=\"tertiary\" onClick={handleRefresh}>\r\n                {formatMessage({\r\n                  id: 'content-releases.header.actions.refresh',\r\n                  defaultMessage: 'Refresh',\r\n                })}\r\n              </Button>\r\n              {canPublish ? (\r\n                <Button\r\n                  size=\"S\"\r\n                  variant=\"default\"\r\n                  onClick={handlePublishRelease(release.id.toString())}\r\n                  loading={isPublishing}\r\n                  disabled={release.actions.meta.count === 0}\r\n                >\r\n                  {formatMessage({\r\n                    id: 'content-releases.header.actions.publish',\r\n                    defaultMessage: 'Publish',\r\n                  })}\r\n                </Button>\r\n              ) : null}\r\n            </Flex>\r\n          )\r\n        }\r\n      />\r\n      {children}\r\n    </Main>\r\n  );\r\n};\r\n\r\nconst SimpleMenuButton = styled(SimpleMenu)`\r\n  & > span {\r\n    display: flex;\r\n  }\r\n`;\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ReleaseDetailsBody\r\n * -----------------------------------------------------------------------------------------------*/\r\nconst GROUP_BY_OPTIONS = ['contentType', 'locale', 'action'] as const;\r\nconst GROUP_BY_OPTIONS_NO_LOCALE = ['contentType', 'action'] as const;\r\nconst getGroupByOptionLabel = (value: (typeof GROUP_BY_OPTIONS)[number]) => {\r\n  if (value === 'locale') {\r\n    return {\r\n      id: 'content-releases.pages.ReleaseDetails.groupBy.option.locales',\r\n      defaultMessage: 'Locales',\r\n    };\r\n  }\r\n\r\n  if (value === 'action') {\r\n    return {\r\n      id: 'content-releases.pages.ReleaseDetails.groupBy.option.actions',\r\n      defaultMessage: 'Actions',\r\n    };\r\n  }\r\n\r\n  return {\r\n    id: 'content-releases.pages.ReleaseDetails.groupBy.option.content-type',\r\n    defaultMessage: 'Content-Types',\r\n  };\r\n};\r\n\r\ninterface ReleaseDetailsBodyProps {\r\n  releaseId: string;\r\n}\r\n\r\nconst ReleaseDetailsBody = ({ releaseId }: ReleaseDetailsBodyProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const [{ query }, setQuery] = useQueryParams<GetReleaseActionsQueryParams>();\r\n  const { toggleNotification } = useNotification();\r\n  const { formatAPIError } = useAPIErrorHandler();\r\n  const {\r\n    data: releaseData,\r\n    isLoading: isReleaseLoading,\r\n    error: releaseError,\r\n  } = useGetReleaseQuery({ id: releaseId });\r\n  const {\r\n    allowedActions: { canUpdate },\r\n  } = useRBAC(PERMISSIONS);\r\n  const runHookWaterfall = useStrapiApp('ReleaseDetailsPage', (state) => state.runHookWaterfall);\r\n\r\n  // TODO: Migrated displayedHeader to v5\r\n  const { displayedHeaders, hasI18nEnabled }: { displayedHeaders: any; hasI18nEnabled: boolean } =\r\n    runHookWaterfall('ContentReleases/pages/ReleaseDetails/add-locale-in-releases', {\r\n      displayedHeaders: [\r\n        {\r\n          label: {\r\n            id: 'content-releases.page.ReleaseDetails.table.header.label.name',\r\n            defaultMessage: 'name',\r\n          },\r\n          name: 'name',\r\n        },\r\n      ],\r\n      hasI18nEnabled: false,\r\n    });\r\n\r\n  const release = releaseData?.data;\r\n  const selectedGroupBy = query?.groupBy || 'contentType';\r\n\r\n  const {\r\n    isLoading,\r\n    isFetching,\r\n    isError,\r\n    data,\r\n    error: releaseActionsError,\r\n  } = useGetReleaseActionsQuery({\r\n    ...query,\r\n    releaseId,\r\n  });\r\n\r\n  const [updateReleaseAction] = useUpdateReleaseActionMutation();\r\n\r\n  const handleChangeType = async (\r\n    e: React.ChangeEvent<HTMLInputElement>,\r\n    actionId: ReleaseAction['id'],\r\n    actionPath: [string, number]\r\n  ) => {\r\n    const response = await updateReleaseAction({\r\n      params: {\r\n        releaseId,\r\n        actionId,\r\n      },\r\n      body: {\r\n        type: e.target.value as ReleaseAction['type'],\r\n      },\r\n      query, // We are passing the query params to make optimistic updates\r\n      actionPath, // We are passing the action path to found the position in the cache of the action for optimistic updates\r\n    });\r\n\r\n    if ('error' in response) {\r\n      if (isFetchError(response.error)) {\r\n        // When the response returns an object with 'error', handle fetch error\r\n        toggleNotification({\r\n          type: 'danger',\r\n          message: formatAPIError(response.error),\r\n        });\r\n      } else {\r\n        // Otherwise, the response returns an object with 'error', handle a generic error\r\n        toggleNotification({\r\n          type: 'danger',\r\n          message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  if (isLoading || isReleaseLoading) {\r\n    return <Page.Loading />;\r\n  }\r\n\r\n  const releaseActions = data?.data;\r\n  const releaseMeta = data?.meta;\r\n  const contentTypes = releaseMeta?.contentTypes || {};\r\n  const components = releaseMeta?.components || {};\r\n\r\n  if (isBaseQueryError(releaseError) || !release) {\r\n    const errorsArray = [];\r\n    if (releaseError && 'code' in releaseError) {\r\n      errorsArray.push({\r\n        code: releaseError.code,\r\n      });\r\n    }\r\n    if (releaseActionsError && 'code' in releaseActionsError) {\r\n      errorsArray.push({\r\n        code: releaseActionsError.code,\r\n      });\r\n    }\r\n    return (\r\n      <Navigate\r\n        to=\"..\"\r\n        state={{\r\n          errors: errorsArray,\r\n        }}\r\n      />\r\n    );\r\n  }\r\n\r\n  if (isError || !releaseActions) {\r\n    return <Page.Error />;\r\n  }\r\n\r\n  if (Object.keys(releaseActions).length === 0) {\r\n    return (\r\n      <Layouts.Content>\r\n        <EmptyStateLayout\r\n          action={\r\n            <LinkButton\r\n              tag={ReactRouterLink}\r\n              to={{\r\n                pathname: '/content-manager',\r\n              }}\r\n              style={{ textDecoration: 'none' }}\r\n              variant=\"secondary\"\r\n            >\r\n              {formatMessage({\r\n                id: 'content-releases.page.Details.button.openContentManager',\r\n                defaultMessage: 'Open the Content Manager',\r\n              })}\r\n            </LinkButton>\r\n          }\r\n          icon={<EmptyDocuments width=\"16rem\" />}\r\n          content={formatMessage({\r\n            id: 'content-releases.pages.Details.tab.emptyEntries',\r\n            defaultMessage:\r\n              'This release is empty. Open the Content Manager, select an entry and add it to the release.',\r\n          })}\r\n        />\r\n      </Layouts.Content>\r\n    );\r\n  }\r\n\r\n  const groupByLabel = formatMessage({\r\n    id: 'content-releases.pages.ReleaseDetails.groupBy.aria-label',\r\n    defaultMessage: 'Group by',\r\n  });\r\n  const headers = [\r\n    ...displayedHeaders,\r\n    {\r\n      label: {\r\n        id: 'content-releases.page.ReleaseDetails.table.header.label.content-type',\r\n        defaultMessage: 'content-type',\r\n      },\r\n      name: 'content-type',\r\n    },\r\n    {\r\n      label: {\r\n        id: 'content-releases.page.ReleaseDetails.table.header.label.action',\r\n        defaultMessage: 'action',\r\n      },\r\n      name: 'action',\r\n    },\r\n    ...(!release.releasedAt\r\n      ? [\r\n          {\r\n            label: {\r\n              id: 'content-releases.page.ReleaseDetails.table.header.label.status',\r\n              defaultMessage: 'status',\r\n            },\r\n            name: 'status',\r\n          },\r\n        ]\r\n      : []),\r\n  ];\r\n\r\n  const options = hasI18nEnabled ? GROUP_BY_OPTIONS : GROUP_BY_OPTIONS_NO_LOCALE;\r\n\r\n  return (\r\n    <Layouts.Content>\r\n      <Flex gap={8} direction=\"column\" alignItems=\"stretch\">\r\n        <Flex>\r\n          <SingleSelect\r\n            placeholder={groupByLabel}\r\n            aria-label={groupByLabel}\r\n            customizeContent={(value) =>\r\n              formatMessage(\r\n                {\r\n                  id: `content-releases.pages.ReleaseDetails.groupBy.label`,\r\n                  defaultMessage: `Group by {groupBy}`,\r\n                },\r\n                {\r\n                  groupBy: value,\r\n                }\r\n              )\r\n            }\r\n            value={formatMessage(getGroupByOptionLabel(selectedGroupBy))}\r\n            onChange={(value) => setQuery({ groupBy: value as ReleaseActionGroupBy })}\r\n          >\r\n            {options.map((option) => (\r\n              <SingleSelectOption key={option} value={option}>\r\n                {formatMessage(getGroupByOptionLabel(option))}\r\n              </SingleSelectOption>\r\n            ))}\r\n          </SingleSelect>\r\n        </Flex>\r\n        {Object.keys(releaseActions).map((key) => (\r\n          <Flex key={`releases-group-${key}`} gap={4} direction=\"column\" alignItems=\"stretch\">\r\n            <Flex role=\"separator\" aria-label={key}>\r\n              <Badge>{key}</Badge>\r\n            </Flex>\r\n            <Table.Root\r\n              rows={releaseActions[key].map((item) => ({\r\n                ...item,\r\n                id: Number(item.entry.id),\r\n              }))}\r\n              headers={headers}\r\n              isLoading={isLoading || isFetching}\r\n            >\r\n              <Table.Content>\r\n                <Table.Head>\r\n                  {headers.map(({ label, name }) => (\r\n                    <Table.HeaderCell key={name} label={formatMessage(label)} name={name} />\r\n                  ))}\r\n                </Table.Head>\r\n                <Table.Loading />\r\n                <Table.Body>\r\n                  {releaseActions[key].map(\r\n                    ({ id, contentType, locale, type, entry, status }, actionIndex) => (\r\n                      <Tr key={id}>\r\n                        <Td width=\"25%\" maxWidth=\"200px\">\r\n                          <Typography ellipsis>{`${\r\n                            contentType.mainFieldValue || entry.id\r\n                          }`}</Typography>\r\n                        </Td>\r\n                        {hasI18nEnabled && (\r\n                          <Td width=\"10%\">\r\n                            <Typography>{`${locale?.name ? locale.name : '-'}`}</Typography>\r\n                          </Td>\r\n                        )}\r\n\r\n                        <Td width=\"10%\">\r\n                          <Typography>{contentType.displayName || ''}</Typography>\r\n                        </Td>\r\n                        <Td width=\"20%\">\r\n                          {release.releasedAt ? (\r\n                            <Typography>\r\n                              {formatMessage(\r\n                                {\r\n                                  id: 'content-releases.page.ReleaseDetails.table.action-published',\r\n                                  defaultMessage:\r\n                                    'This entry was <b>{isPublish, select, true {published} other {unpublished}}</b>.',\r\n                                },\r\n                                {\r\n                                  isPublish: type === 'publish',\r\n                                  b: (children: React.ReactNode) => (\r\n                                    <Typography fontWeight=\"bold\">{children}</Typography>\r\n                                  ),\r\n                                }\r\n                              )}\r\n                            </Typography>\r\n                          ) : (\r\n                            <ReleaseActionOptions\r\n                              selected={type}\r\n                              handleChange={(e) => handleChangeType(e, id, [key, actionIndex])}\r\n                              name={`release-action-${id}-type`}\r\n                              disabled={!canUpdate}\r\n                            />\r\n                          )}\r\n                        </Td>\r\n                        {!release.releasedAt && (\r\n                          <>\r\n                            <Td width=\"20%\" minWidth=\"200px\">\r\n                              <EntryValidationPopover\r\n                                action={type}\r\n                                schema={contentTypes?.[contentType.uid]}\r\n                                entry={entry}\r\n                                status={status}\r\n                              />\r\n                            </Td>\r\n                            <Td>\r\n                              <Flex justifyContent=\"flex-end\">\r\n                                <ReleaseActionMenu.Root>\r\n                                  <ReleaseActionMenu.ReleaseActionEntryLinkItem\r\n                                    contentTypeUid={contentType.uid}\r\n                                    documentId={entry.documentId}\r\n                                    locale={locale?.code}\r\n                                  />\r\n                                  <ReleaseActionMenu.DeleteReleaseActionItem\r\n                                    releaseId={release.id}\r\n                                    actionId={id}\r\n                                  />\r\n                                </ReleaseActionMenu.Root>\r\n                              </Flex>\r\n                            </Td>\r\n                          </>\r\n                        )}\r\n                      </Tr>\r\n                    )\r\n                  )}\r\n                </Table.Body>\r\n              </Table.Content>\r\n            </Table.Root>\r\n          </Flex>\r\n        ))}\r\n        <Pagination.Root\r\n          {...releaseMeta?.pagination}\r\n          defaultPageSize={releaseMeta?.pagination?.pageSize}\r\n        >\r\n          <Pagination.PageSize />\r\n          <Pagination.Links />\r\n        </Pagination.Root>\r\n      </Flex>\r\n    </Layouts.Content>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ReleaseDetailsPage\r\n * -----------------------------------------------------------------------------------------------*/\r\nconst ReleaseDetailsPage = () => {\r\n  const { formatMessage } = useIntl();\r\n  const { releaseId } = useParams<{ releaseId: string }>();\r\n  const { toggleNotification } = useNotification();\r\n  const { formatAPIError } = useAPIErrorHandler();\r\n  const navigate = useNavigate();\r\n  const [releaseModalShown, setReleaseModalShown] = React.useState(false);\r\n  const [showWarningSubmit, setWarningSubmit] = React.useState(false);\r\n\r\n  const {\r\n    isLoading: isLoadingDetails,\r\n    data,\r\n    isSuccess: isSuccessDetails,\r\n  } = useGetReleaseQuery(\r\n    { id: releaseId! },\r\n    {\r\n      skip: !releaseId,\r\n    }\r\n  );\r\n  const { data: dataTimezone, isLoading: isLoadingTimezone } = useGetReleaseSettingsQuery();\r\n  const [updateRelease, { isLoading: isSubmittingForm }] = useUpdateReleaseMutation();\r\n  const [deleteRelease] = useDeleteReleaseMutation();\r\n\r\n  const toggleEditReleaseModal = () => {\r\n    setReleaseModalShown((prev) => !prev);\r\n  };\r\n\r\n  const getTimezoneValue = () => {\r\n    if (releaseData?.timezone) {\r\n      return releaseData.timezone;\r\n    } else {\r\n      if (dataTimezone?.data.defaultTimezone) {\r\n        return dataTimezone.data.defaultTimezone;\r\n      }\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const toggleWarningSubmit = () => setWarningSubmit((prevState) => !prevState);\r\n\r\n  if (isLoadingDetails || isLoadingTimezone) {\r\n    return (\r\n      <ReleaseDetailsLayout\r\n        toggleEditReleaseModal={toggleEditReleaseModal}\r\n        toggleWarningSubmit={toggleWarningSubmit}\r\n      >\r\n        <Page.Loading />\r\n      </ReleaseDetailsLayout>\r\n    );\r\n  }\r\n\r\n  if (!releaseId) {\r\n    return <Navigate to=\"..\" />;\r\n  }\r\n\r\n  const releaseData = (isSuccessDetails && data?.data) || null;\r\n\r\n  const title = releaseData?.name || '';\r\n  const timezone = getTimezoneValue();\r\n  const scheduledAt =\r\n    releaseData?.scheduledAt && timezone ? utcToZonedTime(releaseData.scheduledAt, timezone) : null;\r\n  // Just get the date and time to display without considering updated timezone time\r\n  const date = scheduledAt ? format(scheduledAt, 'yyyy-MM-dd') : undefined;\r\n  const time = scheduledAt ? format(scheduledAt, 'HH:mm') : '';\r\n\r\n  const handleEditRelease = async (values: FormValues) => {\r\n    const response = await updateRelease({\r\n      id: releaseId,\r\n      name: values.name,\r\n      scheduledAt: values.scheduledAt,\r\n      timezone: values.timezone,\r\n    });\r\n\r\n    if ('data' in response) {\r\n      // When the response returns an object with 'data', handle success\r\n      toggleNotification({\r\n        type: 'success',\r\n        message: formatMessage({\r\n          id: 'content-releases.modal.release-updated-notification-success',\r\n          defaultMessage: 'Release updated.',\r\n        }),\r\n      });\r\n      toggleEditReleaseModal();\r\n    } else if (isFetchError(response.error)) {\r\n      // When the response returns an object with 'error', handle fetch error\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatAPIError(response.error),\r\n      });\r\n    } else {\r\n      // Otherwise, the response returns an object with 'error', handle a generic error\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDeleteRelease = async () => {\r\n    const response = await deleteRelease({\r\n      id: releaseId,\r\n    });\r\n\r\n    if ('data' in response) {\r\n      navigate('..');\r\n    } else if (isFetchError(response.error)) {\r\n      // When the response returns an object with 'error', handle fetch error\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatAPIError(response.error),\r\n      });\r\n    } else {\r\n      // Otherwise, the response returns an object with 'error', handle a generic error\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ReleaseDetailsLayout\r\n      toggleEditReleaseModal={toggleEditReleaseModal}\r\n      toggleWarningSubmit={toggleWarningSubmit}\r\n    >\r\n      <ReleaseDetailsBody releaseId={releaseId} />\r\n      <ReleaseModal\r\n        open={releaseModalShown}\r\n        handleClose={toggleEditReleaseModal}\r\n        handleSubmit={handleEditRelease}\r\n        isLoading={isLoadingDetails || isSubmittingForm}\r\n        initialValues={{\r\n          name: title || '',\r\n          scheduledAt,\r\n          date,\r\n          time,\r\n          isScheduled: Boolean(scheduledAt),\r\n          timezone,\r\n        }}\r\n      />\r\n      <Dialog.Root open={showWarningSubmit} onOpenChange={toggleWarningSubmit}>\r\n        <ConfirmDialog onConfirm={handleDeleteRelease}>\r\n          {formatMessage({\r\n            id: 'content-releases.dialog.confirmation-message',\r\n            defaultMessage: 'Are you sure you want to delete this release?',\r\n          })}\r\n        </ConfirmDialog>\r\n      </Dialog.Root>\r\n    </ReleaseDetailsLayout>\r\n  );\r\n};\r\n\r\nexport { ReleaseDetailsPage };\r\n", "import * as React from 'react';\r\n\r\nimport { FormErrors, FormValues } from '@strapi/admin/strapi-admin';\r\nimport { unstable_useDocument } from '@strapi/content-manager/strapi-admin';\r\nimport { Button, LinkButton, Flex, Typography, Popover } from '@strapi/design-system';\r\nimport { CheckCircle, CrossCircle, ArrowsCounterClockwise, CaretDown } from '@strapi/icons';\r\nimport { stringify } from 'qs';\r\nimport { useIntl, MessageDescriptor } from 'react-intl';\r\nimport { Link } from 'react-router-dom';\r\nimport { styled } from 'styled-components';\r\n\r\nimport type {\r\n  ReleaseAction,\r\n  ReleaseActionEntry,\r\n  Stage,\r\n} from '../../../shared/contracts/release-actions';\r\nimport type { Struct } from '@strapi/types';\r\n\r\nconst StyledPopoverFlex = styled(Flex)`\r\n  width: 100%;\r\n  max-width: 256px;\r\n\r\n  & > * {\r\n    border-bottom: 1px solid ${({ theme }) => theme.colors.neutral150};\r\n  }\r\n\r\n  & > *:last-child {\r\n    border-bottom: none;\r\n  }\r\n`;\r\n\r\ninterface EntryValidationPopoverProps {\r\n  action: ReleaseAction['type'];\r\n  schema?: Struct.ContentTypeSchema & {\r\n    hasReviewWorkflow: boolean;\r\n    stageRequiredToPublish?: Stage;\r\n  };\r\n  entry: ReleaseActionEntry;\r\n  status: ReleaseAction['status'];\r\n}\r\n\r\ninterface ValidationStatusProps {\r\n  action: ReleaseAction['type'];\r\n  status: ReleaseAction['status'];\r\n  hasErrors: boolean | null;\r\n  requiredStage?: Stage;\r\n  entryStage?: Stage;\r\n}\r\n\r\nconst EntryStatusTrigger = ({\r\n  action,\r\n  status,\r\n  hasErrors,\r\n  requiredStage,\r\n  entryStage,\r\n}: ValidationStatusProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  if (action === 'publish') {\r\n    if (hasErrors || (requiredStage && requiredStage.id !== entryStage?.id)) {\r\n      return (\r\n        <Popover.Trigger>\r\n          <Button\r\n            variant=\"ghost\"\r\n            startIcon={<CrossCircle fill=\"danger600\" />}\r\n            endIcon={<CaretDown />}\r\n          >\r\n            <Typography textColor=\"danger600\" variant=\"omega\" fontWeight=\"bold\">\r\n              {formatMessage({\r\n                id: 'content-releases.pages.ReleaseDetails.entry-validation.not-ready',\r\n                defaultMessage: 'Not ready to publish',\r\n              })}\r\n            </Typography>\r\n          </Button>\r\n        </Popover.Trigger>\r\n      );\r\n    }\r\n\r\n    if (status === 'draft') {\r\n      return (\r\n        <Popover.Trigger>\r\n          <Button\r\n            variant=\"ghost\"\r\n            startIcon={<CheckCircle fill=\"success600\" />}\r\n            endIcon={<CaretDown />}\r\n          >\r\n            <Typography textColor=\"success600\" variant=\"omega\" fontWeight=\"bold\">\r\n              {formatMessage({\r\n                id: 'content-releases.pages.ReleaseDetails.entry-validation.ready-to-publish',\r\n                defaultMessage: 'Ready to publish',\r\n              })}\r\n            </Typography>\r\n          </Button>\r\n        </Popover.Trigger>\r\n      );\r\n    }\r\n\r\n    if (status === 'modified') {\r\n      return (\r\n        <Popover.Trigger>\r\n          <Button\r\n            variant=\"ghost\"\r\n            startIcon={<ArrowsCounterClockwise fill=\"alternative600\" />}\r\n            endIcon={<CaretDown />}\r\n          >\r\n            <Typography variant=\"omega\" fontWeight=\"bold\" textColor=\"alternative600\">\r\n              {formatMessage({\r\n                id: 'content-releases.pages.ReleaseDetails.entry-validation.modified',\r\n                defaultMessage: 'Ready to publish changes',\r\n              })}\r\n            </Typography>\r\n          </Button>\r\n        </Popover.Trigger>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <Popover.Trigger>\r\n        <Button\r\n          variant=\"ghost\"\r\n          startIcon={<CheckCircle fill=\"success600\" />}\r\n          endIcon={<CaretDown />}\r\n        >\r\n          <Typography textColor=\"success600\" variant=\"omega\" fontWeight=\"bold\">\r\n            {formatMessage({\r\n              id: 'content-releases.pages.ReleaseDetails.entry-validation.already-published',\r\n              defaultMessage: 'Already published',\r\n            })}\r\n          </Typography>\r\n        </Button>\r\n      </Popover.Trigger>\r\n    );\r\n  }\r\n\r\n  if (status === 'published') {\r\n    return (\r\n      <Popover.Trigger>\r\n        <Button\r\n          variant=\"ghost\"\r\n          startIcon={<CheckCircle fill=\"success600\" />}\r\n          endIcon={<CaretDown />}\r\n        >\r\n          <Typography textColor=\"success600\" variant=\"omega\" fontWeight=\"bold\">\r\n            {formatMessage({\r\n              id: 'content-releases.pages.ReleaseDetails.entry-validation.ready-to-unpublish',\r\n              defaultMessage: 'Ready to unpublish',\r\n            })}\r\n          </Typography>\r\n        </Button>\r\n      </Popover.Trigger>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Popover.Trigger>\r\n      <Button variant=\"ghost\" startIcon={<CheckCircle fill=\"success600\" />} endIcon={<CaretDown />}>\r\n        <Typography textColor=\"success600\" variant=\"omega\" fontWeight=\"bold\">\r\n          {formatMessage({\r\n            id: 'content-releases.pages.ReleaseDetails.entry-validation.already-unpublished',\r\n            defaultMessage: 'Already unpublished',\r\n          })}\r\n        </Typography>\r\n      </Button>\r\n    </Popover.Trigger>\r\n  );\r\n};\r\n\r\ninterface FieldsValidationProps {\r\n  hasErrors: boolean;\r\n  errors: FormErrors<FormValues> | null;\r\n  kind?: string;\r\n  contentTypeUid?: string;\r\n  documentId?: string;\r\n  locale?: string;\r\n}\r\n\r\nconst FieldsValidation = ({\r\n  hasErrors,\r\n  errors,\r\n  kind,\r\n  contentTypeUid,\r\n  documentId,\r\n  locale,\r\n}: FieldsValidationProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  return (\r\n    <Flex direction=\"column\" gap={1} width=\"100%\" padding={5}>\r\n      <Flex gap={2} width=\"100%\">\r\n        <Typography fontWeight=\"bold\">\r\n          {formatMessage({\r\n            id: 'content-releases.pages.ReleaseDetails.entry-validation.fields',\r\n            defaultMessage: 'Fields',\r\n          })}\r\n        </Typography>\r\n        {hasErrors ? <CrossCircle fill=\"danger600\" /> : <CheckCircle fill=\"success600\" />}\r\n      </Flex>\r\n      <Typography width=\"100%\" textColor=\"neutral600\">\r\n        {hasErrors\r\n          ? formatMessage(\r\n              {\r\n                id: 'content-releases.pages.ReleaseDetails.entry-validation.fields.error',\r\n                defaultMessage: '{errors} errors on fields.',\r\n              },\r\n              { errors: errors ? Object.keys(errors).length : 0 }\r\n            )\r\n          : formatMessage({\r\n              id: 'content-releases.pages.ReleaseDetails.entry-validation.fields.success',\r\n              defaultMessage: 'All fields are filled correctly.',\r\n            })}\r\n      </Typography>\r\n      {hasErrors && (\r\n        <LinkButton\r\n          tag={Link}\r\n          to={{\r\n            pathname: `/content-manager/${kind === 'collectionType' ? 'collection-types' : 'single-types'}/${contentTypeUid}/${documentId}`,\r\n            search: locale\r\n              ? stringify({\r\n                  plugins: {\r\n                    i18n: {\r\n                      locale,\r\n                    },\r\n                  },\r\n                })\r\n              : '',\r\n          }}\r\n          variant=\"secondary\"\r\n          fullWidth\r\n          state={{ forceValidation: true }}\r\n        >\r\n          {formatMessage({\r\n            id: 'content-releases.pages.ReleaseDetails.entry-validation.fields.see-errors',\r\n            defaultMessage: 'See errors',\r\n          })}\r\n        </LinkButton>\r\n      )}\r\n    </Flex>\r\n  );\r\n};\r\n\r\nconst getReviewStageIcon = ({\r\n  contentTypeHasReviewWorkflow,\r\n  requiredStage,\r\n  entryStage,\r\n}: {\r\n  contentTypeHasReviewWorkflow: boolean;\r\n  requiredStage?: Stage;\r\n  entryStage?: Stage;\r\n}) => {\r\n  if (!contentTypeHasReviewWorkflow) {\r\n    return <CheckCircle fill=\"neutral200\" />;\r\n  }\r\n  if (requiredStage && requiredStage.id !== entryStage?.id) {\r\n    return <CrossCircle fill=\"danger600\" />;\r\n  }\r\n  return <CheckCircle fill=\"success600\" />;\r\n};\r\n\r\nconst getReviewStageMessage = ({\r\n  contentTypeHasReviewWorkflow,\r\n  requiredStage,\r\n  entryStage,\r\n  formatMessage,\r\n}: {\r\n  contentTypeHasReviewWorkflow: boolean;\r\n  requiredStage?: Stage;\r\n  entryStage?: Stage;\r\n  formatMessage: (messageDescriptor: MessageDescriptor, values?: Record<string, string>) => string;\r\n}) => {\r\n  if (!contentTypeHasReviewWorkflow) {\r\n    return formatMessage({\r\n      id: 'content-releases.pages.ReleaseDetails.entry-validation.review-stage.not-enabled',\r\n      defaultMessage: 'This entry is not associated to any workflow.',\r\n    });\r\n  }\r\n\r\n  if (requiredStage && requiredStage.id !== entryStage?.id) {\r\n    return formatMessage(\r\n      {\r\n        id: 'content-releases.pages.ReleaseDetails.entry-validation.review-stage.not-ready',\r\n        defaultMessage: 'This entry is not at the required stage for publishing. ({stageName})',\r\n      },\r\n      {\r\n        stageName: requiredStage?.name ?? '',\r\n      }\r\n    );\r\n  }\r\n\r\n  if (requiredStage && requiredStage.id === entryStage?.id) {\r\n    return formatMessage(\r\n      {\r\n        id: 'content-releases.pages.ReleaseDetails.entry-validation.review-stage.ready',\r\n        defaultMessage: 'This entry is at the required stage for publishing. ({stageName})',\r\n      },\r\n      {\r\n        stageName: requiredStage?.name ?? '',\r\n      }\r\n    );\r\n  }\r\n\r\n  return formatMessage({\r\n    id: 'content-releases.pages.ReleaseDetails.entry-validation.review-stage.stage-not-required',\r\n    defaultMessage: 'No required stage for publication',\r\n  });\r\n};\r\n\r\nconst ReviewStageValidation = ({\r\n  contentTypeHasReviewWorkflow,\r\n  requiredStage,\r\n  entryStage,\r\n}: {\r\n  contentTypeHasReviewWorkflow: boolean;\r\n  requiredStage?: Stage;\r\n  entryStage?: Stage;\r\n}) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  const Icon = getReviewStageIcon({\r\n    contentTypeHasReviewWorkflow,\r\n    requiredStage,\r\n    entryStage,\r\n  });\r\n\r\n  return (\r\n    <Flex direction=\"column\" gap={1} width=\"100%\" padding={5}>\r\n      <Flex gap={2} width=\"100%\">\r\n        <Typography fontWeight=\"bold\">\r\n          {formatMessage({\r\n            id: 'content-releases.pages.ReleaseDetails.entry-validation.review-stage',\r\n            defaultMessage: 'Review stage',\r\n          })}\r\n        </Typography>\r\n        {Icon}\r\n      </Flex>\r\n      <Typography textColor=\"neutral600\">\r\n        {getReviewStageMessage({\r\n          contentTypeHasReviewWorkflow,\r\n          requiredStage,\r\n          entryStage,\r\n          formatMessage,\r\n        })}\r\n      </Typography>\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport const EntryValidationPopover = ({\r\n  schema,\r\n  entry,\r\n  status,\r\n  action,\r\n}: EntryValidationPopoverProps) => {\r\n  const { validate, isLoading } = unstable_useDocument(\r\n    {\r\n      collectionType: schema?.kind ?? '',\r\n      model: schema?.uid ?? '',\r\n    },\r\n    {\r\n      // useDocument makes a request to get more data about the entry, but we only want to have the validation function so we skip the request\r\n      skip: true,\r\n    }\r\n  );\r\n\r\n  // Validation errors\r\n  const errors = isLoading ? null : validate(entry);\r\n  const hasErrors = errors ? Object.keys(errors).length > 0 : false;\r\n\r\n  // Entry stage\r\n  const contentTypeHasReviewWorkflow = schema?.hasReviewWorkflow ?? false;\r\n  const requiredStage = schema?.stageRequiredToPublish;\r\n  const entryStage = entry.strapi_stage;\r\n\r\n  if (isLoading) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Popover.Root>\r\n      <EntryStatusTrigger\r\n        action={action}\r\n        status={status}\r\n        hasErrors={hasErrors}\r\n        requiredStage={requiredStage}\r\n        entryStage={entryStage}\r\n      />\r\n      <Popover.Content>\r\n        <StyledPopoverFlex direction=\"column\">\r\n          <FieldsValidation\r\n            hasErrors={hasErrors}\r\n            errors={errors}\r\n            contentTypeUid={schema?.uid}\r\n            kind={schema?.kind}\r\n            documentId={entry.documentId}\r\n            locale={entry.locale}\r\n          />\r\n          <ReviewStageValidation\r\n            contentTypeHasReviewWorkflow={contentTypeHasReviewWorkflow}\r\n            requiredStage={requiredStage}\r\n            entryStage={entryStage}\r\n          />\r\n        </StyledPopoverFlex>\r\n      </Popover.Content>\r\n    </Popover.Root>\r\n  );\r\n};\r\n", "import * as React from 'react';\r\n\r\nimport { Duration, intervalToDuration, isPast } from 'date-fns';\r\nimport { useIntl } from 'react-intl';\r\n\r\nconst intervals: Array<keyof Duration> = ['years', 'months', 'days', 'hours', 'minutes', 'seconds'];\r\n\r\ninterface CustomInterval {\r\n  unit: keyof Duration;\r\n  text: string;\r\n  threshold: number;\r\n}\r\n\r\ninterface RelativeTimeProps extends React.ComponentPropsWithoutRef<'time'> {\r\n  timestamp: Date;\r\n  customIntervals?: CustomInterval[];\r\n}\r\n\r\n/**\r\n * Displays the relative time between a given timestamp and the current time.\r\n * You can display a custom message for given time intervals by passing an array of custom intervals.\r\n *\r\n * @example\r\n * ```jsx\r\n * <caption>Display \"last hour\" if the timestamp is less than an hour ago</caption>\r\n * <RelativeTime\r\n *  timestamp={new Date('2021-01-01')}\r\n *  customIntervals={[\r\n *   { unit: 'hours', threshold: 1, text: 'last hour' },\r\n *  ]}\r\n * ```\r\n */\r\nconst RelativeTime = React.forwardRef<HTMLTimeElement, RelativeTimeProps>(\r\n  ({ timestamp, customIntervals = [], ...restProps }, forwardedRef) => {\r\n    const { formatRelativeTime, formatDate, formatTime } = useIntl();\r\n\r\n    /**\r\n     * TODO: make this auto-update, like a clock.\r\n     */\r\n    const interval = intervalToDuration({\r\n      start: timestamp,\r\n      end: Date.now(),\r\n      // see https://github.com/date-fns/date-fns/issues/2891 â€“ No idea why it's all partial it returns it every time.\r\n    }) as Required<Duration>;\r\n\r\n    const unit = intervals.find((intervalUnit) => {\r\n      return interval[intervalUnit] > 0 && Object.keys(interval).includes(intervalUnit);\r\n    })!;\r\n\r\n    const relativeTime = isPast(timestamp) ? -interval[unit] : interval[unit];\r\n\r\n    // Display custom text if interval is less than the threshold\r\n    const customInterval = customIntervals.find(\r\n      (custom) => interval[custom.unit] < custom.threshold\r\n    );\r\n\r\n    const displayText = customInterval\r\n      ? customInterval.text\r\n      : formatRelativeTime(relativeTime, unit, { numeric: 'auto' });\r\n\r\n    return (\r\n      <time\r\n        ref={forwardedRef}\r\n        dateTime={timestamp.toISOString()}\r\n        role=\"time\"\r\n        title={`${formatDate(timestamp)} ${formatTime(timestamp)}`}\r\n        {...restProps}\r\n      >\r\n        {displayText}\r\n      </time>\r\n    );\r\n  }\r\n);\r\n\r\nexport { RelativeTime };\r\nexport type { CustomInterval, RelativeTimeProps };\r\n", "import * as React from 'react';\r\n\r\nimport {\r\n  Button,\r\n  Modal,\r\n  TextInput,\r\n  Typography,\r\n  Checkbox,\r\n  Flex,\r\n  Box,\r\n  DatePicker,\r\n  TimePicker,\r\n  Combobox,\r\n  ComboboxOption,\r\n  Field,\r\n} from '@strapi/design-system';\r\nimport { formatISO } from 'date-fns';\r\nimport { utcToZonedTime, zonedTimeToUtc } from 'date-fns-tz';\r\nimport { Formik, Form, useFormikContext } from 'formik';\r\nimport { MessageDescriptor, useIntl } from 'react-intl';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nimport { pluginId } from '../pluginId';\r\nimport { getTimezones } from '../utils/time';\r\nimport { RELEASE_SCHEMA } from '../validation/schemas';\r\n\r\nexport interface FormValues {\r\n  name: string;\r\n  date?: string;\r\n  time: string;\r\n  timezone: string | null;\r\n  isScheduled?: boolean;\r\n  scheduledAt: Date | null;\r\n}\r\n\r\ninterface ReleaseModalProps {\r\n  handleClose: () => void;\r\n  handleSubmit: (values: FormValues) => void;\r\n  isLoading?: boolean;\r\n  initialValues: FormValues;\r\n  open?: boolean;\r\n}\r\n\r\nexport const ReleaseModal = ({\r\n  handleClose,\r\n  open,\r\n  handleSubmit,\r\n  initialValues,\r\n  isLoading = false,\r\n}: ReleaseModalProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const { pathname } = useLocation();\r\n  const isCreatingRelease = pathname === `/plugins/${pluginId}`;\r\n  // Set default first timezone from the list if no system timezone detected\r\n  const { timezoneList, systemTimezone = { value: 'UTC+00:00-Africa/Abidjan ' } } = getTimezones(\r\n    initialValues.scheduledAt ? new Date(initialValues.scheduledAt) : new Date()\r\n  );\r\n\r\n  /**\r\n   * Generate scheduled time using selected date, time and timezone\r\n   */\r\n  const getScheduledTimestamp = (values: FormValues) => {\r\n    const { date, time, timezone } = values;\r\n    if (!date || !time || !timezone) return null;\r\n    const timezoneWithoutOffset = timezone.split('&')[1];\r\n    return zonedTimeToUtc(`${date} ${time}`, timezoneWithoutOffset);\r\n  };\r\n\r\n  /**\r\n   * Get timezone with offset to show the selected value in the dropdown\r\n   */\r\n  const getTimezoneWithOffset = () => {\r\n    const currentTimezone = timezoneList.find(\r\n      (timezone) => timezone.value.split('&')[1] === initialValues.timezone\r\n    );\r\n    return currentTimezone?.value || systemTimezone.value;\r\n  };\r\n\r\n  return (\r\n    <Modal.Root open={open} onOpenChange={handleClose}>\r\n      <Modal.Content>\r\n        <Modal.Header>\r\n          <Modal.Title>\r\n            {formatMessage(\r\n              {\r\n                id: 'content-releases.modal.title',\r\n                defaultMessage:\r\n                  '{isCreatingRelease, select, true {New release} other {Edit release}}',\r\n              },\r\n              { isCreatingRelease: isCreatingRelease }\r\n            )}\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Formik\r\n          onSubmit={(values) => {\r\n            handleSubmit({\r\n              ...values,\r\n              timezone: values.timezone ? values.timezone.split('&')[1] : null,\r\n              scheduledAt: values.isScheduled ? getScheduledTimestamp(values) : null,\r\n            });\r\n          }}\r\n          initialValues={{\r\n            ...initialValues,\r\n            timezone: initialValues.timezone ? getTimezoneWithOffset() : systemTimezone.value,\r\n          }}\r\n          validationSchema={RELEASE_SCHEMA}\r\n          validateOnChange={false}\r\n        >\r\n          {({ values, errors, handleChange, setFieldValue }) => {\r\n            return (\r\n              <Form>\r\n                <Modal.Body>\r\n                  <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\r\n                    <Field.Root\r\n                      name=\"name\"\r\n                      error={\r\n                        errors.name &&\r\n                        formatMessage({ id: errors.name, defaultMessage: errors.name })\r\n                      }\r\n                      required\r\n                    >\r\n                      <Field.Label>\r\n                        {formatMessage({\r\n                          id: 'content-releases.modal.form.input.label.release-name',\r\n                          defaultMessage: 'Name',\r\n                        })}\r\n                      </Field.Label>\r\n                      <TextInput value={values.name} onChange={handleChange} />\r\n                      <Field.Error />\r\n                    </Field.Root>\r\n                    <Box width=\"max-content\">\r\n                      <Checkbox\r\n                        name=\"isScheduled\"\r\n                        checked={values.isScheduled}\r\n                        onCheckedChange={(checked) => {\r\n                          setFieldValue('isScheduled', checked);\r\n                          if (!checked) {\r\n                            // Clear scheduling info from a release on unchecking schedule release, which reset scheduling info in DB\r\n                            setFieldValue('date', null);\r\n                            setFieldValue('time', '');\r\n                            setFieldValue('timezone', null);\r\n                          } else {\r\n                            // On ticking back schedule release date, time and timezone should be restored to the initial state\r\n                            setFieldValue('date', initialValues.date);\r\n                            setFieldValue('time', initialValues.time);\r\n                            setFieldValue(\r\n                              'timezone',\r\n                              initialValues.timezone ?? systemTimezone?.value\r\n                            );\r\n                          }\r\n                        }}\r\n                      >\r\n                        <Typography\r\n                          textColor={values.isScheduled ? 'primary600' : 'neutral800'}\r\n                          fontWeight={values.isScheduled ? 'semiBold' : 'regular'}\r\n                        >\r\n                          {formatMessage({\r\n                            id: 'modal.form.input.label.schedule-release',\r\n                            defaultMessage: 'Schedule release',\r\n                          })}\r\n                        </Typography>\r\n                      </Checkbox>\r\n                    </Box>\r\n                    {values.isScheduled && (\r\n                      <>\r\n                        <Flex gap={4} alignItems=\"start\">\r\n                          <Box width=\"100%\">\r\n                            <Field.Root\r\n                              name=\"date\"\r\n                              error={\r\n                                errors.date &&\r\n                                formatMessage({ id: errors.date, defaultMessage: errors.date })\r\n                              }\r\n                              required\r\n                            >\r\n                              <Field.Label>\r\n                                {formatMessage({\r\n                                  id: 'content-releases.modal.form.input.label.date',\r\n                                  defaultMessage: 'Date',\r\n                                })}\r\n                              </Field.Label>\r\n                              <DatePicker\r\n                                onChange={(date) => {\r\n                                  const isoFormatDate = date\r\n                                    ? formatISO(date, { representation: 'date' })\r\n                                    : null;\r\n                                  setFieldValue('date', isoFormatDate);\r\n                                }}\r\n                                clearLabel={formatMessage({\r\n                                  id: 'content-releases.modal.form.input.clearLabel',\r\n                                  defaultMessage: 'Clear',\r\n                                })}\r\n                                onClear={() => {\r\n                                  setFieldValue('date', null);\r\n                                }}\r\n                                value={values.date ? new Date(values.date) : new Date()}\r\n                                minDate={utcToZonedTime(new Date(), values.timezone.split('&')[1])}\r\n                              />\r\n                              <Field.Error />\r\n                            </Field.Root>\r\n                          </Box>\r\n                          <Box width=\"100%\">\r\n                            <Field.Root\r\n                              name=\"time\"\r\n                              error={\r\n                                errors.time &&\r\n                                formatMessage({ id: errors.time, defaultMessage: errors.time })\r\n                              }\r\n                              required\r\n                            >\r\n                              <Field.Label>\r\n                                {formatMessage({\r\n                                  id: 'content-releases.modal.form.input.label.time',\r\n                                  defaultMessage: 'Time',\r\n                                })}\r\n                              </Field.Label>\r\n                              <TimePicker\r\n                                onChange={(time) => {\r\n                                  setFieldValue('time', time);\r\n                                }}\r\n                                clearLabel={formatMessage({\r\n                                  id: 'content-releases.modal.form.input.clearLabel',\r\n                                  defaultMessage: 'Clear',\r\n                                })}\r\n                                onClear={() => {\r\n                                  setFieldValue('time', '');\r\n                                }}\r\n                                value={values.time || undefined}\r\n                              />\r\n                              <Field.Error />\r\n                            </Field.Root>\r\n                          </Box>\r\n                        </Flex>\r\n                        <TimezoneComponent timezoneOptions={timezoneList} />\r\n                      </>\r\n                    )}\r\n                  </Flex>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                  <Modal.Close>\r\n                    <Button variant=\"tertiary\" name=\"cancel\">\r\n                      {formatMessage({ id: 'cancel', defaultMessage: 'Cancel' })}\r\n                    </Button>\r\n                  </Modal.Close>\r\n                  <Button name=\"submit\" loading={isLoading} type=\"submit\">\r\n                    {formatMessage(\r\n                      {\r\n                        id: 'content-releases.modal.form.button.submit',\r\n                        defaultMessage: '{isCreatingRelease, select, true {Continue} other {Save}}',\r\n                      },\r\n                      { isCreatingRelease: isCreatingRelease }\r\n                    )}\r\n                  </Button>\r\n                </Modal.Footer>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modal.Content>\r\n    </Modal.Root>\r\n  );\r\n};\r\n\r\n/**\r\n * Generates the list of timezones and user's current timezone(system timezone)\r\n */\r\ninterface ITimezoneOption {\r\n  offset: string;\r\n  value: string;\r\n}\r\n\r\nconst TimezoneComponent = ({ timezoneOptions }: { timezoneOptions: ITimezoneOption[] }) => {\r\n  const { values, errors, setFieldValue } = useFormikContext<FormValues>();\r\n  const { formatMessage } = useIntl();\r\n  const [timezoneList, setTimezoneList] = React.useState<ITimezoneOption[]>(timezoneOptions);\r\n\r\n  React.useEffect(() => {\r\n    if (values.date) {\r\n      // Update the timezone offset which varies with DST based on the date selected\r\n      const { timezoneList } = getTimezones(new Date(values.date));\r\n      setTimezoneList(timezoneList);\r\n\r\n      const updatedTimezone =\r\n        values.timezone &&\r\n        timezoneList.find((tz) => tz.value.split('&')[1] === values.timezone!.split('&')[1]);\r\n      if (updatedTimezone) {\r\n        setFieldValue('timezone', updatedTimezone!.value);\r\n      }\r\n    }\r\n  }, [setFieldValue, values.date, values.timezone]);\r\n\r\n  return (\r\n    <Field.Root\r\n      name=\"timezone\"\r\n      error={\r\n        errors.timezone && formatMessage({ id: errors.timezone, defaultMessage: errors.timezone })\r\n      }\r\n      required\r\n    >\r\n      <Field.Label>\r\n        {formatMessage({\r\n          id: 'content-releases.modal.form.input.label.timezone',\r\n          defaultMessage: 'Timezone',\r\n        })}\r\n      </Field.Label>\r\n      <Combobox\r\n        autocomplete={{ type: 'list', filter: 'contains' }}\r\n        value={values.timezone || undefined}\r\n        textValue={values.timezone ? values.timezone.replace(/&/, ' ') : undefined} // textValue is required to show the updated DST timezone\r\n        onChange={(timezone) => {\r\n          setFieldValue('timezone', timezone);\r\n        }}\r\n        onTextValueChange={(timezone) => {\r\n          setFieldValue('timezone', timezone);\r\n        }}\r\n        onClear={() => {\r\n          setFieldValue('timezone', '');\r\n        }}\r\n      >\r\n        {timezoneList.map((timezone) => (\r\n          <ComboboxOption key={timezone.value} value={timezone.value}>\r\n            {timezone.value.replace(/&/, ' ')}\r\n          </ComboboxOption>\r\n        ))}\r\n      </Combobox>\r\n      <Field.Error />\r\n    </Field.Root>\r\n  );\r\n};\r\n", "import { Dispatch } from '@reduxjs/toolkit';\r\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\n\r\nimport type { Store } from '@strapi/admin/strapi-admin';\r\n\r\ntype RootState = ReturnType<Store['getState']>;\r\n\r\nconst useTypedDispatch: () => Dispatch = useDispatch;\r\nconst useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n\r\nexport { useTypedSelector, useTypedDispatch };\r\n", "import { SerializedError } from '@reduxjs/toolkit';\r\nimport { ApiError } from '@strapi/admin/strapi-admin';\r\n\r\ntype BaseQueryError = ApiError | SerializedError;\r\n\r\nconst isBaseQueryError = (error?: BaseQueryError): error is BaseQueryError => {\r\n  return typeof error !== 'undefined' && error.name !== undefined;\r\n};\r\n\r\nexport { isBaseQueryError };\r\nexport type { BaseQueryError };\r\n", "import * as React from 'react';\r\n\r\nimport {\r\n  Page,\r\n  Pagination,\r\n  useTracking,\r\n  useAPIErrorHandler,\r\n  useNotification,\r\n  useQueryParams,\r\n  useRBAC,\r\n  isFetchError,\r\n  Layouts,\r\n  GradientBadge,\r\n} from '@strapi/admin/strapi-admin';\r\nimport { useLicenseLimits } from '@strapi/admin/strapi-admin/ee';\r\nimport {\r\n  Alert,\r\n  Badge,\r\n  Box,\r\n  Button,\r\n  Divider,\r\n  EmptyStateLayout,\r\n  Flex,\r\n  Grid,\r\n  Main,\r\n  Tabs,\r\n  Typography,\r\n  Link,\r\n} from '@strapi/design-system';\r\nimport { Plus } from '@strapi/icons';\r\nimport { EmptyDocuments } from '@strapi/icons/symbols';\r\nimport { format } from 'date-fns';\r\nimport { useIntl } from 'react-intl';\r\nimport { useNavigate, useLocation, NavLink } from 'react-router-dom';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { GetReleases, type Release } from '../../../shared/contracts/releases';\r\nimport { RelativeTime as BaseRelativeTime } from '../components/RelativeTime';\r\nimport { ReleaseModal, FormValues } from '../components/ReleaseModal';\r\nimport { PERMISSIONS } from '../constants';\r\nimport {\r\n  useGetReleasesQuery,\r\n  useGetReleaseSettingsQuery,\r\n  GetReleasesQueryParams,\r\n  useCreateReleaseMutation,\r\n} from '../services/release';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ReleasesGrid\r\n * -----------------------------------------------------------------------------------------------*/\r\ninterface ReleasesGridProps {\r\n  sectionTitle: 'pending' | 'done';\r\n  releases?: GetReleases.Response['data'];\r\n  isError?: boolean;\r\n}\r\n\r\nconst LinkCard = styled(Link)`\r\n  display: block;\r\n`;\r\n\r\nconst RelativeTime = styled(BaseRelativeTime)`\r\n  display: inline-block;\r\n  &::first-letter {\r\n    text-transform: uppercase;\r\n  }\r\n`;\r\n\r\nconst getBadgeProps = (status: Release['status']) => {\r\n  let color;\r\n  switch (status) {\r\n    case 'ready':\r\n      color = 'success';\r\n      break;\r\n    case 'blocked':\r\n      color = 'warning';\r\n      break;\r\n    case 'failed':\r\n      color = 'danger';\r\n      break;\r\n    case 'done':\r\n      color = 'primary';\r\n      break;\r\n    case 'empty':\r\n    default:\r\n      color = 'neutral';\r\n  }\r\n\r\n  return {\r\n    textColor: `${color}600`,\r\n    backgroundColor: `${color}100`,\r\n    borderColor: `${color}200`,\r\n  };\r\n};\r\n\r\nconst ReleasesGrid = ({ sectionTitle, releases = [], isError = false }: ReleasesGridProps) => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  if (isError) {\r\n    return <Page.Error />;\r\n  }\r\n\r\n  if (releases?.length === 0) {\r\n    return (\r\n      <EmptyStateLayout\r\n        content={formatMessage(\r\n          {\r\n            id: 'content-releases.page.Releases.tab.emptyEntries',\r\n            defaultMessage: 'No releases',\r\n          },\r\n          {\r\n            target: sectionTitle,\r\n          }\r\n        )}\r\n        icon={<EmptyDocuments width=\"16rem\" />}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Grid.Root gap={4}>\r\n      {releases.map(({ id, name, scheduledAt, status }) => (\r\n        <Grid.Item col={3} s={6} xs={12} key={id} direction=\"column\" alignItems=\"stretch\">\r\n          <LinkCard tag={NavLink} to={`${id}`} isExternal={false}>\r\n            <Flex\r\n              direction=\"column\"\r\n              justifyContent=\"space-between\"\r\n              padding={4}\r\n              hasRadius\r\n              background=\"neutral0\"\r\n              shadow=\"tableShadow\"\r\n              height=\"100%\"\r\n              width=\"100%\"\r\n              alignItems=\"start\"\r\n              gap={4}\r\n            >\r\n              <Flex direction=\"column\" alignItems=\"start\" gap={1}>\r\n                <Typography textColor=\"neutral800\" tag=\"h3\" variant=\"delta\" fontWeight=\"bold\">\r\n                  {name}\r\n                </Typography>\r\n                <Typography variant=\"pi\" textColor=\"neutral600\">\r\n                  {scheduledAt ? (\r\n                    <RelativeTime timestamp={new Date(scheduledAt)} />\r\n                  ) : (\r\n                    formatMessage({\r\n                      id: 'content-releases.pages.Releases.not-scheduled',\r\n                      defaultMessage: 'Not scheduled',\r\n                    })\r\n                  )}\r\n                </Typography>\r\n              </Flex>\r\n              <Badge {...getBadgeProps(status)}>{status}</Badge>\r\n            </Flex>\r\n          </LinkCard>\r\n        </Grid.Item>\r\n      ))}\r\n    </Grid.Root>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ReleasesPage\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst StyledAlert = styled(Alert)`\r\n  button {\r\n    display: none;\r\n  }\r\n  p + div {\r\n    margin-left: auto;\r\n  }\r\n`;\r\n\r\nconst INITIAL_FORM_VALUES = {\r\n  name: '',\r\n  date: format(new Date(), 'yyyy-MM-dd'),\r\n  time: '',\r\n  isScheduled: true,\r\n  scheduledAt: null,\r\n  timezone: null,\r\n} satisfies FormValues;\r\n\r\nconst ReleasesPage = () => {\r\n  const location = useLocation();\r\n  const [releaseModalShown, setReleaseModalShown] = React.useState(false);\r\n  const { toggleNotification } = useNotification();\r\n  const { formatMessage } = useIntl();\r\n  const navigate = useNavigate();\r\n  const { formatAPIError } = useAPIErrorHandler();\r\n  const [{ query }, setQuery] = useQueryParams<GetReleasesQueryParams>();\r\n  const response = useGetReleasesQuery(query);\r\n  const { data, isLoading: isLoadingSettings } = useGetReleaseSettingsQuery();\r\n  const [createRelease, { isLoading: isSubmittingForm }] = useCreateReleaseMutation();\r\n  const { getFeature } = useLicenseLimits();\r\n  const { maximumReleases = 3 } = getFeature('cms-content-releases') as {\r\n    maximumReleases: number;\r\n  };\r\n  const { trackUsage } = useTracking();\r\n  const {\r\n    allowedActions: { canCreate },\r\n  } = useRBAC(PERMISSIONS);\r\n\r\n  const { isLoading: isLoadingReleases, isSuccess, isError } = response;\r\n  const activeTab = response?.currentData?.meta?.activeTab || 'pending';\r\n\r\n  // Check if we have some errors and show a notification to the user to explain the error\r\n  React.useEffect(() => {\r\n    if (location?.state?.errors) {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        title: formatMessage({\r\n          id: 'content-releases.pages.Releases.notification.error.title',\r\n          defaultMessage: 'Your request could not be processed.',\r\n        }),\r\n        message: formatMessage({\r\n          id: 'content-releases.pages.Releases.notification.error.message',\r\n          defaultMessage: 'Please try again or open another release.',\r\n        }),\r\n      });\r\n      navigate('', { replace: true, state: null });\r\n    }\r\n  }, [formatMessage, location?.state?.errors, navigate, toggleNotification]);\r\n\r\n  const toggleAddReleaseModal = () => {\r\n    setReleaseModalShown((prev) => !prev);\r\n  };\r\n\r\n  if (isLoadingReleases || isLoadingSettings) {\r\n    return <Page.Loading />;\r\n  }\r\n\r\n  const totalPendingReleases = (isSuccess && response.currentData?.meta?.pendingReleasesCount) || 0;\r\n  const hasReachedMaximumPendingReleases = totalPendingReleases >= maximumReleases;\r\n\r\n  const handleTabChange = (tabValue: string) => {\r\n    setQuery({\r\n      ...query,\r\n      page: 1,\r\n      pageSize: response?.currentData?.meta?.pagination?.pageSize || 16,\r\n      filters: {\r\n        releasedAt: {\r\n          $notNull: tabValue !== 'pending',\r\n        },\r\n      },\r\n    });\r\n  };\r\n\r\n  const handleAddRelease = async ({ name, scheduledAt, timezone }: FormValues) => {\r\n    const response = await createRelease({\r\n      name,\r\n      scheduledAt,\r\n      timezone,\r\n    });\r\n    if ('data' in response) {\r\n      // When the response returns an object with 'data', handle success\r\n      toggleNotification({\r\n        type: 'success',\r\n        message: formatMessage({\r\n          id: 'content-releases.modal.release-created-notification-success',\r\n          defaultMessage: 'Release created.',\r\n        }),\r\n      });\r\n\r\n      trackUsage('didCreateRelease');\r\n      navigate(response.data.data.id.toString());\r\n    } else if (isFetchError(response.error)) {\r\n      // When the response returns an object with 'error', handle fetch error\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatAPIError(response.error),\r\n      });\r\n    } else {\r\n      // Otherwise, the response returns an object with 'error', handle a generic error\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Main aria-busy={isLoadingReleases || isLoadingSettings}>\r\n      <Layouts.Header\r\n        title={formatMessage({\r\n          id: 'content-releases.pages.Releases.title',\r\n          defaultMessage: 'Releases',\r\n        })}\r\n        secondaryAction={\r\n          <GradientBadge\r\n            label={formatMessage({\r\n              id: 'components.premiumFeature.title',\r\n              defaultMessage: 'Premium feature',\r\n            })}\r\n          />\r\n        }\r\n        subtitle={formatMessage({\r\n          id: 'content-releases.pages.Releases.header-subtitle',\r\n          defaultMessage: 'Create and manage content updates',\r\n        })}\r\n        primaryAction={\r\n          canCreate ? (\r\n            <Button\r\n              startIcon={<Plus />}\r\n              onClick={toggleAddReleaseModal}\r\n              disabled={hasReachedMaximumPendingReleases}\r\n            >\r\n              {formatMessage({\r\n                id: 'content-releases.header.actions.add-release',\r\n                defaultMessage: 'New release',\r\n              })}\r\n            </Button>\r\n          ) : null\r\n        }\r\n      />\r\n      <Layouts.Content>\r\n        <>\r\n          {hasReachedMaximumPendingReleases && (\r\n            <StyledAlert\r\n              marginBottom={6}\r\n              action={\r\n                <Link href=\"https://strapi.io/pricing-cloud\" isExternal>\r\n                  {formatMessage({\r\n                    id: 'content-releases.pages.Releases.max-limit-reached.action',\r\n                    defaultMessage: 'Explore plans',\r\n                  })}\r\n                </Link>\r\n              }\r\n              title={formatMessage(\r\n                {\r\n                  id: 'content-releases.pages.Releases.max-limit-reached.title',\r\n                  defaultMessage:\r\n                    'You have reached the {number} pending {number, plural, one {release} other {releases}} limit.',\r\n                },\r\n                { number: maximumReleases }\r\n              )}\r\n              onClose={() => {}}\r\n              closeLabel=\"\"\r\n            >\r\n              {formatMessage({\r\n                id: 'content-releases.pages.Releases.max-limit-reached.message',\r\n                defaultMessage: 'Upgrade to manage an unlimited number of releases.',\r\n              })}\r\n            </StyledAlert>\r\n          )}\r\n          <Tabs.Root variant=\"simple\" onValueChange={handleTabChange} value={activeTab}>\r\n            <Box paddingBottom={8}>\r\n              <Tabs.List\r\n                aria-label={formatMessage({\r\n                  id: 'content-releases.pages.Releases.tab-group.label',\r\n                  defaultMessage: 'Releases list',\r\n                })}\r\n              >\r\n                <Tabs.Trigger value=\"pending\">\r\n                  {formatMessage(\r\n                    {\r\n                      id: 'content-releases.pages.Releases.tab.pending',\r\n                      defaultMessage: 'Pending ({count})',\r\n                    },\r\n                    {\r\n                      count: totalPendingReleases,\r\n                    }\r\n                  )}\r\n                </Tabs.Trigger>\r\n                <Tabs.Trigger value=\"done\">\r\n                  {formatMessage({\r\n                    id: 'content-releases.pages.Releases.tab.done',\r\n                    defaultMessage: 'Done',\r\n                  })}\r\n                </Tabs.Trigger>\r\n              </Tabs.List>\r\n              <Divider />\r\n            </Box>\r\n            {/* Pending releases */}\r\n            <Tabs.Content value=\"pending\">\r\n              <ReleasesGrid\r\n                sectionTitle=\"pending\"\r\n                releases={response?.currentData?.data}\r\n                isError={isError}\r\n              />\r\n            </Tabs.Content>\r\n            {/* Done releases */}\r\n            <Tabs.Content value=\"done\">\r\n              <ReleasesGrid\r\n                sectionTitle=\"done\"\r\n                releases={response?.currentData?.data}\r\n                isError={isError}\r\n              />\r\n            </Tabs.Content>\r\n          </Tabs.Root>\r\n          <Pagination.Root\r\n            {...response?.currentData?.meta?.pagination}\r\n            defaultPageSize={response?.currentData?.meta?.pagination?.pageSize}\r\n          >\r\n            <Pagination.PageSize options={['8', '16', '32', '64']} />\r\n            <Pagination.Links />\r\n          </Pagination.Root>\r\n        </>\r\n      </Layouts.Content>\r\n      <ReleaseModal\r\n        open={releaseModalShown}\r\n        handleClose={toggleAddReleaseModal}\r\n        handleSubmit={handleAddRelease}\r\n        isLoading={isSubmittingForm}\r\n        initialValues={{\r\n          ...INITIAL_FORM_VALUES,\r\n          timezone: data?.data.defaultTimezone ? data.data.defaultTimezone.split('&')[1] : null,\r\n        }}\r\n      />\r\n    </Main>\r\n  );\r\n};\r\n\r\nexport { ReleasesPage, getBadgeProps };\r\n", "import { Page } from '@strapi/admin/strapi-admin';\r\nimport { Route, Routes } from 'react-router-dom';\r\n\r\nimport { PERMISSIONS } from '../constants';\r\n\r\nimport { ReleaseDetailsPage } from './ReleaseDetailsPage';\r\nimport { ReleasesPage } from './ReleasesPage';\r\n\r\nexport const App = () => {\r\n  return (\r\n    <Page.Protect permissions={PERMISSIONS.main}>\r\n      <Routes>\r\n        <Route index element={<ReleasesPage />} />\r\n        <Route path={':releaseId'} element={<ReleaseDetailsPage />} />\r\n      </Routes>\r\n    </Page.Protect>\r\n  );\r\n};\r\n"],
  "mappings": "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",
  "names": ["React", "Link", "import_jsx_runtime", "React", "import_jsx_runtime", "timezoneList", "React", "import_jsx_runtime", "RelativeTime", "_a", "_b", "_c", "response", "import_jsx_runtime", "totalEntries", "Link", "import_jsx_runtime"]
}
