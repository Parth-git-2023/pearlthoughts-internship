{
  "version": 3,
  "sources": ["../../../../../packages/core/admin/admin/src/features/AppInfo.tsx", "../../../../../packages/core/admin/admin/src/features/Tracking.tsx"],
  "sourcesContent": ["import { createContext } from '../components/Context';\r\n\r\ninterface AppInfoContextValue {\r\n  autoReload?: boolean;\r\n  communityEdition?: boolean;\r\n  currentEnvironment?: string;\r\n  dependencies?: Record<string, string>;\r\n  latestStrapiReleaseTag?: string;\r\n  nodeVersion?: string;\r\n  projectId?: string | null;\r\n  shouldUpdateStrapi?: boolean;\r\n  strapiVersion?: string | null;\r\n  useYarn?: boolean;\r\n  userId?: string;\r\n}\r\n\r\nconst [AppInfoProvider, useAppInfo] = createContext<AppInfoContextValue>('AppInfo', {});\r\n\r\nexport { AppInfoProvider, useAppInfo };\r\n\r\nexport type { AppInfoContextValue };\r\n", "import * as React from 'react';\r\n\r\nimport axios, { AxiosResponse } from 'axios';\r\n\r\nimport { useInitQuery, useTelemetryPropertiesQuery } from '../services/admin';\r\n\r\nimport { useAppInfo } from './AppInfo';\r\nimport { useAuth } from './Auth';\r\n\r\nexport interface TelemetryProperties {\r\n  useTypescriptOnServer?: boolean;\r\n  useTypescriptOnAdmin?: boolean;\r\n  isHostedOnStrapiCloud?: boolean;\r\n  numberOfAllContentTypes?: number;\r\n  numberOfComponents?: number;\r\n  numberOfDynamicZones?: number;\r\n}\r\n\r\nexport interface TrackingContextValue {\r\n  uuid?: string | boolean;\r\n  telemetryProperties?: TelemetryProperties;\r\n}\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Context\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst TrackingContext = React.createContext<TrackingContextValue>({\r\n  uuid: false,\r\n});\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Provider\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport interface TrackingProviderProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst TrackingProvider = ({ children }: TrackingProviderProps) => {\r\n  const token = useAuth('App', (state) => state.token);\r\n  const { data: initData } = useInitQuery();\r\n  const { uuid } = initData ?? {};\r\n\r\n  const { data } = useTelemetryPropertiesQuery(undefined, {\r\n    skip: !initData?.uuid || !token,\r\n  });\r\n  const value = React.useMemo(\r\n    () => ({\r\n      uuid,\r\n      telemetryProperties: data,\r\n    }),\r\n    [uuid, data]\r\n  );\r\n\r\n  return <TrackingContext.Provider value={value}>{children}</TrackingContext.Provider>;\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Hook\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\n/**\r\n * We can group these events together because none have properties so there's no benefit\r\n * to having them as separate types.\r\n *\r\n * Meanwhile those with properties have different property shapes corresponding to the specific\r\n * event so understanding which properties go with which event is very helpful.\r\n */\r\ninterface EventWithoutProperties {\r\n  name:\r\n    | 'changeComponentsOrder'\r\n    | 'didAddComponentToDynamicZone'\r\n    | 'didBulkDeleteEntries'\r\n    | 'didNotBulkDeleteEntries'\r\n    | 'didChangeDisplayedFields'\r\n    | 'didCheckDraftRelations'\r\n    | 'didClickGuidedTourHomepageApiTokens'\r\n    | 'didClickGuidedTourHomepageContentManager'\r\n    | 'didClickGuidedTourHomepageContentTypeBuilder'\r\n    | 'didClickGuidedTourStep1CollectionType'\r\n    | 'didClickGuidedTourStep2ContentManager'\r\n    | 'didClickGuidedTourStep3ApiTokens'\r\n    | 'didClickonBlogSection'\r\n    | 'didClickonCodeExampleSection'\r\n    | 'didClickonReadTheDocumentationSection'\r\n    | 'didClickOnTryStrapiCloudSection'\r\n    | 'didClickonTutorialSection'\r\n    | 'didCreateGuidedTourCollectionType'\r\n    | 'didCreateGuidedTourEntry'\r\n    | 'didCreateNewRole'\r\n    | 'didCreateRole'\r\n    | 'didDeleteToken'\r\n    | 'didDuplicateRole'\r\n    | 'didEditEditSettings'\r\n    | 'didEditEmailTemplates'\r\n    | 'didEditFieldNameOnContentType'\r\n    | 'didEditListSettings'\r\n    | 'didEditMediaLibraryConfig'\r\n    | 'didEditNameOfContentType'\r\n    | 'didGenerateGuidedTourApiTokens'\r\n    | 'didGoToMarketplace'\r\n    | 'didLaunchGuidedtour'\r\n    | 'didMissMarketplacePlugin'\r\n    | 'didNotCreateFirstAdmin'\r\n    | 'didNotSaveComponent'\r\n    | 'didPluginLearnMore'\r\n    | 'didBulkPublishEntries'\r\n    | 'didNotBulkPublishEntries'\r\n    | 'didUnpublishEntry'\r\n    | 'didBulkUnpublishEntries'\r\n    | 'didNotBulkUnpublishEntries'\r\n    | 'didSaveComponent'\r\n    | 'didSaveContentType'\r\n    | 'didSearch'\r\n    | 'didSkipGuidedtour'\r\n    | 'didSubmitPlugin'\r\n    | 'didSubmitProvider'\r\n    | 'didUpdateConditions'\r\n    | 'didSelectAllMediaLibraryElements'\r\n    | 'didSelectContentTypeFieldSettings'\r\n    | 'didSelectContentTypeSettings'\r\n    | 'didEditAuthenticationProvider'\r\n    | 'didRestoreHistoryVersion'\r\n    | 'hasClickedCTBAddFieldBanner'\r\n    | 'removeComponentFromDynamicZone'\r\n    | 'willAddMoreFieldToContentType'\r\n    | 'willBulkDeleteEntries'\r\n    | 'willBulkPublishEntries'\r\n    | 'willBulkUnpublishEntries'\r\n    | 'willChangeNumberOfEntriesPerPage'\r\n    | 'willCheckDraftRelations'\r\n    | 'willCreateComponent'\r\n    | 'willCreateComponentFromAttributesModal'\r\n    | 'willCreateContentType'\r\n    | 'willCreateFirstAdmin'\r\n    | 'willCreateNewRole'\r\n    | 'willCreateRole'\r\n    | 'willCreateSingleType'\r\n    | 'willCreateStage'\r\n    | 'willCreateWorkflow'\r\n    | 'willDeleteEntryFromList'\r\n    | 'willDeleteFieldOfContentType'\r\n    | 'willDuplicateRole'\r\n    | 'willEditEditLayout'\r\n    | 'willEditEmailTemplates'\r\n    | 'willEditEntryFromButton'\r\n    | 'willEditEntryFromHome'\r\n    | 'willEditEntryFromList'\r\n    | 'willEditFieldOfContentType'\r\n    | 'willEditMediaLibraryConfig'\r\n    | 'willEditNameOfContentType'\r\n    | 'willEditNameOfSingleType'\r\n    | 'willEditAuthenticationProvider'\r\n    | 'willEditFieldNameOnContentType'\r\n    | 'willEditStage'\r\n    | 'willFilterEntries'\r\n    | 'willInstallPlugin'\r\n    | 'willUnpublishEntry'\r\n    | 'willSaveComponent'\r\n    | 'willSaveContentType'\r\n    | 'willSaveContentTypeLayout'\r\n    | 'didEditFieldNameOnContentType'\r\n    | 'didCreateRelease';\r\n  properties?: never;\r\n}\r\n\r\ninterface DidAccessAuthenticatedAdministrationEvent {\r\n  name: 'didAccessAuthenticatedAdministration';\r\n  properties: {\r\n    registeredWidgets: string[];\r\n    projectId: string;\r\n  };\r\n}\r\n\r\ninterface DidFilterMediaLibraryElementsEvent {\r\n  name: 'didFilterMediaLibraryElements';\r\n  properties: MediaEvents['properties'] & {\r\n    filter: string;\r\n  };\r\n}\r\n\r\ninterface DidSortMediaLibraryElementsEvent {\r\n  name: 'didSortMediaLibraryElements';\r\n  properties: MediaEvents['properties'] & {\r\n    sort: string;\r\n  };\r\n}\r\n\r\ninterface DidCropFileEvent {\r\n  name: 'didCropFile';\r\n  properties: MediaEvents['properties'] & {\r\n    duplicatedFile: null | boolean;\r\n  };\r\n}\r\n\r\ninterface DidSelectFile {\r\n  name: 'didSelectFile';\r\n  properties: MediaEvents['properties'] & {\r\n    source: 'url' | 'computer';\r\n  };\r\n}\r\n\r\ninterface DidEditMediaLibraryElementsEvent {\r\n  name: 'didEditMediaLibraryElements';\r\n  properties: MediaEvents['properties'] & {\r\n    type: string;\r\n    changeLocation: string | boolean;\r\n  };\r\n}\r\n\r\ninterface MediaEvents {\r\n  name:\r\n    | 'didSearchMediaLibraryElements'\r\n    | 'didReplaceMedia'\r\n    | 'didAddMediaLibraryFolders'\r\n    | 'willAddMediaLibraryAssets';\r\n  properties: {\r\n    location: string;\r\n  };\r\n}\r\n\r\ninterface DidSelectContentTypeFieldTypeEvent {\r\n  name: 'didSelectContentTypeFieldType';\r\n  properties: {\r\n    type?: string;\r\n  };\r\n}\r\n\r\ninterface DidChangeModeEvent {\r\n  name: 'didChangeMode';\r\n  properties: {\r\n    newMode: string;\r\n  };\r\n}\r\ninterface DidSubmitWithErrorsFirstAdminEvent {\r\n  name: 'didSubmitWithErrorsFirstAdmin';\r\n  properties: {\r\n    count: string;\r\n  };\r\n}\r\n\r\ninterface WillNavigateEvent {\r\n  name: 'willNavigate';\r\n  properties: {\r\n    from: string;\r\n    to: string;\r\n  };\r\n}\r\n\r\ninterface DidAccessTokenListEvent {\r\n  name: 'didAccessTokenList';\r\n  properties: {\r\n    tokenType: TokenEvents['properties']['tokenType'];\r\n    number: number;\r\n  };\r\n}\r\ninterface LogoEvent {\r\n  name: 'didChangeLogo' | 'didClickResetLogo';\r\n  properties: {\r\n    logo: 'menu' | 'auth';\r\n  };\r\n}\r\n\r\ninterface TokenEvents {\r\n  name:\r\n    | 'didCopyTokenKey'\r\n    | 'didAddTokenFromList'\r\n    | 'didEditTokenFromList'\r\n    | 'willAccessTokenList'\r\n    | 'willAddTokenFromList'\r\n    | 'willCreateToken'\r\n    | 'willDeleteToken'\r\n    | 'willEditToken'\r\n    | 'willEditTokenFromList';\r\n  properties: {\r\n    tokenType: 'api-token' | 'transfer-token';\r\n  };\r\n}\r\n\r\ninterface WillModifyTokenEvent {\r\n  name: 'didCreateToken' | 'didEditToken';\r\n  properties: {\r\n    tokenType: TokenEvents['properties']['tokenType'];\r\n    type: 'custom' | 'full-access' | 'read-only' | Array<'push' | 'pull' | 'push-pull'>;\r\n  };\r\n}\r\n\r\ninterface DeleteEntryEvents {\r\n  name: 'willDeleteEntry' | 'didDeleteEntry' | 'didNotDeleteEntry';\r\n  properties: {\r\n    status?: string;\r\n    error?: unknown;\r\n  };\r\n}\r\n\r\ninterface CreateEntryEvents {\r\n  name: 'willCreateEntry' | 'didCreateEntry' | 'didNotCreateEntry';\r\n  properties: {\r\n    documentId?: string;\r\n    status?: string;\r\n    error?: unknown;\r\n    fromPreview?: boolean;\r\n    fromRelationModal?: boolean;\r\n  };\r\n}\r\n\r\ninterface PublishEntryEvents {\r\n  name: 'willPublishEntry' | 'didPublishEntry';\r\n  properties: {\r\n    documentId?: string;\r\n    fromPreview?: boolean;\r\n    fromRelationModal?: boolean;\r\n  };\r\n}\r\n\r\ninterface UpdateEntryEvents {\r\n  name: 'willEditEntry' | 'didEditEntry' | 'didNotEditEntry';\r\n  properties: {\r\n    documentId?: string;\r\n    status?: string;\r\n    error?: unknown;\r\n    fromPreview?: boolean;\r\n    fromRelationModal?: boolean;\r\n  };\r\n}\r\n\r\ninterface DidFilterEntriesEvent {\r\n  name: 'didFilterEntries';\r\n  properties: {\r\n    useRelation: boolean;\r\n  };\r\n}\r\n\r\ninterface DidPublishRelease {\r\n  name: 'didPublishRelease';\r\n  properties: {\r\n    totalEntries: number;\r\n    totalPublishedEntries: number;\r\n    totalUnpublishedEntries: number;\r\n  };\r\n}\r\n\r\ninterface DidUpdateCTBSchema {\r\n  name: 'didUpdateCTBSchema';\r\n  properties: {\r\n    success: boolean;\r\n    newContentTypes: number;\r\n    editedContentTypes: number;\r\n    deletedContentTypes: number;\r\n    newComponents: number;\r\n    editedComponents: number;\r\n    deletedComponents: number;\r\n    newFields: number;\r\n    editedFields: number;\r\n    deletedFields: number;\r\n  };\r\n}\r\n\r\ntype EventsWithProperties =\r\n  | CreateEntryEvents\r\n  | PublishEntryEvents\r\n  | DidAccessAuthenticatedAdministrationEvent\r\n  | DidAccessTokenListEvent\r\n  | DidChangeModeEvent\r\n  | DidCropFileEvent\r\n  | DeleteEntryEvents\r\n  | DidEditMediaLibraryElementsEvent\r\n  | DidFilterMediaLibraryElementsEvent\r\n  | DidFilterEntriesEvent\r\n  | DidSelectContentTypeFieldTypeEvent\r\n  | DidSelectFile\r\n  | DidSortMediaLibraryElementsEvent\r\n  | DidSubmitWithErrorsFirstAdminEvent\r\n  | LogoEvent\r\n  | TokenEvents\r\n  | UpdateEntryEvents\r\n  | WillModifyTokenEvent\r\n  | WillNavigateEvent\r\n  | DidPublishRelease\r\n  | MediaEvents\r\n  | DidUpdateCTBSchema;\r\n\r\nexport type TrackingEvent = EventWithoutProperties | EventsWithProperties;\r\nexport interface UseTrackingReturn {\r\n  /**\r\n   * This type helps show all the available event names before you start typing,\r\n   * however autocomplete isn't great.\r\n   */\r\n  trackUsage<TEvent extends TrackingEvent>(\r\n    event: TEvent['name'],\r\n    properties: TEvent['properties']\r\n  ): Promise<null | AxiosResponse<string>>;\r\n  trackUsage<TEvent extends Extract<TrackingEvent, { properties?: never }>>(\r\n    event: TEvent['name'],\r\n    properties?: never\r\n  ): Promise<null | AxiosResponse<string>>;\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  trackUsage<TEvent extends Extract<TrackingEvent, { properties: object }>>(\r\n    event: TEvent['name'],\r\n    properties: TEvent['properties']\r\n  ): Promise<null | AxiosResponse<string>>;\r\n}\r\n\r\n/**\r\n * @description Used to send amplitude events to the Strapi Tracking hub.\r\n *\r\n * @example\r\n * ```tsx\r\n * import { useTracking } from '@strapi/strapi/admin';\r\n *\r\n * const MyComponent = () => {\r\n *  const { trackUsage } = useTracking();\r\n *\r\n *  const handleClick = () => {\r\n *   trackUsage('my-event', { myProperty: 'myValue' });\r\n *  }\r\n *\r\n *  return <button onClick={handleClick}>Send Event</button>\r\n * }\r\n * ```\r\n */\r\nconst useTracking = (): UseTrackingReturn => {\r\n  const { uuid, telemetryProperties } = React.useContext(TrackingContext);\r\n  const userId = useAppInfo('useTracking', (state) => state.userId);\r\n  const trackUsage = React.useCallback(\r\n    async <TEvent extends TrackingEvent>(\r\n      event: TEvent['name'],\r\n      properties?: TEvent['properties']\r\n    ) => {\r\n      try {\r\n        if (uuid && !window.strapi.telemetryDisabled) {\r\n          const res = await axios.post<string>(\r\n            'https://analytics.strapi.io/api/v2/track',\r\n            {\r\n              event,\r\n              userId,\r\n              eventProperties: { ...properties },\r\n              userProperties: {},\r\n              groupProperties: {\r\n                ...telemetryProperties,\r\n                projectId: uuid,\r\n                projectType: window.strapi.projectType,\r\n              },\r\n            },\r\n            {\r\n              headers: {\r\n                'Content-Type': 'application/json',\r\n                'X-Strapi-Event': event,\r\n              },\r\n            }\r\n          );\r\n\r\n          return res;\r\n        }\r\n      } catch (err) {\r\n        // Silence is golden\r\n      }\r\n\r\n      return null;\r\n    },\r\n    [telemetryProperties, userId, uuid]\r\n  );\r\n\r\n  return { trackUsage };\r\n};\r\n\r\nexport { TrackingProvider, useTracking };\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAgBA,IAAM,CAAC,iBAAiB,UAAU,IAAI,cAAmC,WAAW,CAAC,CAAC;;;AChBtF,YAAuB;AAuDd;AA5BT,IAAM,kBAAwB,oBAAoC;AAAA,EAChE,MAAM;AACR,CAAC;AAUD,IAAM,mBAAmB,CAAC,EAAE,SAAS,MAA6B;AAChE,QAAM,QAAQ,QAAQ,OAAO,CAAC,UAAU,MAAM,KAAK;AACnD,QAAM,EAAE,MAAM,SAAS,IAAI,aAAa;AACxC,QAAM,EAAE,KAAK,IAAI,YAAY,CAAC;AAE9B,QAAM,EAAE,KAAK,IAAI,4BAA4B,QAAW;AAAA,IACtD,MAAM,EAAC,qCAAU,SAAQ,CAAC;AAAA,EAC5B,CAAC;AACD,QAAM,QAAc;AAAA,IAClB,OAAO;AAAA,MACL;AAAA,MACA,qBAAqB;AAAA,IACvB;AAAA,IACA,CAAC,MAAM,IAAI;AAAA,EACb;AAEA,aAAO,wBAAC,gBAAgB,UAAhB,EAAyB,OAAe,UAAS;AAC3D;AA8WA,IAAM,cAAc,MAAyB;AAC3C,QAAM,EAAE,MAAM,oBAAoB,IAAU,iBAAW,eAAe;AACtE,QAAM,SAAS,WAAW,eAAe,CAAC,UAAU,MAAM,MAAM;AAChE,QAAM,aAAmB;AAAA,IACvB,OACE,OACA,eACG;AACH,UAAI;AACF,YAAI,QAAQ,CAAC,OAAO,OAAO,mBAAmB;AAC5C,gBAAM,MAAM,MAAM,cAAM;AAAA,YACtB;AAAA,YACA;AAAA,cACE;AAAA,cACA;AAAA,cACA,iBAAiB,EAAE,GAAG,WAAW;AAAA,cACjC,gBAAgB,CAAC;AAAA,cACjB,iBAAiB;AAAA,gBACf,GAAG;AAAA,gBACH,WAAW;AAAA,gBACX,aAAa,OAAO,OAAO;AAAA,cAC7B;AAAA,YACF;AAAA,YACA;AAAA,cACE,SAAS;AAAA,gBACP,gBAAgB;AAAA,gBAChB,kBAAkB;AAAA,cACpB;AAAA,YACF;AAAA,UACF;AAEA,iBAAO;AAAA,QACT;AAAA,MACF,SAAS,KAAK;AAAA,MAEd;AAEA,aAAO;AAAA,IACT;AAAA,IACA,CAAC,qBAAqB,QAAQ,IAAI;AAAA,EACpC;AAEA,SAAO,EAAE,WAAW;AACtB;",
  "names": []
}
