{
  "version": 3,
  "sources": ["../../../../../packages/core/admin/admin/src/hooks/useEnterprise.ts"],
  "sourcesContent": ["import * as React from 'react';\r\n\r\nimport { useCallbackRef } from '@strapi/design-system';\r\n\r\nfunction isEnterprise() {\r\n  return window.strapi.isEE;\r\n}\r\n\r\nexport interface UseEnterpriseOptions<TCEData, TEEData, TDefaultValue, TCombinedValue> {\r\n  defaultValue?: TDefaultValue;\r\n  combine?: (ceData: TCEData, eeData: TEEData) => TCombinedValue;\r\n  enabled?: boolean;\r\n}\r\n\r\ntype UseEnterpriseReturn<TCEData, TEEData, TDefaultValue, TCombinedValue> =\r\n  TDefaultValue extends null\r\n    ? TCEData | TEEData | TCombinedValue | null\r\n    : TCEData | TEEData | TCombinedValue | TDefaultValue;\r\n\r\nexport const useEnterprise = <\r\n  TCEData,\r\n  TEEData = TCEData,\r\n  TCombinedValue = TEEData,\r\n  TDefaultValue = TCEData,\r\n>(\r\n  ceData: TCEData,\r\n  eeCallback: () => Promise<TEEData>,\r\n  opts: UseEnterpriseOptions<TCEData, TEEData, TDefaultValue, TCombinedValue> = {}\r\n): UseEnterpriseReturn<TCEData, TEEData, TDefaultValue, TCombinedValue> => {\r\n  const { defaultValue = null, combine = (_ceData, eeData) => eeData, enabled = true } = opts;\r\n  const eeCallbackRef = useCallbackRef(eeCallback);\r\n  const combineCallbackRef = useCallbackRef(combine);\r\n\r\n  // We have to use a nested object here, because functions (e.g. Components)\r\n  // can not be stored as value directly\r\n  const [{ data }, setData] = React.useState<{\r\n    data: TCEData | TEEData | TDefaultValue | TCombinedValue | null;\r\n  }>({\r\n    data: isEnterprise() && enabled ? defaultValue : ceData,\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    async function importEE() {\r\n      const eeData = await eeCallbackRef();\r\n      const combinedValue = combineCallbackRef(ceData, eeData);\r\n\r\n      setData({ data: combinedValue ? combinedValue : eeData });\r\n    }\r\n\r\n    if (isEnterprise() && enabled) {\r\n      importEE();\r\n    }\r\n  }, [ceData, eeCallbackRef, combineCallbackRef, enabled]);\r\n\r\n  // @ts-expect-error â€“ the hook type assertion works in practice. But seems to have issues here...\r\n  return data;\r\n};\r\n"],
  "mappings": ";;;;;;;;;;;AAAA,YAAuB;AAIvB,SAAS,eAAe;AACtB,SAAO,OAAO,OAAO;AACvB;AAaO,IAAM,gBAAgB,CAM3B,QACA,YACA,OAA8E,CAAC,MACN;AACzE,QAAM,EAAE,eAAe,MAAM,UAAU,CAAC,SAAS,WAAW,QAAQ,UAAU,KAAK,IAAI;AACvF,QAAM,gBAAgB,eAAe,UAAU;AAC/C,QAAM,qBAAqB,eAAe,OAAO;AAIjD,QAAM,CAAC,EAAE,KAAK,GAAG,OAAO,IAAU,eAE/B;AAAA,IACD,MAAM,aAAa,KAAK,UAAU,eAAe;AAAA,EACnD,CAAC;AAED,EAAM,gBAAU,MAAM;AACpB,mBAAe,WAAW;AACxB,YAAM,SAAS,MAAM,cAAc;AACnC,YAAM,gBAAgB,mBAAmB,QAAQ,MAAM;AAEvD,cAAQ,EAAE,MAAM,gBAAgB,gBAAgB,OAAO,CAAC;AAAA,IAC1D;AAEA,QAAI,aAAa,KAAK,SAAS;AAC7B,eAAS;AAAA,IACX;AAAA,EACF,GAAG,CAAC,QAAQ,eAAe,oBAAoB,OAAO,CAAC;AAGvD,SAAO;AACT;",
  "names": []
}
