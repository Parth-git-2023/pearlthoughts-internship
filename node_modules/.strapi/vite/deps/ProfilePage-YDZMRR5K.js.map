{
  "version": 3,
  "sources": ["../../../../../packages/core/admin/admin/src/pages/ProfilePage.tsx"],
  "sourcesContent": ["import * as React from 'react';\r\n\r\nimport { Box, Button, Flex, useNotifyAT, Grid, Typography } from '@strapi/design-system';\r\nimport { Check } from '@strapi/icons';\r\nimport upperFirst from 'lodash/upperFirst';\r\nimport { useIntl } from 'react-intl';\r\nimport * as yup from 'yup';\r\n\r\nimport { Form, FormHelpers } from '../components/Form';\r\nimport { InputRenderer } from '../components/FormInputs/Renderer';\r\nimport { Layouts } from '../components/Layouts/Layout';\r\nimport { Page } from '../components/PageHelpers';\r\nimport { useTypedDispatch, useTypedSelector } from '../core/store/hooks';\r\nimport { useAuth } from '../features/Auth';\r\nimport { useNotification } from '../features/Notifications';\r\nimport { useTracking } from '../features/Tracking';\r\nimport { useAPIErrorHandler } from '../hooks/useAPIErrorHandler';\r\nimport { AppState, setAppTheme } from '../reducer';\r\nimport { useIsSSOLockedQuery, useUpdateMeMutation } from '../services/auth';\r\nimport { isBaseQueryError } from '../utils/baseQuery';\r\nimport { translatedErrors } from '../utils/translatedErrors';\r\nimport { getDisplayName } from '../utils/users';\r\n\r\nimport { COMMON_USER_SCHEMA } from './Settings/pages/Users/utils/validation';\r\n\r\nimport type { UpdateMe } from '../../../shared/contracts/users';\r\n\r\nconst PROFILE_VALIDTION_SCHEMA = yup.object().shape({\r\n  ...COMMON_USER_SCHEMA,\r\n  currentPassword: yup\r\n    .string()\r\n    // @ts-expect-error â€“ no idea why this is failing.\r\n    .when(['password', 'confirmPassword'], (password, confirmPassword, passSchema) => {\r\n      return password || confirmPassword\r\n        ? passSchema\r\n            .required({\r\n              id: translatedErrors.required.id,\r\n              defaultMessage: 'This field is required',\r\n            })\r\n            .nullable()\r\n        : passSchema;\r\n    }),\r\n  preferedLanguage: yup.string().nullable(),\r\n});\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ProfilePage\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst ProfilePage = () => {\r\n  const localeNames = useTypedSelector((state) => state.admin_app.language.localeNames);\r\n  const { formatMessage } = useIntl();\r\n  const { trackUsage } = useTracking();\r\n  const { toggleNotification } = useNotification();\r\n  const { notifyStatus } = useNotifyAT();\r\n  const currentTheme = useTypedSelector((state) => state.admin_app.theme.currentTheme);\r\n  const dispatch = useTypedDispatch();\r\n  const {\r\n    _unstableFormatValidationErrors: formatValidationErrors,\r\n    _unstableFormatAPIError: formatApiError,\r\n  } = useAPIErrorHandler();\r\n\r\n  const user = useAuth('ProfilePage', (state) => state.user);\r\n\r\n  React.useEffect(() => {\r\n    if (user) {\r\n      notifyStatus(\r\n        formatMessage({\r\n          id: 'Settings.profile.form.notify.data.loaded',\r\n          defaultMessage: 'Your profile data has been loaded',\r\n        })\r\n      );\r\n    } else {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occured' }),\r\n      });\r\n    }\r\n  }, [formatMessage, notifyStatus, toggleNotification, user]);\r\n\r\n  const [updateMe, { isLoading: isSubmittingForm }] = useUpdateMeMutation();\r\n\r\n  const {\r\n    isLoading,\r\n    data: dataSSO,\r\n    error,\r\n  } = useIsSSOLockedQuery(undefined, {\r\n    skip: !(window.strapi.isEE && window.strapi.features.isEnabled('sso')),\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    if (error) {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatMessage({ id: 'Settings.permissions.users.sso.provider.error' }),\r\n      });\r\n    }\r\n  }, [error, formatMessage, toggleNotification]);\r\n\r\n  type UpdateUsersMeBody = UpdateMe.Request['body'] & {\r\n    confirmPassword: string;\r\n    currentTheme: AppState['theme']['currentTheme'];\r\n  };\r\n\r\n  const handleSubmit = async (\r\n    body: UpdateUsersMeBody,\r\n    { setErrors }: FormHelpers<UpdateUsersMeBody>\r\n  ) => {\r\n    const { confirmPassword: _confirmPassword, currentTheme, ...bodyRest } = body;\r\n    let dataToSend = bodyRest;\r\n\r\n    // The password fields are optional. If the user didn't touch them, don't send any password\r\n    // to the API, because an empty string would throw a validation error\r\n    if (dataToSend.password === '') {\r\n      const {\r\n        password: _password,\r\n        currentPassword: _currentPassword,\r\n        ...passwordRequestBodyRest\r\n      } = dataToSend;\r\n      dataToSend = passwordRequestBodyRest;\r\n    }\r\n\r\n    const res = await updateMe(dataToSend);\r\n\r\n    if ('data' in res) {\r\n      dispatch(setAppTheme(currentTheme));\r\n\r\n      trackUsage('didChangeMode', { newMode: currentTheme });\r\n\r\n      toggleNotification({\r\n        type: 'success',\r\n        message: formatMessage({ id: 'notification.success.saved', defaultMessage: 'Saved' }),\r\n      });\r\n    }\r\n\r\n    if ('error' in res) {\r\n      if (isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\r\n        setErrors(formatValidationErrors(res.error));\r\n      } else if (isBaseQueryError(res.error)) {\r\n        toggleNotification({\r\n          type: 'danger',\r\n          message: formatApiError(res.error),\r\n        });\r\n      } else {\r\n        toggleNotification({\r\n          type: 'danger',\r\n          message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occured' }),\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  if (isLoading) {\r\n    return <Page.Loading />;\r\n  }\r\n\r\n  const hasLockedRole = dataSSO?.isSSOLocked ?? false;\r\n  const { email, firstname, lastname, username, preferedLanguage } = user ?? {};\r\n  const initialData = {\r\n    email: email ?? '',\r\n    firstname: firstname ?? '',\r\n    lastname: lastname ?? '',\r\n    username: username ?? '',\r\n    preferedLanguage,\r\n    currentTheme,\r\n    confirmPassword: '',\r\n    password: '',\r\n  };\r\n\r\n  return (\r\n    <Page.Main aria-busy={isSubmittingForm}>\r\n      <Page.Title>\r\n        {formatMessage({\r\n          id: 'Settings.profile.form.section.head.title',\r\n          defaultMessage: 'User profile',\r\n        })}\r\n      </Page.Title>\r\n      <Form\r\n        method=\"PUT\"\r\n        onSubmit={handleSubmit}\r\n        initialValues={initialData}\r\n        validationSchema={PROFILE_VALIDTION_SCHEMA}\r\n      >\r\n        {({ isSubmitting, modified }) => (\r\n          <>\r\n            <Layouts.Header\r\n              title={getDisplayName(user)}\r\n              primaryAction={\r\n                <Button\r\n                  startIcon={<Check />}\r\n                  loading={isSubmitting}\r\n                  type=\"submit\"\r\n                  disabled={!modified}\r\n                >\r\n                  {formatMessage({ id: 'global.save', defaultMessage: 'Save' })}\r\n                </Button>\r\n              }\r\n            />\r\n            <Box paddingBottom={10}>\r\n              <Layouts.Content>\r\n                <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\r\n                  <UserInfoSection />\r\n                  {!hasLockedRole && <PasswordSection />}\r\n                  <PreferencesSection localeNames={localeNames} />\r\n                </Flex>\r\n              </Layouts.Content>\r\n            </Box>\r\n          </>\r\n        )}\r\n      </Form>\r\n    </Page.Main>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * PasswordSection\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst PasswordSection = () => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  return (\r\n    <Box\r\n      background=\"neutral0\"\r\n      hasRadius\r\n      shadow=\"filterShadow\"\r\n      paddingTop={6}\r\n      paddingBottom={6}\r\n      paddingLeft={7}\r\n      paddingRight={7}\r\n    >\r\n      <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\r\n        <Typography variant=\"delta\" tag=\"h2\">\r\n          {formatMessage({\r\n            id: 'global.change-password',\r\n            defaultMessage: 'Change password',\r\n          })}\r\n        </Typography>\r\n        {[\r\n          [\r\n            {\r\n              label: formatMessage({\r\n                id: 'Auth.form.currentPassword.label',\r\n                defaultMessage: 'Current Password',\r\n              }),\r\n              name: 'currentPassword',\r\n              size: 6,\r\n              type: 'password' as const,\r\n            },\r\n          ],\r\n          [\r\n            {\r\n              autoComplete: 'new-password',\r\n              label: formatMessage({\r\n                id: 'global.password',\r\n                defaultMessage: 'Password',\r\n              }),\r\n              name: 'password',\r\n              size: 6,\r\n              type: 'password' as const,\r\n            },\r\n            {\r\n              autoComplete: 'new-password',\r\n              label: formatMessage({\r\n                id: 'Auth.form.confirmPassword.label',\r\n                defaultMessage: 'Confirm Password',\r\n              }),\r\n              name: 'confirmPassword',\r\n              size: 6,\r\n              type: 'password' as const,\r\n            },\r\n          ],\r\n        ].map((row, index) => (\r\n          <Grid.Root key={index} gap={5}>\r\n            {row.map(({ size, ...field }) => (\r\n              <Grid.Item key={field.name} col={size} direction=\"column\" alignItems=\"stretch\">\r\n                <InputRenderer {...field} />\r\n              </Grid.Item>\r\n            ))}\r\n          </Grid.Root>\r\n        ))}\r\n      </Flex>\r\n    </Box>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * PreferencesSection\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface PreferencesSectionProps {\r\n  localeNames: Record<string, string>;\r\n}\r\n\r\nconst PreferencesSection = ({ localeNames }: PreferencesSectionProps) => {\r\n  const { formatMessage } = useIntl();\r\n  const themesToDisplay = useTypedSelector((state) => state.admin_app.theme.availableThemes);\r\n\r\n  return (\r\n    <Box\r\n      background=\"neutral0\"\r\n      hasRadius\r\n      shadow=\"filterShadow\"\r\n      paddingTop={6}\r\n      paddingBottom={6}\r\n      paddingLeft={7}\r\n      paddingRight={7}\r\n    >\r\n      <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\r\n        <Flex direction=\"column\" alignItems=\"stretch\" gap={1}>\r\n          <Typography variant=\"delta\" tag=\"h2\">\r\n            {formatMessage({\r\n              id: 'Settings.profile.form.section.experience.title',\r\n              defaultMessage: 'Experience',\r\n            })}\r\n          </Typography>\r\n          <Typography>\r\n            {formatMessage(\r\n              {\r\n                id: 'Settings.profile.form.section.experience.interfaceLanguageHelp',\r\n                defaultMessage:\r\n                  'Preference changes will apply only to you. More information is available {here}.',\r\n              },\r\n              {\r\n                here: (\r\n                  <Box\r\n                    tag=\"a\"\r\n                    color=\"primary600\"\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                    href=\"https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#locales\"\r\n                  >\r\n                    {formatMessage({\r\n                      id: 'Settings.profile.form.section.experience.here',\r\n                      defaultMessage: 'here',\r\n                    })}\r\n                  </Box>\r\n                ),\r\n              }\r\n            )}\r\n          </Typography>\r\n        </Flex>\r\n        <Grid.Root gap={5}>\r\n          {[\r\n            {\r\n              hint: formatMessage({\r\n                id: 'Settings.profile.form.section.experience.interfaceLanguage.hint',\r\n                defaultMessage: 'This will only display your own interface in the chosen language.',\r\n              }),\r\n              label: formatMessage({\r\n                id: 'Settings.profile.form.section.experience.interfaceLanguage',\r\n                defaultMessage: 'Interface language',\r\n              }),\r\n              name: 'preferedLanguage',\r\n              options: Object.entries(localeNames).map(([value, label]) => ({\r\n                label,\r\n                value,\r\n              })),\r\n              placeholder: formatMessage({\r\n                id: 'global.select',\r\n                defaultMessage: 'Select',\r\n              }),\r\n              size: 6,\r\n              type: 'enumeration' as const,\r\n            },\r\n            {\r\n              hint: formatMessage({\r\n                id: 'Settings.profile.form.section.experience.mode.hint',\r\n                defaultMessage: 'Displays your interface in the chosen mode.',\r\n              }),\r\n              label: formatMessage({\r\n                id: 'Settings.profile.form.section.experience.mode.label',\r\n                defaultMessage: 'Interface mode',\r\n              }),\r\n              name: 'currentTheme',\r\n              options: [\r\n                {\r\n                  label: formatMessage({\r\n                    id: 'Settings.profile.form.section.experience.mode.option-system-label',\r\n                    defaultMessage: 'Use system settings',\r\n                  }),\r\n                  value: 'system',\r\n                },\r\n                ...themesToDisplay.map((theme) => ({\r\n                  label: formatMessage(\r\n                    {\r\n                      id: 'Settings.profile.form.section.experience.mode.option-label',\r\n                      defaultMessage: '{name} mode',\r\n                    },\r\n                    {\r\n                      name: formatMessage({\r\n                        id: theme,\r\n                        defaultMessage: upperFirst(theme),\r\n                      }),\r\n                    }\r\n                  ),\r\n                  value: theme,\r\n                })),\r\n              ],\r\n              placeholder: formatMessage({\r\n                id: 'components.Select.placeholder',\r\n                defaultMessage: 'Select',\r\n              }),\r\n              size: 6,\r\n              type: 'enumeration' as const,\r\n            },\r\n          ].map(({ size, ...field }) => (\r\n            <Grid.Item key={field.name} col={size} direction=\"column\" alignItems=\"stretch\">\r\n              <InputRenderer {...field} />\r\n            </Grid.Item>\r\n          ))}\r\n        </Grid.Root>\r\n      </Flex>\r\n    </Box>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * UserInfoSection\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst UserInfoSection = () => {\r\n  const { formatMessage } = useIntl();\r\n\r\n  return (\r\n    <Box\r\n      background=\"neutral0\"\r\n      hasRadius\r\n      shadow=\"filterShadow\"\r\n      paddingTop={6}\r\n      paddingBottom={6}\r\n      paddingLeft={7}\r\n      paddingRight={7}\r\n    >\r\n      <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\r\n        <Typography variant=\"delta\" tag=\"h2\">\r\n          {formatMessage({\r\n            id: 'global.profile',\r\n            defaultMessage: 'Profile',\r\n          })}\r\n        </Typography>\r\n        <Grid.Root gap={5}>\r\n          {[\r\n            {\r\n              label: formatMessage({\r\n                id: 'Auth.form.firstname.label',\r\n                defaultMessage: 'First name',\r\n              }),\r\n              name: 'firstname',\r\n              required: true,\r\n              size: 6,\r\n              type: 'string' as const,\r\n            },\r\n            {\r\n              label: formatMessage({\r\n                id: 'Auth.form.lastname.label',\r\n                defaultMessage: 'Last name',\r\n              }),\r\n              name: 'lastname',\r\n              size: 6,\r\n              type: 'string' as const,\r\n            },\r\n            {\r\n              label: formatMessage({\r\n                id: 'Auth.form.email.label',\r\n                defaultMessage: 'Email',\r\n              }),\r\n              name: 'email',\r\n              required: true,\r\n              size: 6,\r\n              type: 'email' as const,\r\n            },\r\n            {\r\n              label: formatMessage({\r\n                id: 'Auth.form.username.label',\r\n                defaultMessage: 'Username',\r\n              }),\r\n              name: 'username',\r\n              size: 6,\r\n              type: 'string' as const,\r\n            },\r\n          ].map(({ size, ...field }) => (\r\n            <Grid.Item key={field.name} col={size} direction=\"column\" alignItems=\"stretch\">\r\n              <InputRenderer {...field} />\r\n            </Grid.Item>\r\n          ))}\r\n        </Grid.Root>\r\n      </Flex>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport { ProfilePage };\r\n"],
  "mappings": "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",
  "names": ["create", "currentTheme", "upperFirst"]
}
