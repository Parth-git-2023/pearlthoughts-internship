{
  "version": 3,
  "sources": ["../../../../../packages/core/admin/ee/admin/src/pages/AuthPage/components/Providers.tsx", "../../../../../packages/core/admin/ee/admin/src/pages/AuthPage/constants.ts"],
  "sourcesContent": ["import { Box, Button, Divider, Flex, Loader, Main, Typography, Link } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\nimport { NavLink, Navigate, useNavigate } from 'react-router-dom';\r\nimport { styled } from 'styled-components';\r\n\r\nimport { Logo } from '../../../../../../admin/src/components/UnauthenticatedLogo';\r\nimport {\r\n  Column,\r\n  LayoutContent,\r\n  UnauthenticatedLayout,\r\n} from '../../../../../../admin/src/layouts/UnauthenticatedLayout';\r\nimport { useGetProvidersQuery } from '../../../../../../admin/src/services/auth';\r\n\r\nimport { SSOProviders } from './SSOProviders';\r\n\r\nconst Providers = () => {\r\n  const navigate = useNavigate();\r\n  const { formatMessage } = useIntl();\r\n  const { isLoading, data: providers = [] } = useGetProvidersQuery(undefined, {\r\n    skip: !window.strapi.features.isEnabled(window.strapi.features.SSO),\r\n  });\r\n\r\n  const handleClick = () => {\r\n    navigate('/auth/login');\r\n  };\r\n\r\n  if (\r\n    !window.strapi.features.isEnabled(window.strapi.features.SSO) ||\r\n    (!isLoading && providers.length === 0)\r\n  ) {\r\n    return <Navigate to=\"/auth/login\" />;\r\n  }\r\n\r\n  return (\r\n    <UnauthenticatedLayout>\r\n      <Main>\r\n        <LayoutContent>\r\n          <Column>\r\n            <Logo />\r\n            <Box paddingTop={6} paddingBottom={1}>\r\n              <Typography tag=\"h1\" variant=\"alpha\">\r\n                {formatMessage({ id: 'Auth.form.welcome.title' })}\r\n              </Typography>\r\n            </Box>\r\n            <Box paddingBottom={7}>\r\n              <Typography variant=\"epsilon\" textColor=\"neutral600\">\r\n                {formatMessage({ id: 'Auth.login.sso.subtitle' })}\r\n              </Typography>\r\n            </Box>\r\n          </Column>\r\n          <Flex direction=\"column\" alignItems=\"stretch\" gap={7}>\r\n            {isLoading ? (\r\n              <Flex justifyContent=\"center\">\r\n                <Loader>{formatMessage({ id: 'Auth.login.sso.loading' })}</Loader>\r\n              </Flex>\r\n            ) : (\r\n              <SSOProviders providers={providers} />\r\n            )}\r\n            <Flex>\r\n              <DividerFull />\r\n              <Box paddingLeft={3} paddingRight={3}>\r\n                <Typography variant=\"sigma\" textColor=\"neutral600\">\r\n                  {formatMessage({ id: 'or' })}\r\n                </Typography>\r\n              </Box>\r\n              <DividerFull />\r\n            </Flex>\r\n            <Button fullWidth size=\"L\" onClick={handleClick}>\r\n              {formatMessage({ id: 'Auth.form.button.login.strapi' })}\r\n            </Button>\r\n          </Flex>\r\n        </LayoutContent>\r\n        <Flex justifyContent=\"center\">\r\n          <Box paddingTop={4}>\r\n            <Link tag={NavLink} to=\"/auth/forgot-password\">\r\n              <Typography variant=\"pi\">\r\n                {formatMessage({ id: 'Auth.link.forgot-password' })}\r\n              </Typography>\r\n            </Link>\r\n          </Box>\r\n        </Flex>\r\n      </Main>\r\n    </UnauthenticatedLayout>\r\n  );\r\n};\r\n\r\nconst DividerFull = styled(Divider)`\r\n  flex: 1;\r\n`;\r\n\r\nexport { Providers };\r\n", "import type { ComponentType } from 'react';\r\n\r\nimport { Providers } from './components/Providers';\r\n\r\ntype AuthType = 'providers';\r\n\r\ntype FormDictionary = Record<AuthType, ComponentType>;\r\n\r\nexport const FORMS = {\r\n  providers: Providers,\r\n} satisfies FormDictionary;\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BW;AAfX,IAAM,YAAY,MAAM;AACtB,QAAM,WAAW,YAAY;AAC7B,QAAM,EAAE,cAAc,IAAI,QAAQ;AAClC,QAAM,EAAE,WAAW,MAAM,YAAY,CAAC,EAAE,IAAI,qBAAqB,QAAW;AAAA,IAC1E,MAAM,CAAC,OAAO,OAAO,SAAS,UAAU,OAAO,OAAO,SAAS,GAAG;AAAA,EACpE,CAAC;AAED,QAAM,cAAc,MAAM;AACxB,aAAS,aAAa;AAAA,EACxB;AAEA,MACE,CAAC,OAAO,OAAO,SAAS,UAAU,OAAO,OAAO,SAAS,GAAG,KAC3D,CAAC,aAAa,UAAU,WAAW,GACpC;AACA,eAAO,wBAAC,YAAS,IAAG,eAAc;AAAA,EACpC;AAEA,aACE,wBAAC,yBACC,uCAAC,QACC;AAAA,iCAAC,iBACC;AAAA,mCAAC,UACC;AAAA,oCAAC,QAAK;AAAA,YACN,wBAAC,OAAI,YAAY,GAAG,eAAe,GACjC,sCAAC,cAAW,KAAI,MAAK,SAAQ,SAC1B,wBAAc,EAAE,IAAI,0BAA0B,CAAC,GAClD,GACF;AAAA,YACA,wBAAC,OAAI,eAAe,GAClB,sCAAC,cAAW,SAAQ,WAAU,WAAU,cACrC,wBAAc,EAAE,IAAI,0BAA0B,CAAC,GAClD,GACF;AAAA,SACF;AAAA,UACA,yBAAC,QAAK,WAAU,UAAS,YAAW,WAAU,KAAK,GAChD;AAAA,wBACC,wBAAC,QAAK,gBAAe,UACnB,sCAAC,UAAQ,wBAAc,EAAE,IAAI,yBAAyB,CAAC,GAAE,GAC3D,QAEA,wBAAC,gBAAa,WAAsB;AAAA,YAEtC,yBAAC,QACC;AAAA,sCAAC,eAAY;AAAA,cACb,wBAAC,OAAI,aAAa,GAAG,cAAc,GACjC,sCAAC,cAAW,SAAQ,SAAQ,WAAU,cACnC,wBAAc,EAAE,IAAI,KAAK,CAAC,GAC7B,GACF;AAAA,cACA,wBAAC,eAAY;AAAA,WACf;AAAA,YACA,wBAAC,UAAO,WAAS,MAAC,MAAK,KAAI,SAAS,aACjC,wBAAc,EAAE,IAAI,gCAAgC,CAAC,GACxD;AAAA,SACF;AAAA,OACF;AAAA,QACA,wBAAC,QAAK,gBAAe,UACnB,sCAAC,OAAI,YAAY,GACf,sCAAC,QAAK,KAAK,SAAS,IAAG,yBACrB,sCAAC,cAAW,SAAQ,MACjB,wBAAc,EAAE,IAAI,4BAA4B,CAAC,GACpD,GACF,GACF,GACF;AAAA,KACF,GACF;AAEJ;AAEA,IAAM,cAAc,GAAO,OAAO;AAAA;AAAA;;;AC9E3B,IAAM,QAAQ;AAAA,EACnB,WAAW;AACb;",
  "names": []
}
