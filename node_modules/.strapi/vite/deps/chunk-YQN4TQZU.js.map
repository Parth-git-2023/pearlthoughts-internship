{
  "version": 3,
  "sources": ["../../../../../packages/core/admin/admin/src/features/StrapiApp.tsx", "../../../../../packages/core/admin/admin/src/hooks/useQueryParams.ts", "../../../../../packages/core/admin/admin/src/reducer.ts", "../../../../../packages/core/admin/admin/src/services/auth.ts", "../../../../../packages/core/admin/admin/src/features/Auth.tsx"],
  "sourcesContent": ["import { createContext } from '../components/Context';\r\nimport { RBAC } from '../core/apis/rbac';\r\nimport { Router } from '../core/apis/router';\r\n\r\nimport type { StrapiApp } from '../StrapiApp';\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * StrapiApp\r\n * -----------------------------------------------------------------------------------------------*/\r\ninterface StrapiAppContextValue\r\n  extends Pick<\r\n      StrapiApp,\r\n      | 'customFields'\r\n      | 'getPlugin'\r\n      | 'getAdminInjectedComponents'\r\n      | 'plugins'\r\n      | 'runHookParallel'\r\n      | 'runHookSeries'\r\n      | 'widgets'\r\n    >,\r\n    Pick<Router, 'menu' | 'settings'> {\r\n  components: StrapiApp['library']['components'];\r\n  fields: StrapiApp['library']['fields'];\r\n  rbac: RBAC;\r\n  runHookWaterfall: <TData>(\r\n    name: Parameters<StrapiApp['runHookWaterfall']>[0],\r\n    initialValue: TData\r\n  ) => TData;\r\n}\r\n\r\nconst [StrapiAppProvider, useStrapiApp] = createContext<StrapiAppContextValue>('StrapiApp');\r\n\r\nexport { StrapiAppProvider, useStrapiApp };\r\nexport type { StrapiAppContextValue };\r\n", "import { useCallback, useMemo } from 'react';\r\n\r\nimport { parse, stringify } from 'qs';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\n\r\nconst useSearch = () => {\r\n  const { search } = useLocation();\r\n\r\n  return useMemo(() => search, [search]);\r\n};\r\n\r\nconst useQueryParams = <TQuery extends object>(initialParams?: TQuery) => {\r\n  const search = useSearch();\r\n  const navigate = useNavigate();\r\n\r\n  const query = useMemo(() => {\r\n    // TODO: investigate why sometimes we're getting the search with a leading `?` and sometimes not.\r\n    const searchQuery = search.startsWith('?') ? search.slice(1) : search;\r\n    if (!search && initialParams) {\r\n      return initialParams;\r\n    }\r\n\r\n    return { ...initialParams, ...parse(searchQuery) } as TQuery;\r\n  }, [search, initialParams]);\r\n\r\n  const setQuery = useCallback(\r\n    (nextParams: TQuery, method: 'push' | 'remove' = 'push', replace = false) => {\r\n      let nextQuery = { ...query };\r\n\r\n      if (method === 'remove') {\r\n        Object.keys(nextParams).forEach((key) => {\r\n          if (Object.prototype.hasOwnProperty.call(nextQuery, key)) {\r\n            // @ts-expect-error â€“ this is fine, if you want to fix it, please do.\r\n            delete nextQuery[key];\r\n          }\r\n        });\r\n      } else {\r\n        nextQuery = { ...query, ...nextParams };\r\n      }\r\n\r\n      navigate({ search: stringify(nextQuery, { encode: false }) }, { replace });\r\n    },\r\n    [navigate, query]\r\n  );\r\n\r\n  return [{ query, rawQuery: search }, setQuery] as const;\r\n};\r\n\r\nexport { useQueryParams };\r\n", "import { createSlice } from '@reduxjs/toolkit';\r\n\r\nimport { PermissionMap } from './types/permissions';\r\nimport { getCookieValue, setCookie, deleteCookie } from './utils/cookies';\r\n\r\nimport type { PayloadAction } from '@reduxjs/toolkit';\r\n\r\ntype ThemeName = 'light' | 'dark' | 'system';\r\n\r\ninterface AppState {\r\n  language: {\r\n    locale: string;\r\n    localeNames: Record<string, string>;\r\n  };\r\n  permissions: Partial<PermissionMap>;\r\n  theme: {\r\n    currentTheme: ThemeName;\r\n    availableThemes: string[];\r\n  };\r\n  token?: string | null;\r\n}\r\n\r\nconst STORAGE_KEYS = {\r\n  TOKEN: 'jwtToken',\r\n  STATUS: 'isLoggedIn',\r\n};\r\n\r\nconst THEME_LOCAL_STORAGE_KEY = 'STRAPI_THEME';\r\nconst LANGUAGE_LOCAL_STORAGE_KEY = 'strapi-admin-language';\r\n\r\nexport const getStoredToken = (): string | null => {\r\n  const fromLocalStorage = localStorage.getItem(STORAGE_KEYS.TOKEN);\r\n  if (fromLocalStorage) {\r\n    return JSON.parse(fromLocalStorage);\r\n  }\r\n\r\n  const fromCookie = getCookieValue(STORAGE_KEYS.TOKEN);\r\n  return fromCookie ?? null;\r\n};\r\n\r\nconst adminSlice = createSlice({\r\n  name: 'admin',\r\n  initialState: () => {\r\n    return {\r\n      language: {\r\n        locale: 'en',\r\n        localeNames: { en: 'English' },\r\n      },\r\n      permissions: {},\r\n      theme: {\r\n        availableThemes: [],\r\n        currentTheme: localStorage.getItem(THEME_LOCAL_STORAGE_KEY) || 'system',\r\n      },\r\n      token: null,\r\n    } as AppState;\r\n  },\r\n  reducers: {\r\n    setAppTheme(state, action: PayloadAction<ThemeName>) {\r\n      state.theme.currentTheme = action.payload;\r\n      window.localStorage.setItem(THEME_LOCAL_STORAGE_KEY, action.payload);\r\n    },\r\n    setAvailableThemes(state, action: PayloadAction<AppState['theme']['availableThemes']>) {\r\n      state.theme.availableThemes = action.payload;\r\n    },\r\n    setLocale(state, action: PayloadAction<string>) {\r\n      state.language.locale = action.payload;\r\n\r\n      window.localStorage.setItem(LANGUAGE_LOCAL_STORAGE_KEY, action.payload);\r\n      document.documentElement.setAttribute('lang', action.payload);\r\n    },\r\n    setToken(state, action: PayloadAction<string | null>) {\r\n      state.token = action.payload;\r\n    },\r\n    login(state, action: PayloadAction<{ token: string; persist?: boolean }>) {\r\n      const { token, persist } = action.payload;\r\n\r\n      if (!persist) {\r\n        setCookie(STORAGE_KEYS.TOKEN, token);\r\n      } else {\r\n        window.localStorage.setItem(STORAGE_KEYS.TOKEN, JSON.stringify(token));\r\n      }\r\n      window.localStorage.setItem(STORAGE_KEYS.STATUS, 'true');\r\n      state.token = token;\r\n    },\r\n    logout(state) {\r\n      state.token = null;\r\n      deleteCookie(STORAGE_KEYS.TOKEN);\r\n      window.localStorage.removeItem(STORAGE_KEYS.TOKEN);\r\n      window.localStorage.removeItem(STORAGE_KEYS.STATUS);\r\n    },\r\n  },\r\n});\r\n\r\nconst reducer = adminSlice.reducer;\r\n\r\nexport const { setAppTheme, setAvailableThemes, setLocale, setToken, logout, login } =\r\n  adminSlice.actions;\r\n\r\nexport { reducer, THEME_LOCAL_STORAGE_KEY, LANGUAGE_LOCAL_STORAGE_KEY };\r\nexport type { AppState, ThemeName };\r\n", "import { ProvidersOptions } from '../../../shared/contracts/admin';\r\nimport {\r\n  type RenewToken,\r\n  type Login,\r\n  type ResetPassword,\r\n  type RegisterAdmin,\r\n  type Register,\r\n  type RegistrationInfo,\r\n  ForgotPassword,\r\n} from '../../../shared/contracts/authentication';\r\nimport { Check } from '../../../shared/contracts/permissions';\r\nimport { GetProviders, IsSSOLocked } from '../../../shared/contracts/providers';\r\nimport { type GetOwnPermissions, type GetMe, type UpdateMe } from '../../../shared/contracts/users';\r\n\r\nimport { adminApi } from './api';\r\n\r\nconst authService = adminApi\r\n  .enhanceEndpoints({\r\n    addTagTypes: ['User', 'Me', 'ProvidersOptions'],\r\n  })\r\n  .injectEndpoints({\r\n    endpoints: (builder) => ({\r\n      /**\r\n       * ME\r\n       */\r\n      getMe: builder.query<GetMe.Response['data'], void>({\r\n        query: () => ({\r\n          method: 'GET',\r\n          url: '/admin/users/me',\r\n        }),\r\n        transformResponse(res: GetMe.Response) {\r\n          return res.data;\r\n        },\r\n        providesTags: (res) => (res ? ['Me', { type: 'User', id: res.id }] : ['Me']),\r\n      }),\r\n      getMyPermissions: builder.query<GetOwnPermissions.Response['data'], void>({\r\n        query: () => ({\r\n          method: 'GET',\r\n          url: '/admin/users/me/permissions',\r\n        }),\r\n        transformResponse(res: GetOwnPermissions.Response) {\r\n          return res.data;\r\n        },\r\n      }),\r\n      updateMe: builder.mutation<UpdateMe.Response['data'], UpdateMe.Request['body']>({\r\n        query: (body) => ({\r\n          method: 'PUT',\r\n          url: '/admin/users/me',\r\n          data: body,\r\n        }),\r\n        transformResponse(res: UpdateMe.Response) {\r\n          return res.data;\r\n        },\r\n        invalidatesTags: ['Me'],\r\n      }),\r\n      /**\r\n       * Permissions\r\n       */\r\n      checkPermissions: builder.query<Check.Response, Check.Request['body']>({\r\n        query: (permissions) => ({\r\n          method: 'POST',\r\n          url: '/admin/permissions/check',\r\n          data: permissions,\r\n        }),\r\n      }),\r\n      /**\r\n       * Auth methods\r\n       */\r\n      login: builder.mutation<Login.Response['data'], Login.Request['body']>({\r\n        query: (body) => ({\r\n          method: 'POST',\r\n          url: '/admin/login',\r\n          data: body,\r\n        }),\r\n        transformResponse(res: Login.Response) {\r\n          return res.data;\r\n        },\r\n        invalidatesTags: ['Me'],\r\n      }),\r\n      logout: builder.mutation<void, void>({\r\n        query: () => ({\r\n          method: 'POST',\r\n          url: '/admin/logout',\r\n        }),\r\n      }),\r\n      resetPassword: builder.mutation<\r\n        ResetPassword.Response['data'],\r\n        ResetPassword.Request['body']\r\n      >({\r\n        query: (body) => ({\r\n          method: 'POST',\r\n          url: '/admin/reset-password',\r\n          data: body,\r\n        }),\r\n        transformResponse(res: ResetPassword.Response) {\r\n          return res.data;\r\n        },\r\n      }),\r\n      renewToken: builder.mutation<RenewToken.Response['data'], RenewToken.Request['body']>({\r\n        query: (body) => ({\r\n          method: 'POST',\r\n          url: '/admin/renew-token',\r\n          data: body,\r\n        }),\r\n        transformResponse(res: RenewToken.Response) {\r\n          return res.data;\r\n        },\r\n      }),\r\n      getRegistrationInfo: builder.query<\r\n        RegistrationInfo.Response['data'],\r\n        RegistrationInfo.Request['query']['registrationToken']\r\n      >({\r\n        query: (registrationToken) => ({\r\n          url: '/admin/registration-info',\r\n          method: 'GET',\r\n          config: {\r\n            params: {\r\n              registrationToken,\r\n            },\r\n          },\r\n        }),\r\n        transformResponse(res: RegistrationInfo.Response) {\r\n          return res.data;\r\n        },\r\n      }),\r\n      registerAdmin: builder.mutation<\r\n        RegisterAdmin.Response['data'],\r\n        RegisterAdmin.Request['body']\r\n      >({\r\n        query: (body) => ({\r\n          method: 'POST',\r\n          url: '/admin/register-admin',\r\n          data: body,\r\n        }),\r\n        transformResponse(res: RegisterAdmin.Response) {\r\n          return res.data;\r\n        },\r\n      }),\r\n      registerUser: builder.mutation<Register.Response['data'], Register.Request['body']>({\r\n        query: (body) => ({\r\n          method: 'POST',\r\n          url: '/admin/register',\r\n          data: body,\r\n        }),\r\n        transformResponse(res: Register.Response) {\r\n          return res.data;\r\n        },\r\n      }),\r\n      forgotPassword: builder.mutation<ForgotPassword.Response, ForgotPassword.Request['body']>({\r\n        query: (body) => ({\r\n          url: '/admin/forgot-password',\r\n          method: 'POST',\r\n          data: body,\r\n        }),\r\n      }),\r\n      isSSOLocked: builder.query<IsSSOLocked.Response['data'], void>({\r\n        query: () => ({\r\n          url: '/admin/providers/isSSOLocked',\r\n          method: 'GET',\r\n        }),\r\n        transformResponse(res: IsSSOLocked.Response) {\r\n          return res.data;\r\n        },\r\n      }),\r\n      getProviders: builder.query<GetProviders.Response, void>({\r\n        query: () => ({\r\n          url: '/admin/providers',\r\n          method: 'GET',\r\n        }),\r\n      }),\r\n      getProviderOptions: builder.query<ProvidersOptions.Response['data'], void>({\r\n        query: () => ({\r\n          url: '/admin/providers/options',\r\n          method: 'GET',\r\n        }),\r\n        transformResponse(res: ProvidersOptions.Response) {\r\n          return res.data;\r\n        },\r\n        providesTags: ['ProvidersOptions'],\r\n      }),\r\n      updateProviderOptions: builder.mutation<\r\n        ProvidersOptions.Response['data'],\r\n        ProvidersOptions.Request['body']\r\n      >({\r\n        query: (body) => ({\r\n          url: '/admin/providers/options',\r\n          method: 'PUT',\r\n          data: body,\r\n        }),\r\n        transformResponse(res: ProvidersOptions.Response) {\r\n          return res.data;\r\n        },\r\n        invalidatesTags: ['ProvidersOptions'],\r\n      }),\r\n    }),\r\n    overrideExisting: false,\r\n  });\r\n\r\nconst {\r\n  useCheckPermissionsQuery,\r\n  useLazyCheckPermissionsQuery,\r\n  useGetMeQuery,\r\n  useLoginMutation,\r\n  useRenewTokenMutation,\r\n  useLogoutMutation,\r\n  useUpdateMeMutation,\r\n  useResetPasswordMutation,\r\n  useRegisterAdminMutation,\r\n  useRegisterUserMutation,\r\n  useGetRegistrationInfoQuery,\r\n  useForgotPasswordMutation,\r\n  useGetMyPermissionsQuery,\r\n  useIsSSOLockedQuery,\r\n  useGetProvidersQuery,\r\n  useGetProviderOptionsQuery,\r\n  useUpdateProviderOptionsMutation,\r\n} = authService;\r\n\r\nexport {\r\n  useCheckPermissionsQuery,\r\n  useLazyCheckPermissionsQuery,\r\n  useGetMeQuery,\r\n  useLoginMutation,\r\n  useRenewTokenMutation,\r\n  useLogoutMutation,\r\n  useUpdateMeMutation,\r\n  useResetPasswordMutation,\r\n  useRegisterAdminMutation,\r\n  useRegisterUserMutation,\r\n  useGetRegistrationInfoQuery,\r\n  useForgotPasswordMutation,\r\n  useGetMyPermissionsQuery,\r\n  useIsSSOLockedQuery,\r\n  useGetProvidersQuery,\r\n  useGetProviderOptionsQuery,\r\n  useUpdateProviderOptionsMutation,\r\n};\r\n", "import * as React from 'react';\r\n\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\n\r\nimport { Login } from '../../../shared/contracts/authentication';\r\nimport { createContext } from '../components/Context';\r\nimport { useTypedDispatch, useTypedSelector } from '../core/store/hooks';\r\nimport { useStrapiApp } from '../features/StrapiApp';\r\nimport { useQueryParams } from '../hooks/useQueryParams';\r\nimport { login as loginAction, logout as logoutAction, setLocale } from '../reducer';\r\nimport { adminApi } from '../services/api';\r\nimport {\r\n  useGetMeQuery,\r\n  useGetMyPermissionsQuery,\r\n  useLazyCheckPermissionsQuery,\r\n  useLoginMutation,\r\n  useLogoutMutation,\r\n  useRenewTokenMutation,\r\n} from '../services/auth';\r\n\r\nimport type {\r\n  Permission as PermissionContract,\r\n  SanitizedAdminUser,\r\n} from '../../../shared/contracts/shared';\r\n\r\ninterface Permission\r\n  extends Pick<PermissionContract, 'action' | 'subject'>,\r\n    Partial<Omit<PermissionContract, 'action' | 'subject'>> {}\r\n\r\ninterface User\r\n  extends Pick<SanitizedAdminUser, 'email' | 'firstname' | 'lastname' | 'username' | 'roles'>,\r\n    Partial<Omit<SanitizedAdminUser, 'email' | 'firstname' | 'lastname' | 'username' | 'roles'>> {}\r\n\r\ninterface AuthContextValue {\r\n  login: (\r\n    body: Login.Request['body'] & { rememberMe: boolean }\r\n  ) => Promise<Awaited<ReturnType<ReturnType<typeof useLoginMutation>[0]>>>;\r\n  logout: () => Promise<void>;\r\n  /**\r\n   * @alpha\r\n   * @description given a list of permissions, this function checks\r\n   * those against the current user's permissions or those passed as\r\n   * the second argument, if the user has those permissions the complete\r\n   * permission object form the API is returned. Therefore, if the list is\r\n   * empty, the user does not have any of those permissions.\r\n   */\r\n  checkUserHasPermissions: (\r\n    permissions?: Array<Pick<Permission, 'action'> & Partial<Omit<Permission, 'action'>>>,\r\n    passedPermissions?: Permission[],\r\n    rawQueryContext?: string\r\n  ) => Promise<Permission[]>;\r\n  isLoading: boolean;\r\n  permissions: Permission[];\r\n  refetchPermissions: () => Promise<void>;\r\n  token: string | null;\r\n  user?: User;\r\n}\r\n\r\nconst [Provider, useAuth] = createContext<AuthContextValue>('Auth');\r\n\r\ninterface AuthProviderProps {\r\n  children: React.ReactNode;\r\n  /**\r\n   * @internal could be removed at any time.\r\n   */\r\n  _defaultPermissions?: Permission[];\r\n\r\n  // NOTE: this is used for testing purposed only\r\n  _disableRenewToken?: boolean;\r\n}\r\n\r\nconst STORAGE_KEYS = {\r\n  TOKEN: 'jwtToken',\r\n  STATUS: 'isLoggedIn',\r\n};\r\n\r\nconst AuthProvider = ({\r\n  children,\r\n  _defaultPermissions = [],\r\n  _disableRenewToken = false,\r\n}: AuthProviderProps) => {\r\n  const dispatch = useTypedDispatch();\r\n  const runRbacMiddleware = useStrapiApp('AuthProvider', (state) => state.rbac.run);\r\n  const location = useLocation();\r\n  const [{ rawQuery }] = useQueryParams();\r\n\r\n  const locationRef = React.useRef(location);\r\n\r\n  // Update ref without causing re-render\r\n  React.useEffect(() => {\r\n    locationRef.current = location;\r\n  }, [location]);\r\n\r\n  const token = useTypedSelector((state) => state.admin_app.token ?? null);\r\n\r\n  const { data: user, isLoading: isLoadingUser } = useGetMeQuery(undefined, {\r\n    /**\r\n     * If there's no token, we don't try to fetch\r\n     * the user data because it will fail.\r\n     */\r\n    skip: !token,\r\n  });\r\n\r\n  const {\r\n    data: userPermissions = _defaultPermissions,\r\n    refetch,\r\n    isUninitialized,\r\n    isLoading: isLoadingPermissions,\r\n  } = useGetMyPermissionsQuery(undefined, {\r\n    skip: !token,\r\n  });\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const [loginMutation] = useLoginMutation();\r\n  const [renewTokenMutation] = useRenewTokenMutation();\r\n  const [logoutMutation] = useLogoutMutation();\r\n\r\n  const clearStateAndLogout = React.useCallback(() => {\r\n    dispatch(adminApi.util.resetApiState());\r\n    dispatch(logoutAction());\r\n    navigate('/auth/login');\r\n  }, [dispatch, navigate]);\r\n\r\n  /**\r\n   * Fetch data from storages on mount and store it in our state.\r\n   * It's not normally stored in session storage unless the user\r\n   * does click \"remember me\" when they login. We also need to renew the token.\r\n   */\r\n  React.useEffect(() => {\r\n    if (token && !_disableRenewToken) {\r\n      renewTokenMutation({ token }).then((res) => {\r\n        if ('data' in res) {\r\n          dispatch(\r\n            loginAction({\r\n              token: res.data.token,\r\n            })\r\n          );\r\n        } else {\r\n          clearStateAndLogout();\r\n        }\r\n      });\r\n    }\r\n  }, [token, dispatch, renewTokenMutation, clearStateAndLogout, _disableRenewToken]);\r\n\r\n  React.useEffect(() => {\r\n    if (user) {\r\n      if (user.preferedLanguage) {\r\n        dispatch(setLocale(user.preferedLanguage));\r\n      }\r\n    }\r\n  }, [dispatch, user]);\r\n\r\n  React.useEffect(() => {\r\n    /**\r\n     * This will log a user out of all tabs if they log out in one tab.\r\n     */\r\n    const handleUserStorageChange = (event: StorageEvent) => {\r\n      if (event.key === STORAGE_KEYS.STATUS && event.newValue === null) {\r\n        clearStateAndLogout();\r\n      }\r\n    };\r\n\r\n    window.addEventListener('storage', handleUserStorageChange);\r\n\r\n    return () => {\r\n      window.removeEventListener('storage', handleUserStorageChange);\r\n    };\r\n  });\r\n\r\n  const login = React.useCallback<AuthContextValue['login']>(\r\n    async ({ rememberMe, ...body }) => {\r\n      const res = await loginMutation(body);\r\n\r\n      /**\r\n       * There will always be a `data` key in the response\r\n       * because if something fails, it will throw an error.\r\n       */\r\n      if ('data' in res) {\r\n        const { token } = res.data;\r\n\r\n        dispatch(\r\n          loginAction({\r\n            token,\r\n            persist: rememberMe,\r\n          })\r\n        );\r\n      }\r\n\r\n      return res;\r\n    },\r\n    [dispatch, loginMutation]\r\n  );\r\n\r\n  const logout = React.useCallback(async () => {\r\n    await logoutMutation();\r\n    clearStateAndLogout();\r\n  }, [clearStateAndLogout, logoutMutation]);\r\n\r\n  const refetchPermissions = React.useCallback(async () => {\r\n    if (!isUninitialized) {\r\n      await refetch();\r\n    }\r\n  }, [isUninitialized, refetch]);\r\n\r\n  const [checkPermissions] = useLazyCheckPermissionsQuery();\r\n  const checkUserHasPermissions: AuthContextValue['checkUserHasPermissions'] = React.useCallback(\r\n    async (\r\n      permissions,\r\n      passedPermissions,\r\n      // TODO:\r\n      // Here we have parameterised checkUserHasPermissions in order to pass\r\n      // query context from elsewhere in the application.\r\n      // See packages/core/content-manager/admin/src/features/DocumentRBAC.tsx\r\n\r\n      // This is in order to calculate permissions on accurate query params.\r\n      // We should be able to rely on the query params in this provider\r\n      // If we need to pass additional context to the RBAC middleware\r\n      // we should define a better context type.\r\n      rawQueryContext\r\n    ) => {\r\n      /**\r\n       * If there's no permissions to check, then we allow it to\r\n       * pass to preserve existing behaviours.\r\n       *\r\n       * TODO: should we review this? it feels more dangerous than useful.\r\n       */\r\n      if (!permissions || permissions.length === 0) {\r\n        return [{ action: '', subject: '' }];\r\n      }\r\n\r\n      /**\r\n       * Given the provided permissions, return the permissions from either passedPermissions\r\n       * or userPermissions as this is expected to be the full permission entity.\r\n       */\r\n      const actualUserPermissions = passedPermissions ?? userPermissions;\r\n\r\n      const matchingPermissions = actualUserPermissions.filter(\r\n        (permission) =>\r\n          permissions.findIndex(\r\n            (perm) =>\r\n              perm.action === permission.action &&\r\n              // Only check the subject if it's provided\r\n              (perm.subject == undefined || perm.subject === permission.subject)\r\n          ) >= 0\r\n      );\r\n\r\n      const middlewaredPermissions = await runRbacMiddleware(\r\n        {\r\n          user,\r\n          permissions: userPermissions,\r\n          pathname: locationRef.current.pathname,\r\n          search: (rawQueryContext || rawQuery).split('?')[1] ?? '',\r\n        },\r\n        matchingPermissions\r\n      );\r\n\r\n      const shouldCheckConditions = middlewaredPermissions.some(\r\n        (perm) => Array.isArray(perm.conditions) && perm.conditions.length > 0\r\n      );\r\n\r\n      if (!shouldCheckConditions) {\r\n        return middlewaredPermissions;\r\n      }\r\n\r\n      const { data, error } = await checkPermissions({\r\n        permissions: middlewaredPermissions.map((perm) => ({\r\n          action: perm.action,\r\n          subject: perm.subject,\r\n        })),\r\n      });\r\n\r\n      if (error) {\r\n        throw error;\r\n      } else {\r\n        return middlewaredPermissions.filter((_, index) => data?.data[index] === true);\r\n      }\r\n    },\r\n    [checkPermissions, rawQuery, runRbacMiddleware, user, userPermissions]\r\n  );\r\n\r\n  const isLoading = isLoadingUser || isLoadingPermissions;\r\n\r\n  return (\r\n    <Provider\r\n      token={token}\r\n      user={user}\r\n      login={login}\r\n      logout={logout}\r\n      permissions={userPermissions}\r\n      checkUserHasPermissions={checkUserHasPermissions}\r\n      refetchPermissions={refetchPermissions}\r\n      isLoading={isLoading}\r\n    >\r\n      {children}\r\n    </Provider>\r\n  );\r\n};\r\n\r\nexport { AuthProvider, useAuth, STORAGE_KEYS };\r\nexport type { AuthContextValue, Permission, User };\r\n"],
  "mappings": "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",
  "names": ["STORAGE_KEYS", "login", "token", "logout"]
}
