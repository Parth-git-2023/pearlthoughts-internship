{
  "version": 3,
  "sources": ["../../../../../packages/core/content-manager/admin/src/components/FieldTypeIcon.tsx"],
  "sourcesContent": ["import * as React from 'react';\r\n\r\nimport { useStrapiApp } from '@strapi/admin/strapi-admin';\r\nimport { Box } from '@strapi/design-system';\r\nimport {\r\n  BlocksField,\r\n  BooleanField,\r\n  ComponentField,\r\n  DateField,\r\n  DynamicZoneField,\r\n  EmailField,\r\n  EnumerationField,\r\n  JsonField,\r\n  MediaField,\r\n  NumberField,\r\n  PasswordField,\r\n  RelationField,\r\n  TextField,\r\n  UidField,\r\n} from '@strapi/icons/symbols';\r\n\r\nimport type { Schema } from '@strapi/types';\r\n\r\nconst iconByTypes: Record<Schema.Attribute.Kind, React.ReactElement> = {\r\n  biginteger: <NumberField />,\r\n  boolean: <BooleanField />,\r\n  date: <DateField />,\r\n  datetime: <DateField />,\r\n  decimal: <NumberField />,\r\n  email: <EmailField />,\r\n  enumeration: <EnumerationField />,\r\n  float: <NumberField />,\r\n  integer: <NumberField />,\r\n  media: <MediaField />,\r\n  password: <PasswordField />,\r\n  relation: <RelationField />,\r\n  string: <TextField />,\r\n  text: <TextField />,\r\n  richtext: <TextField />,\r\n  time: <DateField />,\r\n  timestamp: <DateField />,\r\n  json: <JsonField />,\r\n  uid: <UidField />,\r\n  component: <ComponentField />,\r\n  dynamiczone: <DynamicZoneField />,\r\n  blocks: <BlocksField />,\r\n};\r\n\r\ninterface FieldTypeIconProps {\r\n  type?: keyof typeof iconByTypes;\r\n  customFieldUid?: string;\r\n}\r\n\r\nconst FieldTypeIcon = ({ type, customFieldUid }: FieldTypeIconProps) => {\r\n  const getCustomField = useStrapiApp('FieldTypeIcon', (state) => state.customFields.get);\r\n\r\n  if (!type) {\r\n    return null;\r\n  }\r\n\r\n  let Compo = iconByTypes[type];\r\n\r\n  if (customFieldUid) {\r\n    const customField = getCustomField(customFieldUid);\r\n    const CustomFieldIcon = customField?.icon;\r\n\r\n    if (CustomFieldIcon) {\r\n      Compo = (\r\n        <Box marginRight={3} width={7} height={6}>\r\n          <CustomFieldIcon />\r\n        </Box>\r\n      );\r\n    }\r\n  }\r\n\r\n  if (!iconByTypes[type]) {\r\n    return null;\r\n  }\r\n\r\n  return Compo;\r\n};\r\n\r\nexport { FieldTypeIcon };\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBc;AADd,IAAM,cAAiE;AAAA,EACrE,gBAAY,wBAAC,gBAAY;AAAA,EACzB,aAAS,wBAAC,iBAAa;AAAA,EACvB,UAAM,wBAAC,gBAAU;AAAA,EACjB,cAAU,wBAAC,gBAAU;AAAA,EACrB,aAAS,wBAAC,gBAAY;AAAA,EACtB,WAAO,wBAAC,gBAAW;AAAA,EACnB,iBAAa,wBAAC,gBAAiB;AAAA,EAC/B,WAAO,wBAAC,gBAAY;AAAA,EACpB,aAAS,wBAAC,gBAAY;AAAA,EACtB,WAAO,wBAAC,gBAAW;AAAA,EACnB,cAAU,wBAAC,gBAAc;AAAA,EACzB,cAAU,wBAAC,gBAAc;AAAA,EACzB,YAAQ,wBAAC,gBAAU;AAAA,EACnB,UAAM,wBAAC,gBAAU;AAAA,EACjB,cAAU,wBAAC,gBAAU;AAAA,EACrB,UAAM,wBAAC,gBAAU;AAAA,EACjB,eAAW,wBAAC,gBAAU;AAAA,EACtB,UAAM,wBAAC,gBAAU;AAAA,EACjB,SAAK,wBAAC,gBAAS;AAAA,EACf,eAAW,wBAAC,gBAAe;AAAA,EAC3B,iBAAa,wBAAC,gBAAiB;AAAA,EAC/B,YAAQ,wBAAC,iBAAY;AACvB;AAOA,IAAM,gBAAgB,CAAC,EAAE,MAAM,eAAe,MAA0B;AACtE,QAAM,iBAAiB,aAAa,iBAAiB,CAAC,UAAU,MAAM,aAAa,GAAG;AAEtF,MAAI,CAAC,MAAM;AACT,WAAO;AAAA,EACT;AAEA,MAAI,QAAQ,YAAY,IAAI;AAE5B,MAAI,gBAAgB;AAClB,UAAM,cAAc,eAAe,cAAc;AACjD,UAAM,kBAAkB,2CAAa;AAErC,QAAI,iBAAiB;AACnB,kBACE,wBAAC,OAAI,aAAa,GAAG,OAAO,GAAG,QAAQ,GACrC,sCAAC,mBAAgB,GACnB;AAAA,IAEJ;AAAA,EACF;AAEA,MAAI,CAAC,YAAY,IAAI,GAAG;AACtB,WAAO;AAAA,EACT;AAEA,SAAO;AACT;",
  "names": []
}
