import {
  Header,
  Root
} from "./chunk-33Q2VMJJ.js";
import {
  LimitsModal,
  useReviewWorkflows
} from "./chunk-PDFANPEC.js";
import {
  CHARGEBEE_WORKFLOW_ENTITLEMENT_NAME,
  useGetContentTypesQuery
} from "./chunk-HIJT5MYP.js";
import {
  useTypedSelector
} from "./chunk-VTVLQIYR.js";
import "./chunk-XONCH55P.js";
import "./chunk-VGLD7XCK.js";
import "./chunk-2ZQUEACL.js";
import "./chunk-FYXG3DTK.js";
import "./chunk-56D2UW5G.js";
import "./chunk-AUQFPK2Y.js";
import "./chunk-XEUV47ZT.js";
import "./chunk-4J4JH4DL.js";
import {
  useLicenseLimits
} from "./chunk-WCUETHLG.js";
import "./chunk-HXZ2GHFZ.js";
import "./chunk-G3UG26ZE.js";
import "./chunk-6Q5DMVVB.js";
import "./chunk-D5N4CUND.js";
import "./chunk-Y6F2Z2AQ.js";
import "./chunk-HSX2BZF6.js";
import {
  Table
} from "./chunk-L5ESVDCC.js";
import "./chunk-XXRLJZ2Z.js";
import "./chunk-7WFYXSNR.js";
import "./chunk-5TWNRMNB.js";
import "./chunk-ZRXSF5PI.js";
import "./chunk-2M3OHFCF.js";
import "./chunk-3QOMPMDL.js";
import "./chunk-L6MVB4FQ.js";
import "./chunk-OQ5X2AZ3.js";
import {
  ConfirmDialog
} from "./chunk-7XSIHJSQ.js";
import {
  useRBAC
} from "./chunk-PJGZMO5F.js";
import "./chunk-6MHIA2XQ.js";
import "./chunk-X5YFDRMS.js";
import "./chunk-LVVND4TK.js";
import "./chunk-O6JJIRK6.js";
import {
  useTracking
} from "./chunk-DHQERSO6.js";
import "./chunk-GLPT7RON.js";
import "./chunk-54PZNGL6.js";
import {
  Page
} from "./chunk-OUTHPJ5W.js";
import "./chunk-YQN4TQZU.js";
import "./chunk-ITUTZMO4.js";
import "./chunk-S4GSJQUH.js";
import "./chunk-3CYOA7RQ.js";
import "./chunk-3Y3HZKRY.js";
import "./chunk-PR5W4YOM.js";
import "./chunk-75I5DWRQ.js";
import {
  Link,
  NavLink,
  useNavigate
} from "./chunk-QOSJGLB6.js";
import "./chunk-O4TQZ7PI.js";
import "./chunk-6VYH4IES.js";
import "./chunk-ICS3EKH5.js";
import "./chunk-6VU4ULW6.js";
import "./chunk-WA6BWN3W.js";
import "./chunk-UCDGERJK.js";
import "./chunk-I7675365.js";
import "./chunk-EHBUXG3W.js";
import "./chunk-5KTEVKJL.js";
import "./chunk-CEKG4MVB.js";
import "./chunk-CLDKBGB3.js";
import "./chunk-RYHDJ43U.js";
import "./chunk-GARU6WOT.js";
import "./chunk-2T3F2FEA.js";
import "./chunk-FBKW3ZX5.js";
import "./chunk-6XMPWYL4.js";
import "./chunk-4PYOUU3W.js";
import "./chunk-JNCTODJD.js";
import "./chunk-2VOUQL7N.js";
import "./chunk-SMSMUSQ2.js";
import "./chunk-PBKEIS74.js";
import "./chunk-XNLL4XTY.js";
import "./chunk-VJHHRLHY.js";
import "./chunk-HWWDZF4D.js";
import "./chunk-Z7WXACEM.js";
import "./chunk-PZKJYQOP.js";
import "./chunk-KTCYCI5X.js";
import "./chunk-4S6CO3NF.js";
import "./chunk-WZMMABOO.js";
import "./chunk-KU6R7J3L.js";
import "./chunk-ALOZZQWE.js";
import "./chunk-3XH2Q2B6.js";
import "./chunk-SM5ZDAVK.js";
import "./chunk-AAOWBC4P.js";
import "./chunk-AVUVASSG.js";
import "./chunk-DEZRKVMG.js";
import "./chunk-LDTLLP4K.js";
import "./chunk-CFOYKXNH.js";
import "./chunk-DWNGFC4T.js";
import "./chunk-SKI2TI5D.js";
import "./chunk-PQYVQDZP.js";
import "./chunk-ZGAXZ2TY.js";
import "./chunk-6EUDYBNR.js";
import "./chunk-3KMG3VFU.js";
import "./chunk-UTVXCYRG.js";
import {
  Dialog,
  Flex,
  IconButton,
  LinkButton,
  TFooter,
  Typography
} from "./chunk-3AUSDG4O.js";
import {
  ForwardRef$1l,
  ForwardRef$1z,
  ForwardRef$n
} from "./chunk-F5I3ZVMF.js";
import "./chunk-FJZ2NJT6.js";
import "./chunk-VH7UJDNP.js";
import "./chunk-HG4QJCZT.js";
import "./chunk-I7DIJEXN.js";
import {
  useIntl
} from "./chunk-2BDXRWHF.js";
import "./chunk-SBRVGDJ6.js";
import "./chunk-YUZK7WZ2.js";
import "./chunk-NSR7OH4Q.js";
import "./chunk-ZCDXR5JO.js";
import "./chunk-47RN6QNY.js";
import "./chunk-IMHIZKPC.js";
import "./chunk-URNLJJFR.js";
import "./chunk-JHXWLAQ5.js";
import "./chunk-PWXBRFBA.js";
import "./chunk-MZAWSZWW.js";
import "./chunk-QIQU42WJ.js";
import "./chunk-XVBZSUZI.js";
import "./chunk-2NWCSGSS.js";
import {
  require_jsx_runtime
} from "./chunk-GAPF2DTI.js";
import {
  require_react
} from "./chunk-2ZN62OJX.js";
import "./chunk-IV5CMKTD.js";
import "./chunk-ENGB2K3X.js";
import "./chunk-ISIKDMAB.js";
import "./chunk-X5DDYWPV.js";
import "./chunk-TUHVKLNT.js";
import "./chunk-3POB64WN.js";
import "./chunk-63YMLYWU.js";
import "./chunk-YIY4KI6G.js";
import "./chunk-7CLWPW6Q.js";
import "./chunk-IVGYXB4P.js";
import "./chunk-H3WCXLKE.js";
import "./chunk-NDGNZ36Q.js";
import "./chunk-MNGCFISN.js";
import {
  __toESM
} from "./chunk-X6GFWOGJ.js";

// ../packages/core/review-workflows/admin/src/routes/settings/index.tsx
var React = __toESM(require_react());
var import_jsx_runtime = __toESM(require_jsx_runtime());
var ReviewWorkflowsListView = () => {
  const { formatMessage } = useIntl();
  const navigate = useNavigate();
  const { trackUsage } = useTracking();
  const [workflowToDelete, setWorkflowToDelete] = React.useState(null);
  const [showLimitModal, setShowLimitModal] = React.useState(false);
  const { data, isLoading: isLoadingModels } = useGetContentTypesQuery();
  const { meta, workflows, isLoading, delete: deleteAction } = useReviewWorkflows();
  const { getFeature, isLoading: isLicenseLoading } = useLicenseLimits();
  const permissions = useTypedSelector(
    (state) => {
      var _a;
      return (_a = state.admin_app.permissions.settings) == null ? void 0 : _a["review-workflows"];
    }
  );
  const {
    allowedActions: { canCreate, canRead, canUpdate, canDelete }
  } = useRBAC(permissions);
  const limits = getFeature("review-workflows");
  const numberOfWorkflows = limits == null ? void 0 : limits[CHARGEBEE_WORKFLOW_ENTITLEMENT_NAME];
  const handleDeleteWorkflow = (workflowId) => {
    setWorkflowToDelete(workflowId);
  };
  const toggleConfirmDeleteDialog = () => {
    setWorkflowToDelete(null);
  };
  const handleConfirmDeleteDialog = async () => {
    if (!workflowToDelete) return;
    await deleteAction(workflowToDelete);
    setWorkflowToDelete(null);
  };
  const handleCreateClick = (event) => {
    event.preventDefault();
    if (numberOfWorkflows && meta && (meta == null ? void 0 : meta.workflowCount) >= parseInt(numberOfWorkflows, 10)) {
      event.preventDefault();
      setShowLimitModal(true);
    } else {
      navigate("create");
      trackUsage("willCreateWorkflow");
    }
  };
  React.useEffect(() => {
    if (!isLoading && !isLicenseLoading) {
      if (numberOfWorkflows && meta && (meta == null ? void 0 : meta.workflowCount) > parseInt(numberOfWorkflows, 10)) {
        setShowLimitModal(true);
      }
    }
  }, [isLicenseLoading, isLoading, meta, meta == null ? void 0 : meta.workflowCount, numberOfWorkflows]);
  const headers = [
    {
      label: formatMessage({
        id: "Settings.review-workflows.list.page.list.column.name.title",
        defaultMessage: "Name"
      }),
      name: "name"
    },
    {
      label: formatMessage({
        id: "Settings.review-workflows.list.page.list.column.stages.title",
        defaultMessage: "Stages"
      }),
      name: "stages"
    },
    {
      label: formatMessage({
        id: "Settings.review-workflows.list.page.list.column.contentTypes.title",
        defaultMessage: "Content Types"
      }),
      name: "content-types"
    }
  ];
  if (isLoading || isLoadingModels) {
    return (0, import_jsx_runtime.jsx)(Page.Loading, {});
  }
  const contentTypes = Object.values(data ?? {}).reduce((acc, curr) => {
    acc.push(...curr);
    return acc;
  }, []);
  return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
    (0, import_jsx_runtime.jsx)(
      Header,
      {
        primaryAction: canCreate ? (0, import_jsx_runtime.jsx)(
          LinkButton,
          {
            startIcon: (0, import_jsx_runtime.jsx)(ForwardRef$1l, {}),
            size: "S",
            tag: NavLink,
            to: "create",
            onClick: handleCreateClick,
            children: formatMessage({
              id: "Settings.review-workflows.list.page.create",
              defaultMessage: "Create new workflow"
            })
          }
        ) : null,
        subtitle: formatMessage({
          id: "Settings.review-workflows.list.page.subtitle",
          defaultMessage: "Manage your content review process"
        }),
        title: formatMessage({
          id: "Settings.review-workflows.list.page.title",
          defaultMessage: "Review Workflows"
        })
      }
    ),
    (0, import_jsx_runtime.jsxs)(Root, { children: [
      (0, import_jsx_runtime.jsx)(
        Table.Root,
        {
          isLoading,
          rows: workflows,
          footer: canCreate ? (0, import_jsx_runtime.jsx)(TFooter, { cursor: "pointer", icon: (0, import_jsx_runtime.jsx)(ForwardRef$1l, {}), onClick: handleCreateClick, children: formatMessage({
            id: "Settings.review-workflows.list.page.create",
            defaultMessage: "Create new workflow"
          }) }) : null,
          headers,
          children: (0, import_jsx_runtime.jsxs)(Table.Content, { children: [
            (0, import_jsx_runtime.jsx)(Table.Head, { children: headers.map((head) => (0, import_jsx_runtime.jsx)(Table.HeaderCell, { ...head }, head.name)) }),
            (0, import_jsx_runtime.jsx)(Table.Body, { children: workflows.map((workflow) => (0, import_jsx_runtime.jsxs)(
              Table.Row,
              {
                onClick: () => {
                  navigate(`${workflow.id}`);
                },
                children: [
                  (0, import_jsx_runtime.jsx)(Table.Cell, { width: "25rem", children: (0, import_jsx_runtime.jsx)(Typography, { textColor: "neutral800", fontWeight: "bold", ellipsis: true, children: workflow.name }) }),
                  (0, import_jsx_runtime.jsx)(Table.Cell, { children: (0, import_jsx_runtime.jsx)(Typography, { textColor: "neutral800", children: workflow.stages.length }) }),
                  (0, import_jsx_runtime.jsx)(Table.Cell, { children: (0, import_jsx_runtime.jsx)(Typography, { textColor: "neutral800", children: workflow.contentTypes.map((uid) => {
                    const contentType = contentTypes.find(
                      (contentType2) => contentType2.uid === uid
                    );
                    return (contentType == null ? void 0 : contentType.info.displayName) ?? "";
                  }).join(", ") }) }),
                  (0, import_jsx_runtime.jsx)(Table.Cell, { children: (0, import_jsx_runtime.jsxs)(Flex, { alignItems: "center", justifyContent: "end", children: [
                    canRead || canUpdate ? (0, import_jsx_runtime.jsx)(
                      IconButton,
                      {
                        tag: Link,
                        to: workflow.id.toString(),
                        label: formatMessage(
                          {
                            id: "Settings.review-workflows.list.page.list.column.actions.edit.label",
                            defaultMessage: "Edit {name}"
                          },
                          { name: workflow.name }
                        ),
                        variant: "ghost",
                        children: (0, import_jsx_runtime.jsx)(ForwardRef$1z, {})
                      }
                    ) : null,
                    workflows.length > 1 && canDelete ? (0, import_jsx_runtime.jsx)(
                      IconButton,
                      {
                        withTooltip: false,
                        label: formatMessage(
                          {
                            id: "Settings.review-workflows.list.page.list.column.actions.delete.label",
                            defaultMessage: "Delete {name}"
                          },
                          { name: "Default workflow" }
                        ),
                        variant: "ghost",
                        onClick: (e) => {
                          e.stopPropagation();
                          handleDeleteWorkflow(String(workflow.id));
                        },
                        children: (0, import_jsx_runtime.jsx)(ForwardRef$n, {})
                      }
                    ) : null
                  ] }) })
                ]
              },
              workflow.id
            )) })
          ] })
        }
      ),
      (0, import_jsx_runtime.jsx)(Dialog.Root, { open: !!workflowToDelete, onOpenChange: toggleConfirmDeleteDialog, children: (0, import_jsx_runtime.jsx)(ConfirmDialog, { onConfirm: handleConfirmDeleteDialog, children: formatMessage({
        id: "Settings.review-workflows.list.page.delete.confirm.body",
        defaultMessage: "If you remove this worfklow, all stage-related information will be removed for this content-type. Are you sure you want to remove it?"
      }) }) }),
      (0, import_jsx_runtime.jsxs)(LimitsModal.Root, { open: showLimitModal, onOpenChange: () => setShowLimitModal(false), children: [
        (0, import_jsx_runtime.jsx)(LimitsModal.Title, { children: formatMessage({
          id: "Settings.review-workflows.list.page.workflows.limit.title",
          defaultMessage: "You’ve reached the limit of workflows in your plan"
        }) }),
        (0, import_jsx_runtime.jsx)(LimitsModal.Body, { children: formatMessage({
          id: "Settings.review-workflows.list.page.workflows.limit.body",
          defaultMessage: "Delete a workflow or contact Sales to enable more workflows."
        }) })
      ] })
    ] })
  ] });
};
var ProtectedListPage = () => {
  const permissions = useTypedSelector(
    (state) => {
      var _a, _b;
      return (_b = (_a = state.admin_app.permissions.settings) == null ? void 0 : _a["review-workflows"]) == null ? void 0 : _b.main;
    }
  );
  return (0, import_jsx_runtime.jsx)(Page.Protect, { permissions, children: (0, import_jsx_runtime.jsx)(ReviewWorkflowsListView, {}) });
};
export {
  ProtectedListPage,
  ReviewWorkflowsListView
};
//# sourceMappingURL=settings-YWIMN75S.js.map
