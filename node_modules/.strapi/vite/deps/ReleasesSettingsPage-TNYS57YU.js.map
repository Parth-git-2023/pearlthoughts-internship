{
  "version": 3,
  "sources": ["../../../../../packages/core/content-releases/admin/src/pages/ReleasesSettingsPage.tsx"],
  "sourcesContent": ["import {\r\n  Form,\r\n  Layouts,\r\n  Page,\r\n  useAPIErrorHandler,\r\n  isFetchError,\r\n  GradientBadge,\r\n  useNotification,\r\n  useField,\r\n  useRBAC,\r\n  FormHelpers,\r\n} from '@strapi/admin/strapi-admin';\r\nimport {\r\n  Button,\r\n  Combobox,\r\n  ComboboxOption,\r\n  Field,\r\n  Flex,\r\n  Grid,\r\n  Typography,\r\n} from '@strapi/design-system';\r\nimport { Check } from '@strapi/icons';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { useTypedSelector } from '../modules/hooks';\r\nimport { useGetReleaseSettingsQuery, useUpdateReleaseSettingsMutation } from '../services/release';\r\nimport { getTimezones } from '../utils/time';\r\nimport { SETTINGS_SCHEMA } from '../validation/schemas';\r\n\r\nimport type { UpdateSettings } from '../../../shared/contracts/settings';\r\n\r\ninterface UpdateDefaultTimezone {\r\n  defaultTimezone: string;\r\n}\r\n\r\nconst ReleasesSettingsPage = () => {\r\n  const { formatMessage } = useIntl();\r\n  const { formatAPIError } = useAPIErrorHandler();\r\n  const { toggleNotification } = useNotification();\r\n  const { data, isLoading: isLoadingSettings } = useGetReleaseSettingsQuery();\r\n  const [updateReleaseSettings, { isLoading: isSubmittingForm }] =\r\n    useUpdateReleaseSettingsMutation();\r\n  const permissions = useTypedSelector(\r\n    (state) => state.admin_app.permissions['settings']?.['releases']\r\n  );\r\n  const {\r\n    allowedActions: { canUpdate },\r\n  } = useRBAC(permissions);\r\n\r\n  const { timezoneList } = getTimezones(new Date());\r\n\r\n  const handleSubmit = async (\r\n    body: UpdateSettings.Request['body'],\r\n    { setErrors }: FormHelpers<UpdateDefaultTimezone>\r\n  ) => {\r\n    const { defaultTimezone } = body;\r\n    const formattedDefaultTimezone = defaultTimezone;\r\n    const isBodyTimezoneValid = timezoneList.some(\r\n      (timezone) => timezone.value === formattedDefaultTimezone\r\n    );\r\n\r\n    if (!isBodyTimezoneValid && defaultTimezone) {\r\n      const errorMessage = formatMessage({\r\n        id: 'components.Input.error.validation.combobox.invalid',\r\n        defaultMessage: 'The value provided is not valid',\r\n      });\r\n      setErrors({\r\n        defaultTimezone: errorMessage,\r\n      });\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: errorMessage,\r\n      });\r\n      return;\r\n    }\r\n\r\n    const newBody =\r\n      !defaultTimezone || !isBodyTimezoneValid\r\n        ? { defaultTimezone: null }\r\n        : { defaultTimezone: formattedDefaultTimezone };\r\n\r\n    try {\r\n      const response = await updateReleaseSettings(newBody);\r\n\r\n      if ('data' in response) {\r\n        toggleNotification({\r\n          type: 'success',\r\n          message: formatMessage({\r\n            id: 'content-releases.pages.Settings.releases.setting.default-timezone-notification-success',\r\n            defaultMessage: 'Default timezone updated.',\r\n          }),\r\n        });\r\n      } else if (isFetchError(response.error)) {\r\n        toggleNotification({\r\n          type: 'danger',\r\n          message: formatAPIError(response.error),\r\n        });\r\n      } else {\r\n        toggleNotification({\r\n          type: 'danger',\r\n          message: formatMessage({\r\n            id: 'notification.error',\r\n            defaultMessage: 'An error occurred',\r\n          }),\r\n        });\r\n      }\r\n    } catch (error) {\r\n      toggleNotification({\r\n        type: 'danger',\r\n        message: formatMessage({\r\n          id: 'notification.error',\r\n          defaultMessage: 'An error occurred',\r\n        }),\r\n      });\r\n    }\r\n  };\r\n\r\n  if (isLoadingSettings) {\r\n    return <Page.Loading />;\r\n  }\r\n\r\n  const releasePageTitle = formatMessage({\r\n    id: 'content-releases.pages.Releases.title',\r\n    defaultMessage: 'Releases',\r\n  });\r\n\r\n  return (\r\n    <Layouts.Root>\r\n      <Page.Title>\r\n        {formatMessage(\r\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\r\n          {\r\n            name: releasePageTitle,\r\n          }\r\n        )}\r\n      </Page.Title>\r\n      <Page.Main aria-busy={isLoadingSettings} tabIndex={-1}>\r\n        <Form\r\n          method=\"PUT\"\r\n          initialValues={{\r\n            defaultTimezone: data?.data.defaultTimezone,\r\n          }}\r\n          onSubmit={handleSubmit}\r\n          validationSchema={SETTINGS_SCHEMA}\r\n        >\r\n          {({ modified, isSubmitting }: { modified: boolean; isSubmitting: boolean }) => {\r\n            return (\r\n              <>\r\n                <Layouts.Header\r\n                  primaryAction={\r\n                    canUpdate ? (\r\n                      <Button\r\n                        disabled={!modified || isSubmittingForm}\r\n                        loading={isSubmitting}\r\n                        startIcon={<Check />}\r\n                        type=\"submit\"\r\n                      >\r\n                        {formatMessage({\r\n                          id: 'global.save',\r\n                          defaultMessage: 'Save',\r\n                        })}\r\n                      </Button>\r\n                    ) : null\r\n                  }\r\n                  secondaryAction={\r\n                    <GradientBadge\r\n                      label={formatMessage({\r\n                        id: 'components.premiumFeature.title',\r\n                        defaultMessage: 'Premium feature',\r\n                      })}\r\n                    />\r\n                  }\r\n                  title={releasePageTitle}\r\n                  subtitle={formatMessage({\r\n                    id: 'content-releases.pages.Settings.releases.description',\r\n                    defaultMessage: 'Create and manage content updates',\r\n                  })}\r\n                />\r\n                <Layouts.Content>\r\n                  <Flex\r\n                    direction=\"column\"\r\n                    background=\"neutral0\"\r\n                    alignItems=\"stretch\"\r\n                    padding={6}\r\n                    gap={6}\r\n                    shadow=\"filterShadow\"\r\n                    hasRadius\r\n                  >\r\n                    <Typography variant=\"delta\" tag=\"h2\">\r\n                      {formatMessage({\r\n                        id: 'content-releases.pages.Settings.releases.preferences.title',\r\n                        defaultMessage: 'Preferences',\r\n                      })}\r\n                    </Typography>\r\n                    <Grid.Root>\r\n                      <Grid.Item col={6} s={12} direction=\"column\" alignItems=\"stretch\">\r\n                        <TimezoneDropdown />\r\n                      </Grid.Item>\r\n                    </Grid.Root>\r\n                  </Flex>\r\n                </Layouts.Content>\r\n              </>\r\n            );\r\n          }}\r\n        </Form>\r\n      </Page.Main>\r\n    </Layouts.Root>\r\n  );\r\n};\r\n\r\nconst TimezoneDropdown = () => {\r\n  const permissions = useTypedSelector(\r\n    (state) => state.admin_app.permissions['settings']?.['releases']\r\n  );\r\n  const {\r\n    allowedActions: { canUpdate },\r\n  } = useRBAC(permissions);\r\n  const { formatMessage } = useIntl();\r\n  const { timezoneList } = getTimezones(new Date());\r\n  const field = useField('defaultTimezone');\r\n  return (\r\n    <Field.Root\r\n      name=\"defaultTimezone\"\r\n      hint={formatMessage({\r\n        id: 'content-releases.pages.Settings.releases.timezone.hint',\r\n        defaultMessage: 'The timezone of every release can still be changed individually.',\r\n      })}\r\n      error={field.error}\r\n    >\r\n      <Field.Label>\r\n        {formatMessage({\r\n          id: 'content-releases.pages.Settings.releases.timezone.label',\r\n          defaultMessage: 'Default timezone',\r\n        })}\r\n      </Field.Label>\r\n      <Combobox\r\n        autocomplete={{ type: 'list', filter: 'contains' }}\r\n        onTextValueChange={(value) => field.onChange('defaultTimezone', value)}\r\n        onChange={(value) => {\r\n          if ((field.value && value) || !field.value) {\r\n            field.onChange('defaultTimezone', value);\r\n          }\r\n        }}\r\n        onClear={() => field.onChange('defaultTimezone', '')}\r\n        value={field.value}\r\n        disabled={!canUpdate}\r\n      >\r\n        {timezoneList.map((timezone) => (\r\n          <ComboboxOption key={timezone.value} value={timezone.value}>\r\n            {timezone.value.replace(/&/, ' ')}\r\n          </ComboboxOption>\r\n        ))}\r\n      </Combobox>\r\n      <Field.Hint />\r\n      <Field.Error />\r\n    </Field.Root>\r\n  );\r\n};\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ProtectedSettingsPage\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const ProtectedReleasesSettingsPage = () => {\r\n  const permissions = useTypedSelector(\r\n    (state) => state.admin_app.permissions['settings']?.['releases']?.read\r\n  );\r\n\r\n  return (\r\n    <Page.Protect permissions={permissions}>\r\n      <ReleasesSettingsPage />\r\n    </Page.Protect>\r\n  );\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
